/*! jQuery v1.8.2 jquery.com | jquery.org/license */
(function(a,b){function G(a){var b=F[a]={};return p.each(a.split(s),function(a,c){b[c]=!0}),b}function J(a,c,d){if(d===b&&a.nodeType===1){var e="data-"+c.replace(I,"-$1").toLowerCase();d=a.getAttribute(e);if(typeof d=="string"){try{d=d==="true"?!0:d==="false"?!1:d==="null"?null:+d+""===d?+d:H.test(d)?p.parseJSON(d):d}catch(f){}p.data(a,c,d)}else d=b}return d}function K(a){var b;for(b in a){if(b==="data"&&p.isEmptyObject(a[b]))continue;if(b!=="toJSON")return!1}return!0}function ba(){return!1}function bb(){return!0}function bh(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function bi(a,b){do a=a[b];while(a&&a.nodeType!==1);return a}function bj(a,b,c){b=b||0;if(p.isFunction(b))return p.grep(a,function(a,d){var e=!!b.call(a,d,a);return e===c});if(b.nodeType)return p.grep(a,function(a,d){return a===b===c});if(typeof b=="string"){var d=p.grep(a,function(a){return a.nodeType===1});if(be.test(b))return p.filter(b,d,!c);b=p.filter(b,d)}return p.grep(a,function(a,d){return p.inArray(a,b)>=0===c})}function bk(a){var b=bl.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}function bC(a,b){return a.getElementsByTagName(b)[0]||a.appendChild(a.ownerDocument.createElement(b))}function bD(a,b){if(b.nodeType!==1||!p.hasData(a))return;var c,d,e,f=p._data(a),g=p._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;d<e;d++)p.event.add(b,c,h[c][d])}g.data&&(g.data=p.extend({},g.data))}function bE(a,b){var c;if(b.nodeType!==1)return;b.clearAttributes&&b.clearAttributes(),b.mergeAttributes&&b.mergeAttributes(a),c=b.nodeName.toLowerCase(),c==="object"?(b.parentNode&&(b.outerHTML=a.outerHTML),p.support.html5Clone&&a.innerHTML&&!p.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):c==="input"&&bv.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):c==="option"?b.selected=a.defaultSelected:c==="input"||c==="textarea"?b.defaultValue=a.defaultValue:c==="script"&&b.text!==a.text&&(b.text=a.text),b.removeAttribute(p.expando)}function bF(a){return typeof a.getElementsByTagName!="undefined"?a.getElementsByTagName("*"):typeof a.querySelectorAll!="undefined"?a.querySelectorAll("*"):[]}function bG(a){bv.test(a.type)&&(a.defaultChecked=a.checked)}function bY(a,b){if(b in a)return b;var c=b.charAt(0).toUpperCase()+b.slice(1),d=b,e=bW.length;while(e--){b=bW[e]+c;if(b in a)return b}return d}function bZ(a,b){return a=b||a,p.css(a,"display")==="none"||!p.contains(a.ownerDocument,a)}function b$(a,b){var c,d,e=[],f=0,g=a.length;for(;f<g;f++){c=a[f];if(!c.style)continue;e[f]=p._data(c,"olddisplay"),b?(!e[f]&&c.style.display==="none"&&(c.style.display=""),c.style.display===""&&bZ(c)&&(e[f]=p._data(c,"olddisplay",cc(c.nodeName)))):(d=bH(c,"display"),!e[f]&&d!=="none"&&p._data(c,"olddisplay",d))}for(f=0;f<g;f++){c=a[f];if(!c.style)continue;if(!b||c.style.display==="none"||c.style.display==="")c.style.display=b?e[f]||"":"none"}return a}function b_(a,b,c){var d=bP.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function ca(a,b,c,d){var e=c===(d?"border":"content")?4:b==="width"?1:0,f=0;for(;e<4;e+=2)c==="margin"&&(f+=p.css(a,c+bV[e],!0)),d?(c==="content"&&(f-=parseFloat(bH(a,"padding"+bV[e]))||0),c!=="margin"&&(f-=parseFloat(bH(a,"border"+bV[e]+"Width"))||0)):(f+=parseFloat(bH(a,"padding"+bV[e]))||0,c!=="padding"&&(f+=parseFloat(bH(a,"border"+bV[e]+"Width"))||0));return f}function cb(a,b,c){var d=b==="width"?a.offsetWidth:a.offsetHeight,e=!0,f=p.support.boxSizing&&p.css(a,"boxSizing")==="border-box";if(d<=0||d==null){d=bH(a,b);if(d<0||d==null)d=a.style[b];if(bQ.test(d))return d;e=f&&(p.support.boxSizingReliable||d===a.style[b]),d=parseFloat(d)||0}return d+ca(a,b,c||(f?"border":"content"),e)+"px"}function cc(a){if(bS[a])return bS[a];var b=p("<"+a+">").appendTo(e.body),c=b.css("display");b.remove();if(c==="none"||c===""){bI=e.body.appendChild(bI||p.extend(e.createElement("iframe"),{frameBorder:0,width:0,height:0}));if(!bJ||!bI.createElement)bJ=(bI.contentWindow||bI.contentDocument).document,bJ.write("<!doctype html><html><body>"),bJ.close();b=bJ.body.appendChild(bJ.createElement(a)),c=bH(b,"display"),e.body.removeChild(bI)}return bS[a]=c,c}function ci(a,b,c,d){var e;if(p.isArray(b))p.each(b,function(b,e){c||ce.test(a)?d(a,e):ci(a+"["+(typeof e=="object"?b:"")+"]",e,c,d)});else if(!c&&p.type(b)==="object")for(e in b)ci(a+"["+e+"]",b[e],c,d);else d(a,b)}function cz(a){return function(b,c){typeof b!="string"&&(c=b,b="*");var d,e,f,g=b.toLowerCase().split(s),h=0,i=g.length;if(p.isFunction(c))for(;h<i;h++)d=g[h],f=/^\+/.test(d),f&&(d=d.substr(1)||"*"),e=a[d]=a[d]||[],e[f?"unshift":"push"](c)}}function cA(a,c,d,e,f,g){f=f||c.dataTypes[0],g=g||{},g[f]=!0;var h,i=a[f],j=0,k=i?i.length:0,l=a===cv;for(;j<k&&(l||!h);j++)h=i[j](c,d,e),typeof h=="string"&&(!l||g[h]?h=b:(c.dataTypes.unshift(h),h=cA(a,c,d,e,h,g)));return(l||!h)&&!g["*"]&&(h=cA(a,c,d,e,"*",g)),h}function cB(a,c){var d,e,f=p.ajaxSettings.flatOptions||{};for(d in c)c[d]!==b&&((f[d]?a:e||(e={}))[d]=c[d]);e&&p.extend(!0,a,e)}function cC(a,c,d){var e,f,g,h,i=a.contents,j=a.dataTypes,k=a.responseFields;for(f in k)f in d&&(c[k[f]]=d[f]);while(j[0]==="*")j.shift(),e===b&&(e=a.mimeType||c.getResponseHeader("content-type"));if(e)for(f in i)if(i[f]&&i[f].test(e)){j.unshift(f);break}if(j[0]in d)g=j[0];else{for(f in d){if(!j[0]||a.converters[f+" "+j[0]]){g=f;break}h||(h=f)}g=g||h}if(g)return g!==j[0]&&j.unshift(g),d[g]}function cD(a,b){var c,d,e,f,g=a.dataTypes.slice(),h=g[0],i={},j=0;a.dataFilter&&(b=a.dataFilter(b,a.dataType));if(g[1])for(c in a.converters)i[c.toLowerCase()]=a.converters[c];for(;e=g[++j];)if(e!=="*"){if(h!=="*"&&h!==e){c=i[h+" "+e]||i["* "+e];if(!c)for(d in i){f=d.split(" ");if(f[1]===e){c=i[h+" "+f[0]]||i["* "+f[0]];if(c){c===!0?c=i[d]:i[d]!==!0&&(e=f[0],g.splice(j--,0,e));break}}}if(c!==!0)if(c&&a["throws"])b=c(b);else try{b=c(b)}catch(k){return{state:"parsererror",error:c?k:"No conversion from "+h+" to "+e}}}h=e}return{state:"success",data:b}}function cL(){try{return new a.XMLHttpRequest}catch(b){}}function cM(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}function cU(){return setTimeout(function(){cN=b},0),cN=p.now()}function cV(a,b){p.each(b,function(b,c){var d=(cT[b]||[]).concat(cT["*"]),e=0,f=d.length;for(;e<f;e++)if(d[e].call(a,b,c))return})}function cW(a,b,c){var d,e=0,f=0,g=cS.length,h=p.Deferred().always(function(){delete i.elem}),i=function(){var b=cN||cU(),c=Math.max(0,j.startTime+j.duration-b),d=1-(c/j.duration||0),e=0,f=j.tweens.length;for(;e<f;e++)j.tweens[e].run(d);return h.notifyWith(a,[j,d,c]),d<1&&f?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:p.extend({},b),opts:p.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:cN||cU(),duration:c.duration,tweens:[],createTween:function(b,c,d){var e=p.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(e),e},stop:function(b){var c=0,d=b?j.tweens.length:0;for(;c<d;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;cX(k,j.opts.specialEasing);for(;e<g;e++){d=cS[e].call(j,a,k,j.opts);if(d)return d}return cV(j,k),p.isFunction(j.opts.start)&&j.opts.start.call(a,j),p.fx.timer(p.extend(i,{anim:j,queue:j.opts.queue,elem:a})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}function cX(a,b){var c,d,e,f,g;for(c in a){d=p.camelCase(c),e=b[d],f=a[c],p.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=p.cssHooks[d];if(g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}}function cY(a,b,c){var d,e,f,g,h,i,j,k,l=this,m=a.style,n={},o=[],q=a.nodeType&&bZ(a);c.queue||(j=p._queueHooks(a,"fx"),j.unqueued==null&&(j.unqueued=0,k=j.empty.fire,j.empty.fire=function(){j.unqueued||k()}),j.unqueued++,l.always(function(){l.always(function(){j.unqueued--,p.queue(a,"fx").length||j.empty.fire()})})),a.nodeType===1&&("height"in b||"width"in b)&&(c.overflow=[m.overflow,m.overflowX,m.overflowY],p.css(a,"display")==="inline"&&p.css(a,"float")==="none"&&(!p.support.inlineBlockNeedsLayout||cc(a.nodeName)==="inline"?m.display="inline-block":m.zoom=1)),c.overflow&&(m.overflow="hidden",p.support.shrinkWrapBlocks||l.done(function(){m.overflow=c.overflow[0],m.overflowX=c.overflow[1],m.overflowY=c.overflow[2]}));for(d in b){f=b[d];if(cP.exec(f)){delete b[d];if(f===(q?"hide":"show"))continue;o.push(d)}}g=o.length;if(g){h=p._data(a,"fxshow")||p._data(a,"fxshow",{}),q?p(a).show():l.done(function(){p(a).hide()}),l.done(function(){var b;p.removeData(a,"fxshow",!0);for(b in n)p.style(a,b,n[b])});for(d=0;d<g;d++)e=o[d],i=l.createTween(e,q?h[e]:0),n[e]=h[e]||p.style(a,e),e in h||(h[e]=i.start,q&&(i.end=i.start,i.start=e==="width"||e==="height"?1:0))}}function cZ(a,b,c,d,e){return new cZ.prototype.init(a,b,c,d,e)}function c$(a,b){var c,d={height:a},e=0;b=b?1:0;for(;e<4;e+=2-b)c=bV[e],d["margin"+c]=d["padding"+c]=a;return b&&(d.opacity=d.width=a),d}function da(a){return p.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:!1}var c,d,e=a.document,f=a.location,g=a.navigator,h=a.jQuery,i=a.$,j=Array.prototype.push,k=Array.prototype.slice,l=Array.prototype.indexOf,m=Object.prototype.toString,n=Object.prototype.hasOwnProperty,o=String.prototype.trim,p=function(a,b){return new p.fn.init(a,b,c)},q=/[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,r=/\S/,s=/\s+/,t=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,u=/^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,v=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,w=/^[\],:{}\s]*$/,x=/(?:^|:|,)(?:\s*\[)+/g,y=/\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,z=/"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,A=/^-ms-/,B=/-([\da-z])/gi,C=function(a,b){return(b+"").toUpperCase()},D=function(){e.addEventListener?(e.removeEventListener("DOMContentLoaded",D,!1),p.ready()):e.readyState==="complete"&&(e.detachEvent("onreadystatechange",D),p.ready())},E={};p.fn=p.prototype={constructor:p,init:function(a,c,d){var f,g,h,i;if(!a)return this;if(a.nodeType)return this.context=this[0]=a,this.length=1,this;if(typeof a=="string"){a.charAt(0)==="<"&&a.charAt(a.length-1)===">"&&a.length>=3?f=[null,a,null]:f=u.exec(a);if(f&&(f[1]||!c)){if(f[1])return c=c instanceof p?c[0]:c,i=c&&c.nodeType?c.ownerDocument||c:e,a=p.parseHTML(f[1],i,!0),v.test(f[1])&&p.isPlainObject(c)&&this.attr.call(a,c,!0),p.merge(this,a);g=e.getElementById(f[2]);if(g&&g.parentNode){if(g.id!==f[2])return d.find(a);this.length=1,this[0]=g}return this.context=e,this.selector=a,this}return!c||c.jquery?(c||d).find(a):this.constructor(c).find(a)}return p.isFunction(a)?d.ready(a):(a.selector!==b&&(this.selector=a.selector,this.context=a.context),p.makeArray(a,this))},selector:"",jquery:"1.8.2",length:0,size:function(){return this.length},toArray:function(){return k.call(this)},get:function(a){return a==null?this.toArray():a<0?this[this.length+a]:this[a]},pushStack:function(a,b,c){var d=p.merge(this.constructor(),a);return d.prevObject=this,d.context=this.context,b==="find"?d.selector=this.selector+(this.selector?" ":"")+c:b&&(d.selector=this.selector+"."+b+"("+c+")"),d},each:function(a,b){return p.each(this,a,b)},ready:function(a){return p.ready.promise().done(a),this},eq:function(a){return a=+a,a===-1?this.slice(a):this.slice(a,a+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(k.apply(this,arguments),"slice",k.call(arguments).join(","))},map:function(a){return this.pushStack(p.map(this,function(b,c){return a.call(b,c,b)}))},end:function(){return this.prevObject||this.constructor(null)},push:j,sort:[].sort,splice:[].splice},p.fn.init.prototype=p.fn,p.extend=p.fn.extend=function(){var a,c,d,e,f,g,h=arguments[0]||{},i=1,j=arguments.length,k=!1;typeof h=="boolean"&&(k=h,h=arguments[1]||{},i=2),typeof h!="object"&&!p.isFunction(h)&&(h={}),j===i&&(h=this,--i);for(;i<j;i++)if((a=arguments[i])!=null)for(c in a){d=h[c],e=a[c];if(h===e)continue;k&&e&&(p.isPlainObject(e)||(f=p.isArray(e)))?(f?(f=!1,g=d&&p.isArray(d)?d:[]):g=d&&p.isPlainObject(d)?d:{},h[c]=p.extend(k,g,e)):e!==b&&(h[c]=e)}return h},p.extend({noConflict:function(b){return a.$===p&&(a.$=i),b&&a.jQuery===p&&(a.jQuery=h),p},isReady:!1,readyWait:1,holdReady:function(a){a?p.readyWait++:p.ready(!0)},ready:function(a){if(a===!0?--p.readyWait:p.isReady)return;if(!e.body)return setTimeout(p.ready,1);p.isReady=!0;if(a!==!0&&--p.readyWait>0)return;d.resolveWith(e,[p]),p.fn.trigger&&p(e).trigger("ready").off("ready")},isFunction:function(a){return p.type(a)==="function"},isArray:Array.isArray||function(a){return p.type(a)==="array"},isWindow:function(a){return a!=null&&a==a.window},isNumeric:function(a){return!isNaN(parseFloat(a))&&isFinite(a)},type:function(a){return a==null?String(a):E[m.call(a)]||"object"},isPlainObject:function(a){if(!a||p.type(a)!=="object"||a.nodeType||p.isWindow(a))return!1;try{if(a.constructor&&!n.call(a,"constructor")&&!n.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}var d;for(d in a);return d===b||n.call(a,d)},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},error:function(a){throw new Error(a)},parseHTML:function(a,b,c){var d;return!a||typeof a!="string"?null:(typeof b=="boolean"&&(c=b,b=0),b=b||e,(d=v.exec(a))?[b.createElement(d[1])]:(d=p.buildFragment([a],b,c?null:[]),p.merge([],(d.cacheable?p.clone(d.fragment):d.fragment).childNodes)))},parseJSON:function(b){if(!b||typeof b!="string")return null;b=p.trim(b);if(a.JSON&&a.JSON.parse)return a.JSON.parse(b);if(w.test(b.replace(y,"@").replace(z,"]").replace(x,"")))return(new Function("return "+b))();p.error("Invalid JSON: "+b)},parseXML:function(c){var d,e;if(!c||typeof c!="string")return null;try{a.DOMParser?(e=new DOMParser,d=e.parseFromString(c,"text/xml")):(d=new ActiveXObject("Microsoft.XMLDOM"),d.async="false",d.loadXML(c))}catch(f){d=b}return(!d||!d.documentElement||d.getElementsByTagName("parsererror").length)&&p.error("Invalid XML: "+c),d},noop:function(){},globalEval:function(b){b&&r.test(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(A,"ms-").replace(B,C)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,c,d){var e,f=0,g=a.length,h=g===b||p.isFunction(a);if(d){if(h){for(e in a)if(c.apply(a[e],d)===!1)break}else for(;f<g;)if(c.apply(a[f++],d)===!1)break}else if(h){for(e in a)if(c.call(a[e],e,a[e])===!1)break}else for(;f<g;)if(c.call(a[f],f,a[f++])===!1)break;return a},trim:o&&!o.call("﻿ ")?function(a){return a==null?"":o.call(a)}:function(a){return a==null?"":(a+"").replace(t,"")},makeArray:function(a,b){var c,d=b||[];return a!=null&&(c=p.type(a),a.length==null||c==="string"||c==="function"||c==="regexp"||p.isWindow(a)?j.call(d,a):p.merge(d,a)),d},inArray:function(a,b,c){var d;if(b){if(l)return l.call(b,a,c);d=b.length,c=c?c<0?Math.max(0,d+c):c:0;for(;c<d;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,c){var d=c.length,e=a.length,f=0;if(typeof d=="number")for(;f<d;f++)a[e++]=c[f];else while(c[f]!==b)a[e++]=c[f++];return a.length=e,a},grep:function(a,b,c){var d,e=[],f=0,g=a.length;c=!!c;for(;f<g;f++)d=!!b(a[f],f),c!==d&&e.push(a[f]);return e},map:function(a,c,d){var e,f,g=[],h=0,i=a.length,j=a instanceof p||i!==b&&typeof i=="number"&&(i>0&&a[0]&&a[i-1]||i===0||p.isArray(a));if(j)for(;h<i;h++)e=c(a[h],h,d),e!=null&&(g[g.length]=e);else for(f in a)e=c(a[f],f,d),e!=null&&(g[g.length]=e);return g.concat.apply([],g)},guid:1,proxy:function(a,c){var d,e,f;return typeof c=="string"&&(d=a[c],c=a,a=d),p.isFunction(a)?(e=k.call(arguments,2),f=function(){return a.apply(c,e.concat(k.call(arguments)))},f.guid=a.guid=a.guid||p.guid++,f):b},access:function(a,c,d,e,f,g,h){var i,j=d==null,k=0,l=a.length;if(d&&typeof d=="object"){for(k in d)p.access(a,c,k,d[k],1,g,e);f=1}else if(e!==b){i=h===b&&p.isFunction(e),j&&(i?(i=c,c=function(a,b,c){return i.call(p(a),c)}):(c.call(a,e),c=null));if(c)for(;k<l;k++)c(a[k],d,i?e.call(a[k],k,c(a[k],d)):e,h);f=1}return f?a:j?c.call(a):l?c(a[0],d):g},now:function(){return(new Date).getTime()}}),p.ready.promise=function(b){if(!d){d=p.Deferred();if(e.readyState==="complete")setTimeout(p.ready,1);else if(e.addEventListener)e.addEventListener("DOMContentLoaded",D,!1),a.addEventListener("load",p.ready,!1);else{e.attachEvent("onreadystatechange",D),a.attachEvent("onload",p.ready);var c=!1;try{c=a.frameElement==null&&e.documentElement}catch(f){}c&&c.doScroll&&function g(){if(!p.isReady){try{c.doScroll("left")}catch(a){return setTimeout(g,50)}p.ready()}}()}}return d.promise(b)},p.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(a,b){E["[object "+b+"]"]=b.toLowerCase()}),c=p(e);var F={};p.Callbacks=function(a){a=typeof a=="string"?F[a]||G(a):p.extend({},a);var c,d,e,f,g,h,i=[],j=!a.once&&[],k=function(b){c=a.memory&&b,d=!0,h=f||0,f=0,g=i.length,e=!0;for(;i&&h<g;h++)if(i[h].apply(b[0],b[1])===!1&&a.stopOnFalse){c=!1;break}e=!1,i&&(j?j.length&&k(j.shift()):c?i=[]:l.disable())},l={add:function(){if(i){var b=i.length;(function d(b){p.each(b,function(b,c){var e=p.type(c);e==="function"&&(!a.unique||!l.has(c))?i.push(c):c&&c.length&&e!=="string"&&d(c)})})(arguments),e?g=i.length:c&&(f=b,k(c))}return this},remove:function(){return i&&p.each(arguments,function(a,b){var c;while((c=p.inArray(b,i,c))>-1)i.splice(c,1),e&&(c<=g&&g--,c<=h&&h--)}),this},has:function(a){return p.inArray(a,i)>-1},empty:function(){return i=[],this},disable:function(){return i=j=c=b,this},disabled:function(){return!i},lock:function(){return j=b,c||l.disable(),this},locked:function(){return!j},fireWith:function(a,b){return b=b||[],b=[a,b.slice?b.slice():b],i&&(!d||j)&&(e?j.push(b):k(b)),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!d}};return l},p.extend({Deferred:function(a){var b=[["resolve","done",p.Callbacks("once memory"),"resolved"],["reject","fail",p.Callbacks("once memory"),"rejected"],["notify","progress",p.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return p.Deferred(function(c){p.each(b,function(b,d){var f=d[0],g=a[b];e[d[1]](p.isFunction(g)?function(){var a=g.apply(this,arguments);a&&p.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f+"With"](this===e?c:this,[a])}:c[f])}),a=null}).promise()},promise:function(a){return a!=null?p.extend(a,d):d}},e={};return d.pipe=d.then,p.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[a^1][2].disable,b[2][2].lock),e[f[0]]=g.fire,e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=k.call(arguments),d=c.length,e=d!==1||a&&p.isFunction(a.promise)?d:0,f=e===1?a:p.Deferred(),g=function(a,b,c){return function(d){b[a]=this,c[a]=arguments.length>1?k.call(arguments):d,c===h?f.notifyWith(b,c):--e||f.resolveWith(b,c)}},h,i,j;if(d>1){h=new Array(d),i=new Array(d),j=new Array(d);for(;b<d;b++)c[b]&&p.isFunction(c[b].promise)?c[b].promise().done(g(b,j,c)).fail(f.reject).progress(g(b,i,h)):--e}return e||f.resolveWith(j,c),f.promise()}}),p.support=function(){var b,c,d,f,g,h,i,j,k,l,m,n=e.createElement("div");n.setAttribute("className","t"),n.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",c=n.getElementsByTagName("*"),d=n.getElementsByTagName("a")[0],d.style.cssText="top:1px;float:left;opacity:.5";if(!c||!c.length)return{};f=e.createElement("select"),g=f.appendChild(e.createElement("option")),h=n.getElementsByTagName("input")[0],b={leadingWhitespace:n.firstChild.nodeType===3,tbody:!n.getElementsByTagName("tbody").length,htmlSerialize:!!n.getElementsByTagName("link").length,style:/top/.test(d.getAttribute("style")),hrefNormalized:d.getAttribute("href")==="/a",opacity:/^0.5/.test(d.style.opacity),cssFloat:!!d.style.cssFloat,checkOn:h.value==="on",optSelected:g.selected,getSetAttribute:n.className!=="t",enctype:!!e.createElement("form").enctype,html5Clone:e.createElement("nav").cloneNode(!0).outerHTML!=="<:nav></:nav>",boxModel:e.compatMode==="CSS1Compat",submitBubbles:!0,changeBubbles:!0,focusinBubbles:!1,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0,boxSizingReliable:!0,pixelPosition:!1},h.checked=!0,b.noCloneChecked=h.cloneNode(!0).checked,f.disabled=!0,b.optDisabled=!g.disabled;try{delete n.test}catch(o){b.deleteExpando=!1}!n.addEventListener&&n.attachEvent&&n.fireEvent&&(n.attachEvent("onclick",m=function(){b.noCloneEvent=!1}),n.cloneNode(!0).fireEvent("onclick"),n.detachEvent("onclick",m)),h=e.createElement("input"),h.value="t",h.setAttribute("type","radio"),b.radioValue=h.value==="t",h.setAttribute("checked","checked"),h.setAttribute("name","t"),n.appendChild(h),i=e.createDocumentFragment(),i.appendChild(n.lastChild),b.checkClone=i.cloneNode(!0).cloneNode(!0).lastChild.checked,b.appendChecked=h.checked,i.removeChild(h),i.appendChild(n);if(n.attachEvent)for(k in{submit:!0,change:!0,focusin:!0})j="on"+k,l=j in n,l||(n.setAttribute(j,"return;"),l=typeof n[j]=="function"),b[k+"Bubbles"]=l;return p(function(){var c,d,f,g,h="padding:0;margin:0;border:0;display:block;overflow:hidden;",i=e.getElementsByTagName("body")[0];if(!i)return;c=e.createElement("div"),c.style.cssText="visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px",i.insertBefore(c,i.firstChild),d=e.createElement("div"),c.appendChild(d),d.innerHTML="<table><tr><td></td><td>t</td></tr></table>",f=d.getElementsByTagName("td"),f[0].style.cssText="padding:0;margin:0;border:0;display:none",l=f[0].offsetHeight===0,f[0].style.display="",f[1].style.display="none",b.reliableHiddenOffsets=l&&f[0].offsetHeight===0,d.innerHTML="",d.style.cssText="box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;",b.boxSizing=d.offsetWidth===4,b.doesNotIncludeMarginInBodyOffset=i.offsetTop!==1,a.getComputedStyle&&(b.pixelPosition=(a.getComputedStyle(d,null)||{}).top!=="1%",b.boxSizingReliable=(a.getComputedStyle(d,null)||{width:"4px"}).width==="4px",g=e.createElement("div"),g.style.cssText=d.style.cssText=h,g.style.marginRight=g.style.width="0",d.style.width="1px",d.appendChild(g),b.reliableMarginRight=!parseFloat((a.getComputedStyle(g,null)||{}).marginRight)),typeof d.style.zoom!="undefined"&&(d.innerHTML="",d.style.cssText=h+"width:1px;padding:1px;display:inline;zoom:1",b.inlineBlockNeedsLayout=d.offsetWidth===3,d.style.display="block",d.style.overflow="visible",d.innerHTML="<div></div>",d.firstChild.style.width="5px",b.shrinkWrapBlocks=d.offsetWidth!==3,c.style.zoom=1),i.removeChild(c),c=d=f=g=null}),i.removeChild(n),c=d=f=g=h=i=n=null,b}();var H=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,I=/([A-Z])/g;p.extend({cache:{},deletedIds:[],uuid:0,expando:"jQuery"+(p.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(a){return a=a.nodeType?p.cache[a[p.expando]]:a[p.expando],!!a&&!K(a)},data:function(a,c,d,e){if(!p.acceptData(a))return;var f,g,h=p.expando,i=typeof c=="string",j=a.nodeType,k=j?p.cache:a,l=j?a[h]:a[h]&&h;if((!l||!k[l]||!e&&!k[l].data)&&i&&d===b)return;l||(j?a[h]=l=p.deletedIds.pop()||p.guid++:l=h),k[l]||(k[l]={},j||(k[l].toJSON=p.noop));if(typeof c=="object"||typeof c=="function")e?k[l]=p.extend(k[l],c):k[l].data=p.extend(k[l].data,c);return f=k[l],e||(f.data||(f.data={}),f=f.data),d!==b&&(f[p.camelCase(c)]=d),i?(g=f[c],g==null&&(g=f[p.camelCase(c)])):g=f,g},removeData:function(a,b,c){if(!p.acceptData(a))return;var d,e,f,g=a.nodeType,h=g?p.cache:a,i=g?a[p.expando]:p.expando;if(!h[i])return;if(b){d=c?h[i]:h[i].data;if(d){p.isArray(b)||(b in d?b=[b]:(b=p.camelCase(b),b in d?b=[b]:b=b.split(" ")));for(e=0,f=b.length;e<f;e++)delete d[b[e]];if(!(c?K:p.isEmptyObject)(d))return}}if(!c){delete h[i].data;if(!K(h[i]))return}g?p.cleanData([a],!0):p.support.deleteExpando||h!=h.window?delete h[i]:h[i]=null},_data:function(a,b,c){return p.data(a,b,c,!0)},acceptData:function(a){var b=a.nodeName&&p.noData[a.nodeName.toLowerCase()];return!b||b!==!0&&a.getAttribute("classid")===b}}),p.fn.extend({data:function(a,c){var d,e,f,g,h,i=this[0],j=0,k=null;if(a===b){if(this.length){k=p.data(i);if(i.nodeType===1&&!p._data(i,"parsedAttrs")){f=i.attributes;for(h=f.length;j<h;j++)g=f[j].name,g.indexOf("data-")||(g=p.camelCase(g.substring(5)),J(i,g,k[g]));p._data(i,"parsedAttrs",!0)}}return k}return typeof a=="object"?this.each(function(){p.data(this,a)}):(d=a.split(".",2),d[1]=d[1]?"."+d[1]:"",e=d[1]+"!",p.access(this,function(c){if(c===b)return k=this.triggerHandler("getData"+e,[d[0]]),k===b&&i&&(k=p.data(i,a),k=J(i,a,k)),k===b&&d[1]?this.data(d[0]):k;d[1]=c,this.each(function(){var b=p(this);b.triggerHandler("setData"+e,d),p.data(this,a,c),b.triggerHandler("changeData"+e,d)})},null,c,arguments.length>1,null,!1))},removeData:function(a){return this.each(function(){p.removeData(this,a)})}}),p.extend({queue:function(a,b,c){var d;if(a)return b=(b||"fx")+"queue",d=p._data(a,b),c&&(!d||p.isArray(c)?d=p._data(a,b,p.makeArray(c)):d.push(c)),d||[]},dequeue:function(a,b){b=b||"fx";var c=p.queue(a,b),d=c.length,e=c.shift(),f=p._queueHooks(a,b),g=function(){p.dequeue(a,b)};e==="inprogress"&&(e=c.shift(),d--),e&&(b==="fx"&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return p._data(a,c)||p._data(a,c,{empty:p.Callbacks("once memory").add(function(){p.removeData(a,b+"queue",!0),p.removeData(a,c,!0)})})}}),p.fn.extend({queue:function(a,c){var d=2;return typeof a!="string"&&(c=a,a="fx",d--),arguments.length<d?p.queue(this[0],a):c===b?this:this.each(function(){var b=p.queue(this,a,c);p._queueHooks(this,a),a==="fx"&&b[0]!=="inprogress"&&p.dequeue(this,a)})},dequeue:function(a){return this.each(function(){p.dequeue(this,a)})},delay:function(a,b){return a=p.fx?p.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,c){var d,e=1,f=p.Deferred(),g=this,h=this.length,i=function(){--e||f.resolveWith(g,[g])};typeof a!="string"&&(c=a,a=b),a=a||"fx";while(h--)d=p._data(g[h],a+"queueHooks"),d&&d.empty&&(e++,d.empty.add(i));return i(),f.promise(c)}});var L,M,N,O=/[\t\r\n]/g,P=/\r/g,Q=/^(?:button|input)$/i,R=/^(?:button|input|object|select|textarea)$/i,S=/^a(?:rea|)$/i,T=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,U=p.support.getSetAttribute;p.fn.extend({attr:function(a,b){return p.access(this,p.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){p.removeAttr(this,a)})},prop:function(a,b){return p.access(this,p.prop,a,b,arguments.length>1)},removeProp:function(a){return a=p.propFix[a]||a,this.each(function(){try{this[a]=b,delete this[a]}catch(c){}})},addClass:function(a){var b,c,d,e,f,g,h;if(p.isFunction(a))return this.each(function(b){p(this).addClass(a.call(this,b,this.className))});if(a&&typeof a=="string"){b=a.split(s);for(c=0,d=this.length;c<d;c++){e=this[c];if(e.nodeType===1)if(!e.className&&b.length===1)e.className=a;else{f=" "+e.className+" ";for(g=0,h=b.length;g<h;g++)f.indexOf(" "+b[g]+" ")<0&&(f+=b[g]+" ");e.className=p.trim(f)}}}return this},removeClass:function(a){var c,d,e,f,g,h,i;if(p.isFunction(a))return this.each(function(b){p(this).removeClass(a.call(this,b,this.className))});if(a&&typeof a=="string"||a===b){c=(a||"").split(s);for(h=0,i=this.length;h<i;h++){e=this[h];if(e.nodeType===1&&e.className){d=(" "+e.className+" ").replace(O," ");for(f=0,g=c.length;f<g;f++)while(d.indexOf(" "+c[f]+" ")>=0)d=d.replace(" "+c[f]+" "," ");e.className=a?p.trim(d):""}}}return this},toggleClass:function(a,b){var c=typeof a,d=typeof b=="boolean";return p.isFunction(a)?this.each(function(c){p(this).toggleClass(a.call(this,c,this.className,b),b)}):this.each(function(){if(c==="string"){var e,f=0,g=p(this),h=b,i=a.split(s);while(e=i[f++])h=d?h:!g.hasClass(e),g[h?"addClass":"removeClass"](e)}else if(c==="undefined"||c==="boolean")this.className&&p._data(this,"__className__",this.className),this.className=this.className||a===!1?"":p._data(this,"__className__")||""})},hasClass:function(a){var b=" "+a+" ",c=0,d=this.length;for(;c<d;c++)if(this[c].nodeType===1&&(" "+this[c].className+" ").replace(O," ").indexOf(b)>=0)return!0;return!1},val:function(a){var c,d,e,f=this[0];if(!arguments.length){if(f)return c=p.valHooks[f.type]||p.valHooks[f.nodeName.toLowerCase()],c&&"get"in c&&(d=c.get(f,"value"))!==b?d:(d=f.value,typeof d=="string"?d.replace(P,""):d==null?"":d);return}return e=p.isFunction(a),this.each(function(d){var f,g=p(this);if(this.nodeType!==1)return;e?f=a.call(this,d,g.val()):f=a,f==null?f="":typeof f=="number"?f+="":p.isArray(f)&&(f=p.map(f,function(a){return a==null?"":a+""})),c=p.valHooks[this.type]||p.valHooks[this.nodeName.toLowerCase()];if(!c||!("set"in c)||c.set(this,f,"value")===b)this.value=f})}}),p.extend({valHooks:{option:{get:function(a){var b=a.attributes.value;return!b||b.specified?a.value:a.text}},select:{get:function(a){var b,c,d,e,f=a.selectedIndex,g=[],h=a.options,i=a.type==="select-one";if(f<0)return null;c=i?f:0,d=i?f+1:h.length;for(;c<d;c++){e=h[c];if(e.selected&&(p.support.optDisabled?!e.disabled:e.getAttribute("disabled")===null)&&(!e.parentNode.disabled||!p.nodeName(e.parentNode,"optgroup"))){b=p(e).val();if(i)return b;g.push(b)}}return i&&!g.length&&h.length?p(h[f]).val():g},set:function(a,b){var c=p.makeArray(b);return p(a).find("option").each(function(){this.selected=p.inArray(p(this).val(),c)>=0}),c.length||(a.selectedIndex=-1),c}}},attrFn:{},attr:function(a,c,d,e){var f,g,h,i=a.nodeType;if(!a||i===3||i===8||i===2)return;if(e&&p.isFunction(p.fn[c]))return p(a)[c](d);if(typeof a.getAttribute=="undefined")return p.prop(a,c,d);h=i!==1||!p.isXMLDoc(a),h&&(c=c.toLowerCase(),g=p.attrHooks[c]||(T.test(c)?M:L));if(d!==b){if(d===null){p.removeAttr(a,c);return}return g&&"set"in g&&h&&(f=g.set(a,d,c))!==b?f:(a.setAttribute(c,d+""),d)}return g&&"get"in g&&h&&(f=g.get(a,c))!==null?f:(f=a.getAttribute(c),f===null?b:f)},removeAttr:function(a,b){var c,d,e,f,g=0;if(b&&a.nodeType===1){d=b.split(s);for(;g<d.length;g++)e=d[g],e&&(c=p.propFix[e]||e,f=T.test(e),f||p.attr(a,e,""),a.removeAttribute(U?e:c),f&&c in a&&(a[c]=!1))}},attrHooks:{type:{set:function(a,b){if(Q.test(a.nodeName)&&a.parentNode)p.error("type property can't be changed");else if(!p.support.radioValue&&b==="radio"&&p.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}},value:{get:function(a,b){return L&&p.nodeName(a,"button")?L.get(a,b):b in a?a.value:null},set:function(a,b,c){if(L&&p.nodeName(a,"button"))return L.set(a,b,c);a.value=b}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(a,c,d){var e,f,g,h=a.nodeType;if(!a||h===3||h===8||h===2)return;return g=h!==1||!p.isXMLDoc(a),g&&(c=p.propFix[c]||c,f=p.propHooks[c]),d!==b?f&&"set"in f&&(e=f.set(a,d,c))!==b?e:a[c]=d:f&&"get"in f&&(e=f.get(a,c))!==null?e:a[c]},propHooks:{tabIndex:{get:function(a){var c=a.getAttributeNode("tabindex");return c&&c.specified?parseInt(c.value,10):R.test(a.nodeName)||S.test(a.nodeName)&&a.href?0:b}}}}),M={get:function(a,c){var d,e=p.prop(a,c);return e===!0||typeof e!="boolean"&&(d=a.getAttributeNode(c))&&d.nodeValue!==!1?c.toLowerCase():b},set:function(a,b,c){var d;return b===!1?p.removeAttr(a,c):(d=p.propFix[c]||c,d in a&&(a[d]=!0),a.setAttribute(c,c.toLowerCase())),c}},U||(N={name:!0,id:!0,coords:!0},L=p.valHooks.button={get:function(a,c){var d;return d=a.getAttributeNode(c),d&&(N[c]?d.value!=="":d.specified)?d.value:b},set:function(a,b,c){var d=a.getAttributeNode(c);return d||(d=e.createAttribute(c),a.setAttributeNode(d)),d.value=b+""}},p.each(["width","height"],function(a,b){p.attrHooks[b]=p.extend(p.attrHooks[b],{set:function(a,c){if(c==="")return a.setAttribute(b,"auto"),c}})}),p.attrHooks.contenteditable={get:L.get,set:function(a,b,c){b===""&&(b="false"),L.set(a,b,c)}}),p.support.hrefNormalized||p.each(["href","src","width","height"],function(a,c){p.attrHooks[c]=p.extend(p.attrHooks[c],{get:function(a){var d=a.getAttribute(c,2);return d===null?b:d}})}),p.support.style||(p.attrHooks.style={get:function(a){return a.style.cssText.toLowerCase()||b},set:function(a,b){return a.style.cssText=b+""}}),p.support.optSelected||(p.propHooks.selected=p.extend(p.propHooks.selected,{get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null}})),p.support.enctype||(p.propFix.enctype="encoding"),p.support.checkOn||p.each(["radio","checkbox"],function(){p.valHooks[this]={get:function(a){return a.getAttribute("value")===null?"on":a.value}}}),p.each(["radio","checkbox"],function(){p.valHooks[this]=p.extend(p.valHooks[this],{set:function(a,b){if(p.isArray(b))return a.checked=p.inArray(p(a).val(),b)>=0}})});var V=/^(?:textarea|input|select)$/i,W=/^([^\.]*|)(?:\.(.+)|)$/,X=/(?:^|\s)hover(\.\S+|)\b/,Y=/^key/,Z=/^(?:mouse|contextmenu)|click/,$=/^(?:focusinfocus|focusoutblur)$/,_=function(a){return p.event.special.hover?a:a.replace(X,"mouseenter$1 mouseleave$1")};p.event={add:function(a,c,d,e,f){var g,h,i,j,k,l,m,n,o,q,r;if(a.nodeType===3||a.nodeType===8||!c||!d||!(g=p._data(a)))return;d.handler&&(o=d,d=o.handler,f=o.selector),d.guid||(d.guid=p.guid++),i=g.events,i||(g.events=i={}),h=g.handle,h||(g.handle=h=function(a){return typeof p!="undefined"&&(!a||p.event.triggered!==a.type)?p.event.dispatch.apply(h.elem,arguments):b},h.elem=a),c=p.trim(_(c)).split(" ");for(j=0;j<c.length;j++){k=W.exec(c[j])||[],l=k[1],m=(k[2]||"").split(".").sort(),r=p.event.special[l]||{},l=(f?r.delegateType:r.bindType)||l,r=p.event.special[l]||{},n=p.extend({type:l,origType:k[1],data:e,handler:d,guid:d.guid,selector:f,needsContext:f&&p.expr.match.needsContext.test(f),namespace:m.join(".")},o),q=i[l];if(!q){q=i[l]=[],q.delegateCount=0;if(!r.setup||r.setup.call(a,e,m,h)===!1)a.addEventListener?a.addEventListener(l,h,!1):a.attachEvent&&a.attachEvent("on"+l,h)}r.add&&(r.add.call(a,n),n.handler.guid||(n.handler.guid=d.guid)),f?q.splice(q.delegateCount++,0,n):q.push(n),p.event.global[l]=!0}a=null},global:{},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,q,r=p.hasData(a)&&p._data(a);if(!r||!(m=r.events))return;b=p.trim(_(b||"")).split(" ");for(f=0;f<b.length;f++){g=W.exec(b[f])||[],h=i=g[1],j=g[2];if(!h){for(h in m)p.event.remove(a,h+b[f],c,d,!0);continue}n=p.event.special[h]||{},h=(d?n.delegateType:n.bindType)||h,o=m[h]||[],k=o.length,j=j?new RegExp("(^|\\.)"+j.split(".").sort().join("\\.(?:.*\\.|)")+"(\\.|$)"):null;for(l=0;l<o.length;l++)q=o[l],(e||i===q.origType)&&(!c||c.guid===q.guid)&&(!j||j.test(q.namespace))&&(!d||d===q.selector||d==="**"&&q.selector)&&(o.splice(l--,1),q.selector&&o.delegateCount--,n.remove&&n.remove.call(a,q));o.length===0&&k!==o.length&&((!n.teardown||n.teardown.call(a,j,r.handle)===!1)&&p.removeEvent(a,h,r.handle),delete m[h])}p.isEmptyObject(m)&&(delete r.handle,p.removeData(a,"events",!0))},customEvent:{getData:!0,setData:!0,changeData:!0},trigger:function(c,d,f,g){if(!f||f.nodeType!==3&&f.nodeType!==8){var h,i,j,k,l,m,n,o,q,r,s=c.type||c,t=[];if($.test(s+p.event.triggered))return;s.indexOf("!")>=0&&(s=s.slice(0,-1),i=!0),s.indexOf(".")>=0&&(t=s.split("."),s=t.shift(),t.sort());if((!f||p.event.customEvent[s])&&!p.event.global[s])return;c=typeof c=="object"?c[p.expando]?c:new p.Event(s,c):new p.Event(s),c.type=s,c.isTrigger=!0,c.exclusive=i,c.namespace=t.join("."),c.namespace_re=c.namespace?new RegExp("(^|\\.)"+t.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,m=s.indexOf(":")<0?"on"+s:"";if(!f){h=p.cache;for(j in h)h[j].events&&h[j].events[s]&&p.event.trigger(c,d,h[j].handle.elem,!0);return}c.result=b,c.target||(c.target=f),d=d!=null?p.makeArray(d):[],d.unshift(c),n=p.event.special[s]||{};if(n.trigger&&n.trigger.apply(f,d)===!1)return;q=[[f,n.bindType||s]];if(!g&&!n.noBubble&&!p.isWindow(f)){r=n.delegateType||s,k=$.test(r+s)?f:f.parentNode;for(l=f;k;k=k.parentNode)q.push([k,r]),l=k;l===(f.ownerDocument||e)&&q.push([l.defaultView||l.parentWindow||a,r])}for(j=0;j<q.length&&!c.isPropagationStopped();j++)k=q[j][0],c.type=q[j][1],o=(p._data(k,"events")||{})[c.type]&&p._data(k,"handle"),o&&o.apply(k,d),o=m&&k[m],o&&p.acceptData(k)&&o.apply&&o.apply(k,d)===!1&&c.preventDefault();return c.type=s,!g&&!c.isDefaultPrevented()&&(!n._default||n._default.apply(f.ownerDocument,d)===!1)&&(s!=="click"||!p.nodeName(f,"a"))&&p.acceptData(f)&&m&&f[s]&&(s!=="focus"&&s!=="blur"||c.target.offsetWidth!==0)&&!p.isWindow(f)&&(l=f[m],l&&(f[m]=null),p.event.triggered=s,f[s](),p.event.triggered=b,l&&(f[m]=l)),c.result}return},dispatch:function(c){c=p.event.fix(c||a.event);var d,e,f,g,h,i,j,l,m,n,o=(p._data(this,"events")||{})[c.type]||[],q=o.delegateCount,r=k.call(arguments),s=!c.exclusive&&!c.namespace,t=p.event.special[c.type]||{},u=[];r[0]=c,c.delegateTarget=this;if(t.preDispatch&&t.preDispatch.call(this,c)===!1)return;if(q&&(!c.button||c.type!=="click"))for(f=c.target;f!=this;f=f.parentNode||this)if(f.disabled!==!0||c.type!=="click"){h={},j=[];for(d=0;d<q;d++)l=o[d],m=l.selector,h[m]===b&&(h[m]=l.needsContext?p(m,this).index(f)>=0:p.find(m,this,null,[f]).length),h[m]&&j.push(l);j.length&&u.push({elem:f,matches:j})}o.length>q&&u.push({elem:this,matches:o.slice(q)});for(d=0;d<u.length&&!c.isPropagationStopped();d++){i=u[d],c.currentTarget=i.elem;for(e=0;e<i.matches.length&&!c.isImmediatePropagationStopped();e++){l=i.matches[e];if(s||!c.namespace&&!l.namespace||c.namespace_re&&c.namespace_re.test(l.namespace))c.data=l.data,c.handleObj=l,g=((p.event.special[l.origType]||{}).handle||l.handler).apply(i.elem,r),g!==b&&(c.result=g,g===!1&&(c.preventDefault(),c.stopPropagation()))}}return t.postDispatch&&t.postDispatch.call(this,c),c.result},props:"attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return a.which==null&&(a.which=b.charCode!=null?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,c){var d,f,g,h=c.button,i=c.fromElement;return a.pageX==null&&c.clientX!=null&&(d=a.target.ownerDocument||e,f=d.documentElement,g=d.body,a.pageX=c.clientX+(f&&f.scrollLeft||g&&g.scrollLeft||0)-(f&&f.clientLeft||g&&g.clientLeft||0),a.pageY=c.clientY+(f&&f.scrollTop||g&&g.scrollTop||0)-(f&&f.clientTop||g&&g.clientTop||0)),!a.relatedTarget&&i&&(a.relatedTarget=i===a.target?c.toElement:i),!a.which&&h!==b&&(a.which=h&1?1:h&2?3:h&4?2:0),a}},fix:function(a){if(a[p.expando])return a;var b,c,d=a,f=p.event.fixHooks[a.type]||{},g=f.props?this.props.concat(f.props):this.props;a=p.Event(d);for(b=g.length;b;)c=g[--b],a[c]=d[c];return a.target||(a.target=d.srcElement||e),a.target.nodeType===3&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,f.filter?f.filter(a,d):a},special:{load:{noBubble:!0},focus:{delegateType:"focusin"},blur:{delegateType:"focusout"},beforeunload:{setup:function(a,b,c){p.isWindow(this)&&(this.onbeforeunload=c)},teardown:function(a,b){this.onbeforeunload===b&&(this.onbeforeunload=null)}}},simulate:function(a,b,c,d){var e=p.extend(new p.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?p.event.trigger(e,null,b):p.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},p.event.handle=p.event.dispatch,p.removeEvent=e.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){var d="on"+b;a.detachEvent&&(typeof a[d]=="undefined"&&(a[d]=null),a.detachEvent(d,c))},p.Event=function(a,b){if(this instanceof p.Event)a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||a.returnValue===!1||a.getPreventDefault&&a.getPreventDefault()?bb:ba):this.type=a,b&&p.extend(this,b),this.timeStamp=a&&a.timeStamp||p.now(),this[p.expando]=!0;else return new p.Event(a,b)},p.Event.prototype={preventDefault:function(){this.isDefaultPrevented=bb;var a=this.originalEvent;if(!a)return;a.preventDefault?a.preventDefault():a.returnValue=!1},stopPropagation:function(){this.isPropagationStopped=bb;var a=this.originalEvent;if(!a)return;a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=bb,this.stopPropagation()},isDefaultPrevented:ba,isPropagationStopped:ba,isImmediatePropagationStopped:ba},p.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){p.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj,g=f.selector;if(!e||e!==d&&!p.contains(d,e))a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b;return c}}}),p.support.submitBubbles||(p.event.special.submit={setup:function(){if(p.nodeName(this,"form"))return!1;p.event.add(this,"click._submit keypress._submit",function(a){var c=a.target,d=p.nodeName(c,"input")||p.nodeName(c,"button")?c.form:b;d&&!p._data(d,"_submit_attached")&&(p.event.add(d,"submit._submit",function(a){a._submit_bubble=!0}),p._data(d,"_submit_attached",!0))})},postDispatch:function(a){a._submit_bubble&&(delete a._submit_bubble,this.parentNode&&!a.isTrigger&&p.event.simulate("submit",this.parentNode,a,!0))},teardown:function(){if(p.nodeName(this,"form"))return!1;p.event.remove(this,"._submit")}}),p.support.changeBubbles||(p.event.special.change={setup:function(){if(V.test(this.nodeName)){if(this.type==="checkbox"||this.type==="radio")p.event.add(this,"propertychange._change",function(a){a.originalEvent.propertyName==="checked"&&(this._just_changed=!0)}),p.event.add(this,"click._change",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1),p.event.simulate("change",this,a,!0)});return!1}p.event.add(this,"beforeactivate._change",function(a){var b=a.target;V.test(b.nodeName)&&!p._data(b,"_change_attached")&&(p.event.add(b,"change._change",function(a){this.parentNode&&!a.isSimulated&&!a.isTrigger&&p.event.simulate("change",this.parentNode,a,!0)}),p._data(b,"_change_attached",!0))})},handle:function(a){var b=a.target;if(this!==b||a.isSimulated||a.isTrigger||b.type!=="radio"&&b.type!=="checkbox")return a.handleObj.handler.apply(this,arguments)},teardown:function(){return p.event.remove(this,"._change"),!V.test(this.nodeName)}}),p.support.focusinBubbles||p.each({focus:"focusin",blur:"focusout"},function(a,b){var c=0,d=function(a){p.event.simulate(b,a.target,p.event.fix(a),!0)};p.event.special[b]={setup:function(){c++===0&&e.addEventListener(a,d,!0)},teardown:function(){--c===0&&e.removeEventListener(a,d,!0)}}}),p.fn.extend({on:function(a,c,d,e,f){var g,h;if(typeof a=="object"){typeof c!="string"&&(d=d||c,c=b);for(h in a)this.on(h,c,d,a[h],f);return this}d==null&&e==null?(e=c,d=c=b):e==null&&(typeof c=="string"?(e=d,d=b):(e=d,d=c,c=b));if(e===!1)e=ba;else if(!e)return this;return f===1&&(g=e,e=function(a){return p().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=p.guid++)),this.each(function(){p.event.add(this,a,e,d,c)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,c,d){var e,f;if(a&&a.preventDefault&&a.handleObj)return e=a.handleObj,p(a.delegateTarget).off(e.namespace?e.origType+"."+e.namespace:e.origType,e.selector,e.handler),this;if(typeof a=="object"){for(f in a)this.off(f,c,a[f]);return this}if(c===!1||typeof c=="function")d=c,c=b;return d===!1&&(d=ba),this.each(function(){p.event.remove(this,a,d,c)})},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},live:function(a,b,c){return p(this.context).on(a,this.selector,b,c),this},die:function(a,b){return p(this.context).off(a,this.selector||"**",b),this},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return arguments.length===1?this.off(a,"**"):this.off(b,a||"**",c)},trigger:function(a,b){return this.each(function(){p.event.trigger(a,b,this)})},triggerHandler:function(a,b){if(this[0])return p.event.trigger(a,b,this[0],!0)},toggle:function(a){var b=arguments,c=a.guid||p.guid++,d=0,e=function(c){var e=(p._data(this,"lastToggle"+a.guid)||0)%d;return p._data(this,"lastToggle"+a.guid,e+1),c.preventDefault(),b[e].apply(this,arguments)||!1};e.guid=c;while(d<b.length)b[d++].guid=c;return this.click(e)},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),p.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){p.fn[b]=function(a,c){return c==null&&(c=a,a=null),arguments.length>0?this.on(b,null,a,c):this.trigger(b)},Y.test(b)&&(p.event.fixHooks[b]=p.event.keyHooks),Z.test(b)&&(p.event.fixHooks[b]=p.event.mouseHooks)}),function(a,b){function bc(a,b,c,d){c=c||[],b=b||r;var e,f,i,j,k=b.nodeType;if(!a||typeof a!="string")return c;if(k!==1&&k!==9)return[];i=g(b);if(!i&&!d)if(e=P.exec(a))if(j=e[1]){if(k===9){f=b.getElementById(j);if(!f||!f.parentNode)return c;if(f.id===j)return c.push(f),c}else if(b.ownerDocument&&(f=b.ownerDocument.getElementById(j))&&h(b,f)&&f.id===j)return c.push(f),c}else{if(e[2])return w.apply(c,x.call(b.getElementsByTagName(a),0)),c;if((j=e[3])&&_&&b.getElementsByClassName)return w.apply(c,x.call(b.getElementsByClassName(j),0)),c}return bp(a.replace(L,"$1"),b,c,d,i)}function bd(a){return function(b){var c=b.nodeName.toLowerCase();return c==="input"&&b.type===a}}function be(a){return function(b){var c=b.nodeName.toLowerCase();return(c==="input"||c==="button")&&b.type===a}}function bf(a){return z(function(b){return b=+b,z(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function bg(a,b,c){if(a===b)return c;var d=a.nextSibling;while(d){if(d===b)return-1;d=d.nextSibling}return 1}function bh(a,b){var c,d,f,g,h,i,j,k=C[o][a];if(k)return b?0:k.slice(0);h=a,i=[],j=e.preFilter;while(h){if(!c||(d=M.exec(h)))d&&(h=h.slice(d[0].length)),i.push(f=[]);c=!1;if(d=N.exec(h))f.push(c=new q(d.shift())),h=h.slice(c.length),c.type=d[0].replace(L," ");for(g in e.filter)(d=W[g].exec(h))&&(!j[g]||(d=j[g](d,r,!0)))&&(f.push(c=new q(d.shift())),h=h.slice(c.length),c.type=g,c.matches=d);if(!c)break}return b?h.length:h?bc.error(a):C(a,i).slice(0)}function bi(a,b,d){var e=b.dir,f=d&&b.dir==="parentNode",g=u++;return b.first?function(b,c,d){while(b=b[e])if(f||b.nodeType===1)return a(b,c,d)}:function(b,d,h){if(!h){var i,j=t+" "+g+" ",k=j+c;while(b=b[e])if(f||b.nodeType===1){if((i=b[o])===k)return b.sizset;if(typeof i=="string"&&i.indexOf(j)===0){if(b.sizset)return b}else{b[o]=k;if(a(b,d,h))return b.sizset=!0,b;b.sizset=!1}}}else while(b=b[e])if(f||b.nodeType===1)if(a(b,d,h))return b}}function bj(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function bk(a,b,c,d,e){var f,g=[],h=0,i=a.length,j=b!=null;for(;h<i;h++)if(f=a[h])if(!c||c(f,d,e))g.push(f),j&&b.push(h);return g}function bl(a,b,c,d,e,f){return d&&!d[o]&&(d=bl(d)),e&&!e[o]&&(e=bl(e,f)),z(function(f,g,h,i){if(f&&e)return;var j,k,l,m=[],n=[],o=g.length,p=f||bo(b||"*",h.nodeType?[h]:h,[],f),q=a&&(f||!b)?bk(p,m,a,h,i):p,r=c?e||(f?a:o||d)?[]:g:q;c&&c(q,r,h,i);if(d){l=bk(r,n),d(l,[],h,i),j=l.length;while(j--)if(k=l[j])r[n[j]]=!(q[n[j]]=k)}if(f){j=a&&r.length;while(j--)if(k=r[j])f[m[j]]=!(g[m[j]]=k)}else r=bk(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):w.apply(g,r)})}function bm(a){var b,c,d,f=a.length,g=e.relative[a[0].type],h=g||e.relative[" "],i=g?1:0,j=bi(function(a){return a===b},h,!0),k=bi(function(a){return y.call(b,a)>-1},h,!0),m=[function(a,c,d){return!g&&(d||c!==l)||((b=c).nodeType?j(a,c,d):k(a,c,d))}];for(;i<f;i++)if(c=e.relative[a[i].type])m=[bi(bj(m),c)];else{c=e.filter[a[i].type].apply(null,a[i].matches);if(c[o]){d=++i;for(;d<f;d++)if(e.relative[a[d].type])break;return bl(i>1&&bj(m),i>1&&a.slice(0,i-1).join("").replace(L,"$1"),c,i<d&&bm(a.slice(i,d)),d<f&&bm(a=a.slice(d)),d<f&&a.join(""))}m.push(c)}return bj(m)}function bn(a,b){var d=b.length>0,f=a.length>0,g=function(h,i,j,k,m){var n,o,p,q=[],s=0,u="0",x=h&&[],y=m!=null,z=l,A=h||f&&e.find.TAG("*",m&&i.parentNode||i),B=t+=z==null?1:Math.E;y&&(l=i!==r&&i,c=g.el);for(;(n=A[u])!=null;u++){if(f&&n){for(o=0;p=a[o];o++)if(p(n,i,j)){k.push(n);break}y&&(t=B,c=++g.el)}d&&((n=!p&&n)&&s--,h&&x.push(n))}s+=u;if(d&&u!==s){for(o=0;p=b[o];o++)p(x,q,i,j);if(h){if(s>0)while(u--)!x[u]&&!q[u]&&(q[u]=v.call(k));q=bk(q)}w.apply(k,q),y&&!h&&q.length>0&&s+b.length>1&&bc.uniqueSort(k)}return y&&(t=B,l=z),x};return g.el=0,d?z(g):g}function bo(a,b,c,d){var e=0,f=b.length;for(;e<f;e++)bc(a,b[e],c,d);return c}function bp(a,b,c,d,f){var g,h,j,k,l,m=bh(a),n=m.length;if(!d&&m.length===1){h=m[0]=m[0].slice(0);if(h.length>2&&(j=h[0]).type==="ID"&&b.nodeType===9&&!f&&e.relative[h[1].type]){b=e.find.ID(j.matches[0].replace(V,""),b,f)[0];if(!b)return c;a=a.slice(h.shift().length)}for(g=W.POS.test(a)?-1:h.length-1;g>=0;g--){j=h[g];if(e.relative[k=j.type])break;if(l=e.find[k])if(d=l(j.matches[0].replace(V,""),R.test(h[0].type)&&b.parentNode||b,f)){h.splice(g,1),a=d.length&&h.join("");if(!a)return w.apply(c,x.call(d,0)),c;break}}}return i(a,m)(d,b,f,c,R.test(a)),c}function bq(){}var c,d,e,f,g,h,i,j,k,l,m=!0,n="undefined",o=("sizcache"+Math.random()).replace(".",""),q=String,r=a.document,s=r.documentElement,t=0,u=0,v=[].pop,w=[].push,x=[].slice,y=[].indexOf||function(a){var b=0,c=this.length;for(;b<c;b++)if(this[b]===a)return b;return-1},z=function(a,b){return a[o]=b==null||b,a},A=function(){var a={},b=[];return z(function(c,d){return b.push(c)>e.cacheLength&&delete a[b.shift()],a[c]=d},a)},B=A(),C=A(),D=A(),E="[\\x20\\t\\r\\n\\f]",F="(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",G=F.replace("w","w#"),H="([*^$|!~]?=)",I="\\["+E+"*("+F+")"+E+"*(?:"+H+E+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+G+")|)|)"+E+"*\\]",J=":("+F+")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:"+I+")|[^:]|\\\\.)*|.*))\\)|)",K=":(even|odd|eq|gt|lt|nth|first|last)(?:\\("+E+"*((?:-\\d)?\\d*)"+E+"*\\)|)(?=[^-]|$)",L=new RegExp("^"+E+"+|((?:^|[^\\\\])(?:\\\\.)*)"+E+"+$","g"),M=new RegExp("^"+E+"*,"+E+"*"),N=new RegExp("^"+E+"*([\\x20\\t\\r\\n\\f>+~])"+E+"*"),O=new RegExp(J),P=/^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,Q=/^:not/,R=/[\x20\t\r\n\f]*[+~]/,S=/:not\($/,T=/h\d/i,U=/input|select|textarea|button/i,V=/\\(?!\\)/g,W={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),NAME:new RegExp("^\\[name=['\"]?("+F+")['\"]?\\]"),TAG:new RegExp("^("+F.replace("w","w*")+")"),ATTR:new RegExp("^"+I),PSEUDO:new RegExp("^"+J),POS:new RegExp(K,"i"),CHILD:new RegExp("^:(only|nth|first|last)-child(?:\\("+E+"*(even|odd|(([+-]|)(\\d*)n|)"+E+"*(?:([+-]|)"+E+"*(\\d+)|))"+E+"*\\)|)","i"),needsContext:new RegExp("^"+E+"*[>+~]|"+K,"i")},X=function(a){var b=r.createElement("div");try{return a(b)}catch(c){return!1}finally{b=null}},Y=X(function(a){return a.appendChild(r.createComment("")),!a.getElementsByTagName("*").length}),Z=X(function(a){return a.innerHTML="<a href='#'></a>",a.firstChild&&typeof a.firstChild.getAttribute!==n&&a.firstChild.getAttribute("href")==="#"}),$=X(function(a){a.innerHTML="<select></select>";var b=typeof a.lastChild.getAttribute("multiple");return b!=="boolean"&&b!=="string"}),_=X(function(a){return a.innerHTML="<div class='hidden e'></div><div class='hidden'></div>",!a.getElementsByClassName||!a.getElementsByClassName("e").length?!1:(a.lastChild.className="e",a.getElementsByClassName("e").length===2)}),ba=X(function(a){a.id=o+0,a.innerHTML="<a name='"+o+"'></a><div name='"+o+"'></div>",s.insertBefore(a,s.firstChild);var b=r.getElementsByName&&r.getElementsByName(o).length===2+r.getElementsByName(o+0).length;return d=!r.getElementById(o),s.removeChild(a),b});try{x.call(s.childNodes,0)[0].nodeType}catch(bb){x=function(a){var b,c=[];for(;b=this[a];a++)c.push(b);return c}}bc.matches=function(a,b){return bc(a,null,null,b)},bc.matchesSelector=function(a,b){return bc(b,null,null,[a]).length>0},f=bc.getText=function(a){var b,c="",d=0,e=a.nodeType;if(e){if(e===1||e===9||e===11){if(typeof a.textContent=="string")return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=f(a)}else if(e===3||e===4)return a.nodeValue}else for(;b=a[d];d++)c+=f(b);return c},g=bc.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?b.nodeName!=="HTML":!1},h=bc.contains=s.contains?function(a,b){var c=a.nodeType===9?a.documentElement:a,d=b&&b.parentNode;return a===d||!!(d&&d.nodeType===1&&c.contains&&c.contains(d))}:s.compareDocumentPosition?function(a,b){return b&&!!(a.compareDocumentPosition(b)&16)}:function(a,b){while(b=b.parentNode)if(b===a)return!0;return!1},bc.attr=function(a,b){var c,d=g(a);return d||(b=b.toLowerCase()),(c=e.attrHandle[b])?c(a):d||$?a.getAttribute(b):(c=a.getAttributeNode(b),c?typeof a[b]=="boolean"?a[b]?b:null:c.specified?c.value:null:null)},e=bc.selectors={cacheLength:50,createPseudo:z,match:W,attrHandle:Z?{}:{href:function(a){return a.getAttribute("href",2)},type:function(a){return a.getAttribute("type")}},find:{ID:d?function(a,b,c){if(typeof b.getElementById!==n&&!c){var d=b.getElementById(a);return d&&d.parentNode?[d]:[]}}:function(a,c,d){if(typeof c.getElementById!==n&&!d){var e=c.getElementById(a);return e?e.id===a||typeof e.getAttributeNode!==n&&e.getAttributeNode("id").value===a?[e]:b:[]}},TAG:Y?function(a,b){if(typeof b.getElementsByTagName!==n)return b.getElementsByTagName(a)}:function(a,b){var c=b.getElementsByTagName(a);if(a==="*"){var d,e=[],f=0;for(;d=c[f];f++)d.nodeType===1&&e.push(d);return e}return c},NAME:ba&&function(a,b){if(typeof b.getElementsByName!==n)return b.getElementsByName(name)},CLASS:_&&function(a,b,c){if(typeof b.getElementsByClassName!==n&&!c)return b.getElementsByClassName(a)}},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(V,""),a[3]=(a[4]||a[5]||"").replace(V,""),a[2]==="~="&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),a[1]==="nth"?(a[2]||bc.error(a[0]),a[3]=+(a[3]?a[4]+(a[5]||1):2*(a[2]==="even"||a[2]==="odd")),a[4]=+(a[6]+a[7]||a[2]==="odd")):a[2]&&bc.error(a[0]),a},PSEUDO:function(a){var b,c;if(W.CHILD.test(a[0]))return null;if(a[3])a[2]=a[3];else if(b=a[4])O.test(b)&&(c=bh(b,!0))&&(c=b.indexOf(")",b.length-c)-b.length)&&(b=b.slice(0,c),a[0]=a[0].slice(0,c)),a[2]=b;return a.slice(0,3)}},filter:{ID:d?function(a){return a=a.replace(V,""),function(b){return b.getAttribute("id")===a}}:function(a){return a=a.replace(V,""),function(b){var c=typeof b.getAttributeNode!==n&&b.getAttributeNode("id");return c&&c.value===a}},TAG:function(a){return a==="*"?function(){return!0}:(a=a.replace(V,"").toLowerCase(),function(b){return b.nodeName&&b.nodeName.toLowerCase()===a})},CLASS:function(a){var b=B[o][a];return b||(b=B(a,new RegExp("(^|"+E+")"+a+"("+E+"|$)"))),function(a){return b.test(a.className||typeof a.getAttribute!==n&&a.getAttribute("class")||"")}},ATTR:function(a,b,c){return function(d,e){var f=bc.attr(d,a);return f==null?b==="!=":b?(f+="",b==="="?f===c:b==="!="?f!==c:b==="^="?c&&f.indexOf(c)===0:b==="*="?c&&f.indexOf(c)>-1:b==="$="?c&&f.substr(f.length-c.length)===c:b==="~="?(" "+f+" ").indexOf(c)>-1:b==="|="?f===c||f.substr(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d){return a==="nth"?function(a){var b,e,f=a.parentNode;if(c===1&&d===0)return!0;if(f){e=0;for(b=f.firstChild;b;b=b.nextSibling)if(b.nodeType===1){e++;if(a===b)break}}return e-=d,e===c||e%c===0&&e/c>=0}:function(b){var c=b;switch(a){case"only":case"first":while(c=c.previousSibling)if(c.nodeType===1)return!1;if(a==="first")return!0;c=b;case"last":while(c=c.nextSibling)if(c.nodeType===1)return!1;return!0}}},PSEUDO:function(a,b){var c,d=e.pseudos[a]||e.setFilters[a.toLowerCase()]||bc.error("unsupported pseudo: "+a);return d[o]?d(b):d.length>1?(c=[a,a,"",b],e.setFilters.hasOwnProperty(a.toLowerCase())?z(function(a,c){var e,f=d(a,b),g=f.length;while(g--)e=y.call(a,f[g]),a[e]=!(c[e]=f[g])}):function(a){return d(a,0,c)}):d}},pseudos:{not:z(function(a){var b=[],c=[],d=i(a.replace(L,"$1"));return d[o]?z(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)if(f=g[h])a[h]=!(b[h]=f)}):function(a,e,f){return b[0]=a,d(b,null,f,c),!c.pop()}}),has:z(function(a){return function(b){return bc(a,b).length>0}}),contains:z(function(a){return function(b){return(b.textContent||b.innerText||f(b)).indexOf(a)>-1}}),enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return b==="input"&&!!a.checked||b==="option"&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},parent:function(a){return!e.pseudos.empty(a)},empty:function(a){var b;a=a.firstChild;while(a){if(a.nodeName>"@"||(b=a.nodeType)===3||b===4)return!1;a=a.nextSibling}return!0},header:function(a){return T.test(a.nodeName)},text:function(a){var b,c;return a.nodeName.toLowerCase()==="input"&&(b=a.type)==="text"&&((c=a.getAttribute("type"))==null||c.toLowerCase()===b)},radio:bd("radio"),checkbox:bd("checkbox"),file:bd("file"),password:bd("password"),image:bd("image"),submit:be("submit"),reset:be("reset"),button:function(a){var b=a.nodeName.toLowerCase();return b==="input"&&a.type==="button"||b==="button"},input:function(a){return U.test(a.nodeName)},focus:function(a){var b=a.ownerDocument;return a===b.activeElement&&(!b.hasFocus||b.hasFocus())&&(!!a.type||!!a.href)},active:function(a){return a===a.ownerDocument.activeElement},first:bf(function(a,b,c){return[0]}),last:bf(function(a,b,c){return[b-1]}),eq:bf(function(a,b,c){return[c<0?c+b:c]}),even:bf(function(a,b,c){for(var d=0;d<b;d+=2)a.push(d);return a}),odd:bf(function(a,b,c){for(var d=1;d<b;d+=2)a.push(d);return a}),lt:bf(function(a,b,c){for(var d=c<0?c+b:c;--d>=0;)a.push(d);return a}),gt:bf(function(a,b,c){for(var d=c<0?c+b:c;++d<b;)a.push(d);return a})}},j=s.compareDocumentPosition?function(a,b){return a===b?(k=!0,0):(!a.compareDocumentPosition||!b.compareDocumentPosition?a.compareDocumentPosition:a.compareDocumentPosition(b)&4)?-1:1}:function(a,b){if(a===b)return k=!0,0;if(a.sourceIndex&&b.sourceIndex)return a.sourceIndex-b.sourceIndex;var c,d,e=[],f=[],g=a.parentNode,h=b.parentNode,i=g;if(g===h)return bg(a,b);if(!g)return-1;if(!h)return 1;while(i)e.unshift(i),i=i.parentNode;i=h;while(i)f.unshift(i),i=i.parentNode;c=e.length,d=f.length;for(var j=0;j<c&&j<d;j++)if(e[j]!==f[j])return bg(e[j],f[j]);return j===c?bg(a,f[j],-1):bg(e[j],b,1)},[0,0].sort(j),m=!k,bc.uniqueSort=function(a){var b,c=1;k=m,a.sort(j);if(k)for(;b=a[c];c++)b===a[c-1]&&a.splice(c--,1);return a},bc.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},i=bc.compile=function(a,b){var c,d=[],e=[],f=D[o][a];if(!f){b||(b=bh(a)),c=b.length;while(c--)f=bm(b[c]),f[o]?d.push(f):e.push(f);f=D(a,bn(e,d))}return f},r.querySelectorAll&&function(){var a,b=bp,c=/'|\\/g,d=/\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,e=[":focus"],f=[":active",":focus"],h=s.matchesSelector||s.mozMatchesSelector||s.webkitMatchesSelector||s.oMatchesSelector||s.msMatchesSelector;X(function(a){a.innerHTML="<select><option selected=''></option></select>",a.querySelectorAll("[selected]").length||e.push("\\["+E+"*(?:checked|disabled|ismap|multiple|readonly|selected|value)"),a.querySelectorAll(":checked").length||e.push(":checked")}),X(function(a){a.innerHTML="<p test=''></p>",a.querySelectorAll("[test^='']").length&&e.push("[*^$]="+E+"*(?:\"\"|'')"),a.innerHTML="<input type='hidden'/>",a.querySelectorAll(":enabled").length||e.push(":enabled",":disabled")}),e=new RegExp(e.join("|")),bp=function(a,d,f,g,h){if(!g&&!h&&(!e||!e.test(a))){var i,j,k=!0,l=o,m=d,n=d.nodeType===9&&a;if(d.nodeType===1&&d.nodeName.toLowerCase()!=="object"){i=bh(a),(k=d.getAttribute("id"))?l=k.replace(c,"\\$&"):d.setAttribute("id",l),l="[id='"+l+"'] ",j=i.length;while(j--)i[j]=l+i[j].join("");m=R.test(a)&&d.parentNode||d,n=i.join(",")}if(n)try{return w.apply(f,x.call(m.querySelectorAll(n),0)),f}catch(p){}finally{k||d.removeAttribute("id")}}return b(a,d,f,g,h)},h&&(X(function(b){a=h.call(b,"div");try{h.call(b,"[test!='']:sizzle"),f.push("!=",J)}catch(c){}}),f=new RegExp(f.join("|")),bc.matchesSelector=function(b,c){c=c.replace(d,"='$1']");if(!g(b)&&!f.test(c)&&(!e||!e.test(c)))try{var i=h.call(b,c);if(i||a||b.document&&b.document.nodeType!==11)return i}catch(j){}return bc(c,null,null,[b]).length>0})}(),e.pseudos.nth=e.pseudos.eq,e.filters=bq.prototype=e.pseudos,e.setFilters=new bq,bc.attr=p.attr,p.find=bc,p.expr=bc.selectors,p.expr[":"]=p.expr.pseudos,p.unique=bc.uniqueSort,p.text=bc.getText,p.isXMLDoc=bc.isXML,p.contains=bc.contains}(a);var bc=/Until$/,bd=/^(?:parents|prev(?:Until|All))/,be=/^.[^:#\[\.,]*$/,bf=p.expr.match.needsContext,bg={children:!0,contents:!0,next:!0,prev:!0};p.fn.extend({find:function(a){var b,c,d,e,f,g,h=this;if(typeof a!="string")return p(a).filter(function(){for(b=0,c=h.length;b<c;b++)if(p.contains(h[b],this))return!0});g=this.pushStack("","find",a);for(b=0,c=this.length;b<c;b++){d=g.length,p.find(a,this[b],g);if(b>0)for(e=d;e<g.length;e++)for(f=0;f<d;f++)if(g[f]===g[e]){g.splice(e--,1);break}}return g},has:function(a){var b,c=p(a,this),d=c.length;return this.filter(function(){for(b=0;b<d;b++)if(p.contains(this,c[b]))return!0})},not:function(a){return this.pushStack(bj(this,a,!1),"not",a)},filter:function(a){return this.pushStack(bj(this,a,!0),"filter",a)},is:function(a){return!!a&&(typeof a=="string"?bf.test(a)?p(a,this.context).index(this[0])>=0:p.filter(a,this).length>0:this.filter(a).length>0)},closest:function(a,b){var c,d=0,e=this.length,f=[],g=bf.test(a)||typeof a!="string"?p(a,b||this.context):0;for(;d<e;d++){c=this[d];while(c&&c.ownerDocument&&c!==b&&c.nodeType!==11){if(g?g.index(c)>-1:p.find.matchesSelector(c,a)){f.push(c);break}c=c.parentNode}}return f=f.length>1?p.unique(f):f,this.pushStack(f,"closest",a)},index:function(a){return a?typeof a=="string"?p.inArray(this[0],p(a)):p.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.prevAll().length:-1},add:function(a,b){var c=typeof a=="string"?p(a,b):p.makeArray(a&&a.nodeType?[a]:a),d=p.merge(this.get(),c);return this.pushStack(bh(c[0])||bh(d[0])?d:p.unique(d))},addBack:function(a){return this.add(a==null?this.prevObject:this.prevObject.filter(a))}}),p.fn.andSelf=p.fn.addBack,p.each({parent:function(a){var b=a.parentNode;return b&&b.nodeType!==11?b:null},parents:function(a){return p.dir(a,"parentNode")},parentsUntil:function(a,b,c){return p.dir(a,"parentNode",c)},next:function(a){return bi(a,"nextSibling")},prev:function(a){return bi(a,"previousSibling")},nextAll:function(a){return p.dir(a,"nextSibling")},prevAll:function(a){return p.dir(a,"previousSibling")},nextUntil:function(a,b,c){return p.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return p.dir(a,"previousSibling",c)},siblings:function(a){return p.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return p.sibling(a.firstChild)},contents:function(a){return p.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:p.merge([],a.childNodes)}},function(a,b){p.fn[a]=function(c,d){var e=p.map(this,b,c);return bc.test(a)||(d=c),d&&typeof d=="string"&&(e=p.filter(d,e)),e=this.length>1&&!bg[a]?p.unique(e):e,this.length>1&&bd.test(a)&&(e=e.reverse()),this.pushStack(e,a,k.call(arguments).join(","))}}),p.extend({filter:function(a,b,c){return c&&(a=":not("+a+")"),b.length===1?p.find.matchesSelector(b[0],a)?[b[0]]:[]:p.find.matches(a,b)},dir:function(a,c,d){var e=[],f=a[c];while(f&&f.nodeType!==9&&(d===b||f.nodeType!==1||!p(f).is(d)))f.nodeType===1&&e.push(f),f=f[c];return e},sibling:function(a,b){var c=[];for(;a;a=a.nextSibling)a.nodeType===1&&a!==b&&c.push(a);return c}});var bl="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",bm=/ jQuery\d+="(?:null|\d+)"/g,bn=/^\s+/,bo=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,bp=/<([\w:]+)/,bq=/<tbody/i,br=/<|&#?\w+;/,bs=/<(?:script|style|link)/i,bt=/<(?:script|object|embed|option|style)/i,bu=new RegExp("<(?:"+bl+")[\\s/>]","i"),bv=/^(?:checkbox|radio)$/,bw=/checked\s*(?:[^=]|=\s*.checked.)/i,bx=/\/(java|ecma)script/i,by=/^\s*<!(?:\[CDATA\[|\-\-)|[\]\-]{2}>\s*$/g,bz={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]},bA=bk(e),bB=bA.appendChild(e.createElement("div"));bz.optgroup=bz.option,bz.tbody=bz.tfoot=bz.colgroup=bz.caption=bz.thead,bz.th=bz.td,p.support.htmlSerialize||(bz._default=[1,"X<div>","</div>"]),p.fn.extend({text:function(a){return p.access(this,function(a){return a===b?p.text(this):this.empty().append((this[0]&&this[0].ownerDocument||e).createTextNode(a))},null,a,arguments.length)},wrapAll:function(a){if(p.isFunction(a))return this.each(function(b){p(this).wrapAll(a.call(this,b))});if(this[0]){var b=p(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&a.firstChild.nodeType===1)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return p.isFunction(a)?this.each(function(b){p(this).wrapInner(a.call(this,b))}):this.each(function(){var b=p(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=p.isFunction(a);return this.each(function(c){p(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){p.nodeName(this,"body")||p(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(a){(this.nodeType===1||this.nodeType===11)&&this.appendChild(a)})},prepend:function(){return this.domManip(arguments,!0,function(a){(this.nodeType===1||this.nodeType===11)&&this.insertBefore(a,this.firstChild)})},before:function(){if(!bh(this[0]))return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this)});if(arguments.length){var a=p.clean(arguments);return this.pushStack(p.merge(a,this),"before",this.selector)}},after:function(){if(!bh(this[0]))return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this.nextSibling)});if(arguments.length){var a=p.clean(arguments);return this.pushStack(p.merge(this,a),"after",this.selector)}},remove:function(a,b){var c,d=0;for(;(c=this[d])!=null;d++)if(!a||p.filter(a,[c]).length)!b&&c.nodeType===1&&(p.cleanData(c.getElementsByTagName("*")),p.cleanData([c])),c.parentNode&&c.parentNode.removeChild(c);return this},empty:function(){var a,b=0;for(;(a=this[b])!=null;b++){a.nodeType===1&&p.cleanData(a.getElementsByTagName("*"));while(a.firstChild)a.removeChild(a.firstChild)}return this},clone:function(a,b){return a=a==null?!1:a,b=b==null?a:b,this.map(function(){return p.clone(this,a,b)})},html:function(a){return p.access(this,function(a){var c=this[0]||{},d=0,e=this.length;if(a===b)return c.nodeType===1?c.innerHTML.replace(bm,""):b;if(typeof a=="string"&&!bs.test(a)&&(p.support.htmlSerialize||!bu.test(a))&&(p.support.leadingWhitespace||!bn.test(a))&&!bz[(bp.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(bo,"<$1></$2>");try{for(;d<e;d++)c=this[d]||{},c.nodeType===1&&(p.cleanData(c.getElementsByTagName("*")),c.innerHTML=a);c=0}catch(f){}}c&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(a){return bh(this[0])?this.length?this.pushStack(p(p.isFunction(a)?a():a),"replaceWith",a):this:p.isFunction(a)?this.each(function(b){var c=p(this),d=c.html();c.replaceWith(a.call(this,b,d))}):(typeof a!="string"&&(a=p(a).detach()),this.each(function(){var b=this.nextSibling,c=this.parentNode;p(this).remove(),b?p(b).before(a):p(c).append(a)}))},detach:function(a){return this.remove(a,!0)},domManip:function(a,c,d){a=[].concat.apply([],a);var e,f,g,h,i=0,j=a[0],k=[],l=this.length;if(!p.support.checkClone&&l>1&&typeof j=="string"&&bw.test(j))return this.each(function(){p(this).domManip(a,c,d)});if(p.isFunction(j))return this.each(function(e){var f=p(this);a[0]=j.call(this,e,c?f.html():b),f.domManip(a,c,d)});if(this[0]){e=p.buildFragment(a,this,k),g=e.fragment,f=g.firstChild,g.childNodes.length===1&&(g=f);if(f){c=c&&p.nodeName(f,"tr");for(h=e.cacheable||l-1;i<l;i++)d.call(c&&p.nodeName(this[i],"table")?bC(this[i],"tbody"):this[i],i===h?g:p.clone(g,!0,!0))}g=f=null,k.length&&p.each(k,function(a,b){b.src?p.ajax?p.ajax({url:b.src,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0}):p.error("no ajax"):p.globalEval((b.text||b.textContent||b.innerHTML||"").replace(by,"")),b.parentNode&&b.parentNode.removeChild(b)})}return this}}),p.buildFragment=function(a,c,d){var f,g,h,i=a[0];return c=c||e,c=!c.nodeType&&c[0]||c,c=c.ownerDocument||c,a.length===1&&typeof i=="string"&&i.length<512&&c===e&&i.charAt(0)==="<"&&!bt.test(i)&&(p.support.checkClone||!bw.test(i))&&(p.support.html5Clone||!bu.test(i))&&(g=!0,f=p.fragments[i],h=f!==b),f||(f=c.createDocumentFragment(),p.clean(a,c,f,d),g&&(p.fragments[i]=h&&f)),{fragment:f,cacheable:g}},p.fragments={},p.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){p.fn[a]=function(c){var d,e=0,f=[],g=p(c),h=g.length,i=this.length===1&&this[0].parentNode;if((i==null||i&&i.nodeType===11&&i.childNodes.length===1)&&h===1)return g[b](this[0]),this;for(;e<h;e++)d=(e>0?this.clone(!0):this).get(),p(g[e])[b](d),f=f.concat(d);return this.pushStack(f,a,g.selector)}}),p.extend({clone:function(a,b,c){var d,e,f,g;p.support.html5Clone||p.isXMLDoc(a)||!bu.test("<"+a.nodeName+">")?g=a.cloneNode(!0):(bB.innerHTML=a.outerHTML,bB.removeChild(g=bB.firstChild));if((!p.support.noCloneEvent||!p.support.noCloneChecked)&&(a.nodeType===1||a.nodeType===11)&&!p.isXMLDoc(a)){bE(a,g),d=bF(a),e=bF(g);for(f=0;d[f];++f)e[f]&&bE(d[f],e[f])}if(b){bD(a,g);if(c){d=bF(a),e=bF(g);for(f=0;d[f];++f)bD(d[f],e[f])}}return d=e=null,g},clean:function(a,b,c,d){var f,g,h,i,j,k,l,m,n,o,q,r,s=b===e&&bA,t=[];if(!b||typeof b.createDocumentFragment=="undefined")b=e;for(f=0;(h=a[f])!=null;f++){typeof h=="number"&&(h+="");if(!h)continue;if(typeof h=="string")if(!br.test(h))h=b.createTextNode(h);else{s=s||bk(b),l=b.createElement("div"),s.appendChild(l),h=h.replace(bo,"<$1></$2>"),i=(bp.exec(h)||["",""])[1].toLowerCase(),j=bz[i]||bz._default,k=j[0],l.innerHTML=j[1]+h+j[2];while(k--)l=l.lastChild;if(!p.support.tbody){m=bq.test(h),n=i==="table"&&!m?l.firstChild&&l.firstChild.childNodes:j[1]==="<table>"&&!m?l.childNodes:[];for(g=n.length-1;g>=0;--g)p.nodeName(n[g],"tbody")&&!n[g].childNodes.length&&n[g].parentNode.removeChild(n[g])}!p.support.leadingWhitespace&&bn.test(h)&&l.insertBefore(b.createTextNode(bn.exec(h)[0]),l.firstChild),h=l.childNodes,l.parentNode.removeChild(l)}h.nodeType?t.push(h):p.merge(t,h)}l&&(h=l=s=null);if(!p.support.appendChecked)for(f=0;(h=t[f])!=null;f++)p.nodeName(h,"input")?bG(h):typeof h.getElementsByTagName!="undefined"&&p.grep(h.getElementsByTagName("input"),bG);if(c){q=function(a){if(!a.type||bx.test(a.type))return d?d.push(a.parentNode?a.parentNode.removeChild(a):a):c.appendChild(a)};for(f=0;(h=t[f])!=null;f++)if(!p.nodeName(h,"script")||!q(h))c.appendChild(h),typeof h.getElementsByTagName!="undefined"&&(r=p.grep(p.merge([],h.getElementsByTagName("script")),q),t.splice.apply(t,[f+1,0].concat(r)),f+=r.length)}return t},cleanData:function(a,b){var c,d,e,f,g=0,h=p.expando,i=p.cache,j=p.support.deleteExpando,k=p.event.special;for(;(e=a[g])!=null;g++)if(b||p.acceptData(e)){d=e[h],c=d&&i[d];if(c){if(c.events)for(f in c.events)k[f]?p.event.remove(e,f):p.removeEvent(e,f,c.handle);i[d]&&(delete i[d],j?delete e[h]:e.removeAttribute?e.removeAttribute(h):e[h]=null,p.deletedIds.push(d))}}}}),function(){var a,b;p.uaMatch=function(a){a=a.toLowerCase();var b=/(chrome)[ \/]([\w.]+)/.exec(a)||/(webkit)[ \/]([\w.]+)/.exec(a)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(a)||/(msie) ([\w.]+)/.exec(a)||a.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(a)||[];return{browser:b[1]||"",version:b[2]||"0"}},a=p.uaMatch(g.userAgent),b={},a.browser&&(b[a.browser]=!0,b.version=a.version),b.chrome?b.webkit=!0:b.webkit&&(b.safari=!0),p.browser=b,p.sub=function(){function a(b,c){return new a.fn.init(b,c)}p.extend(!0,a,this),a.superclass=this,a.fn=a.prototype=this(),a.fn.constructor=a,a.sub=this.sub,a.fn.init=function c(c,d){return d&&d instanceof p&&!(d instanceof a)&&(d=a(d)),p.fn.init.call(this,c,d,b)},a.fn.init.prototype=a.fn;var b=a(e);return a}}();var bH,bI,bJ,bK=/alpha\([^)]*\)/i,bL=/opacity=([^)]*)/,bM=/^(top|right|bottom|left)$/,bN=/^(none|table(?!-c[ea]).+)/,bO=/^margin/,bP=new RegExp("^("+q+")(.*)$","i"),bQ=new RegExp("^("+q+")(?!px)[a-z%]+$","i"),bR=new RegExp("^([-+])=("+q+")","i"),bS={},bT={position:"absolute",visibility:"hidden",display:"block"},bU={letterSpacing:0,fontWeight:400},bV=["Top","Right","Bottom","Left"],bW=["Webkit","O","Moz","ms"],bX=p.fn.toggle;p.fn.extend({css:function(a,c){return p.access(this,function(a,c,d){return d!==b?p.style(a,c,d):p.css(a,c)},a,c,arguments.length>1)},show:function(){return b$(this,!0)},hide:function(){return b$(this)},toggle:function(a,b){var c=typeof a=="boolean";return p.isFunction(a)&&p.isFunction(b)?bX.apply(this,arguments):this.each(function(){(c?a:bZ(this))?p(this).show():p(this).hide()})}}),p.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=bH(a,"opacity");return c===""?"1":c}}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":p.support.cssFloat?"cssFloat":"styleFloat"},style:function(a,c,d,e){if(!a||a.nodeType===3||a.nodeType===8||!a.style)return;var f,g,h,i=p.camelCase(c),j=a.style;c=p.cssProps[i]||(p.cssProps[i]=bY(j,i)),h=p.cssHooks[c]||p.cssHooks[i];if(d===b)return h&&"get"in h&&(f=h.get(a,!1,e))!==b?f:j[c];g=typeof d,g==="string"&&(f=bR.exec(d))&&(d=(f[1]+1)*f[2]+parseFloat(p.css(a,c)),g="number");if(d==null||g==="number"&&isNaN(d))return;g==="number"&&!p.cssNumber[i]&&(d+="px");if(!h||!("set"in h)||(d=h.set(a,d,e))!==b)try{j[c]=d}catch(k){}},css:function(a,c,d,e){var f,g,h,i=p.camelCase(c);return c=p.cssProps[i]||(p.cssProps[i]=bY(a.style,i)),h=p.cssHooks[c]||p.cssHooks[i],h&&"get"in h&&(f=h.get(a,!0,e)),f===b&&(f=bH(a,c)),f==="normal"&&c in bU&&(f=bU[c]),d||e!==b?(g=parseFloat(f),d||p.isNumeric(g)?g||0:f):f},swap:function(a,b,c){var d,e,f={};for(e in b)f[e]=a.style[e],a.style[e]=b[e];d=c.call(a);for(e in b)a.style[e]=f[e];return d}}),a.getComputedStyle?bH=function(b,c){var d,e,f,g,h=a.getComputedStyle(b,null),i=b.style;return h&&(d=h[c],d===""&&!p.contains(b.ownerDocument,b)&&(d=p.style(b,c)),bQ.test(d)&&bO.test(c)&&(e=i.width,f=i.minWidth,g=i.maxWidth,i.minWidth=i.maxWidth=i.width=d,d=h.width,i.width=e,i.minWidth=f,i.maxWidth=g)),d}:e.documentElement.currentStyle&&(bH=function(a,b){var c,d,e=a.currentStyle&&a.currentStyle[b],f=a.style;return e==null&&f&&f[b]&&(e=f[b]),bQ.test(e)&&!bM.test(b)&&(c=f.left,d=a.runtimeStyle&&a.runtimeStyle.left,d&&(a.runtimeStyle.left=a.currentStyle.left),f.left=b==="fontSize"?"1em":e,e=f.pixelLeft+"px",f.left=c,d&&(a.runtimeStyle.left=d)),e===""?"auto":e}),p.each(["height","width"],function(a,b){p.cssHooks[b]={get:function(a,c,d){if(c)return a.offsetWidth===0&&bN.test(bH(a,"display"))?p.swap(a,bT,function(){return cb(a,b,d)}):cb(a,b,d)},set:function(a,c,d){return b_(a,c,d?ca(a,b,d,p.support.boxSizing&&p.css(a,"boxSizing")==="border-box"):0)}}}),p.support.opacity||(p.cssHooks.opacity={get:function(a,b){return bL.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=p.isNumeric(b)?"alpha(opacity="+b*100+")":"",f=d&&d.filter||c.filter||"";c.zoom=1;if(b>=1&&p.trim(f.replace(bK,""))===""&&c.removeAttribute){c.removeAttribute("filter");if(d&&!d.filter)return}c.filter=bK.test(f)?f.replace(bK,e):f+" "+e}}),p(function(){p.support.reliableMarginRight||(p.cssHooks.marginRight={get:function(a,b){return p.swap(a,{display:"inline-block"},function(){if(b)return bH(a,"marginRight")})}}),!p.support.pixelPosition&&p.fn.position&&p.each(["top","left"],function(a,b){p.cssHooks[b]={get:function(a,c){if(c){var d=bH(a,b);return bQ.test(d)?p(a).position()[b]+"px":d}}}})}),p.expr&&p.expr.filters&&(p.expr.filters.hidden=function(a){return a.offsetWidth===0&&a.offsetHeight===0||!p.support.reliableHiddenOffsets&&(a.style&&a.style.display||bH(a,"display"))==="none"},p.expr.filters.visible=function(a){return!p.expr.filters.hidden(a)}),p.each({margin:"",padding:"",border:"Width"},function(a,b){p.cssHooks[a+b]={expand:function(c){var d,e=typeof c=="string"?c.split(" "):[c],f={};for(d=0;d<4;d++)f[a+bV[d]+b]=e[d]||e[d-2]||e[0];return f}},bO.test(a)||(p.cssHooks[a+b].set=b_)});var cd=/%20/g,ce=/\[\]$/,cf=/\r?\n/g,cg=/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,ch=/^(?:select|textarea)/i;p.fn.extend({serialize:function(){return p.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?p.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||ch.test(this.nodeName)||cg.test(this.type))}).map(function(a,b){var c=p(this).val();return c==null?null:p.isArray(c)?p.map(c,function(a,c){return{name:b.name,value:a.replace(cf,"\r\n")}}):{name:b.name,value:c.replace(cf,"\r\n")}}).get()}}),p.param=function(a,c){var d,e=[],f=function(a,b){b=p.isFunction(b)?b():b==null?"":b,e[e.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};c===b&&(c=p.ajaxSettings&&p.ajaxSettings.traditional);if(p.isArray(a)||a.jquery&&!p.isPlainObject(a))p.each(a,function(){f(this.name,this.value)});else for(d in a)ci(d,a[d],c,f);return e.join("&").replace(cd,"+")};var cj,ck,cl=/#.*$/,cm=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,cn=/^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,co=/^(?:GET|HEAD)$/,cp=/^\/\//,cq=/\?/,cr=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,cs=/([?&])_=[^&]*/,ct=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,cu=p.fn.load,cv={},cw={},cx=["*/"]+["*"];try{ck=f.href}catch(cy){ck=e.createElement("a"),ck.href="",ck=ck.href}cj=ct.exec(ck.toLowerCase())||[],p.fn.load=function(a,c,d){if(typeof a!="string"&&cu)return cu.apply(this,arguments);if(!this.length)return this;var e,f,g,h=this,i=a.indexOf(" ");return i>=0&&(e=a.slice(i,a.length),a=a.slice(0,i)),p.isFunction(c)?(d=c,c=b):c&&typeof c=="object"&&(f="POST"),p.ajax({url:a,type:f,dataType:"html",data:c,complete:function(a,b){d&&h.each(d,g||[a.responseText,b,a])}}).done(function(a){g=arguments,h.html(e?p("<div>").append(a.replace(cr,"")).find(e):a)}),this},p.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(a,b){p.fn[b]=function(a){return this.on(b,a)}}),p.each(["get","post"],function(a,c){p[c]=function(a,d,e,f){return p.isFunction(d)&&(f=f||e,e=d,d=b),p.ajax({type:c,url:a,data:d,success:e,dataType:f})}}),p.extend({getScript:function(a,c){return p.get(a,b,c,"script")},getJSON:function(a,b,c){return p.get(a,b,c,"json")},ajaxSetup:function(a,b){return b?cB(a,p.ajaxSettings):(b=a,a=p.ajaxSettings),cB(a,b),a},ajaxSettings:{url:ck,isLocal:cn.test(cj[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded; charset=UTF-8",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":cx},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":a.String,"text html":!0,"text json":p.parseJSON,"text xml":p.parseXML},flatOptions:{context:!0,url:!0}},ajaxPrefilter:cz(cv),ajaxTransport:cz(cw),ajax:function(a,c){function y(a,c,f,i){var k,s,t,u,w,y=c;if(v===2)return;v=2,h&&clearTimeout(h),g=b,e=i||"",x.readyState=a>0?4:0,f&&(u=cC(l,x,f));if(a>=200&&a<300||a===304)l.ifModified&&(w=x.getResponseHeader("Last-Modified"),w&&(p.lastModified[d]=w),w=x.getResponseHeader("Etag"),w&&(p.etag[d]=w)),a===304?(y="notmodified",k=!0):(k=cD(l,u),y=k.state,s=k.data,t=k.error,k=!t);else{t=y;if(!y||a)y="error",a<0&&(a=0)}x.status=a,x.statusText=(c||y)+"",k?o.resolveWith(m,[s,y,x]):o.rejectWith(m,[x,y,t]),x.statusCode(r),r=b,j&&n.trigger("ajax"+(k?"Success":"Error"),[x,l,k?s:t]),q.fireWith(m,[x,y]),j&&(n.trigger("ajaxComplete",[x,l]),--p.active||p.event.trigger("ajaxStop"))}typeof a=="object"&&(c=a,a=b),c=c||{};var d,e,f,g,h,i,j,k,l=p.ajaxSetup({},c),m=l.context||l,n=m!==l&&(m.nodeType||m instanceof p)?p(m):p.event,o=p.Deferred(),q=p.Callbacks("once memory"),r=l.statusCode||{},t={},u={},v=0,w="canceled",x={readyState:0,setRequestHeader:function(a,b){if(!v){var c=a.toLowerCase();a=u[c]=u[c]||a,t[a]=b}return this},getAllResponseHeaders:function(){return v===2?e:null},getResponseHeader:function(a){var c;if(v===2){if(!f){f={};while(c=cm.exec(e))f[c[1].toLowerCase()]=c[2]}c=f[a.toLowerCase()]}return c===b?null:c},overrideMimeType:function(a){return v||(l.mimeType=a),this},abort:function(a){return a=a||w,g&&g.abort(a),y(0,a),this}};o.promise(x),x.success=x.done,x.error=x.fail,x.complete=q.add,x.statusCode=function(a){if(a){var b;if(v<2)for(b in a)r[b]=[r[b],a[b]];else b=a[x.status],x.always(b)}return this},l.url=((a||l.url)+"").replace(cl,"").replace(cp,cj[1]+"//"),l.dataTypes=p.trim(l.dataType||"*").toLowerCase().split(s),l.crossDomain==null&&(i=ct.exec(l.url.toLowerCase())||!1,l.crossDomain=i&&i.join(":")+(i[3]?"":i[1]==="http:"?80:443)!==cj.join(":")+(cj[3]?"":cj[1]==="http:"?80:443)),l.data&&l.processData&&typeof l.data!="string"&&(l.data=p.param(l.data,l.traditional)),cA(cv,l,c,x);if(v===2)return x;j=l.global,l.type=l.type.toUpperCase(),l.hasContent=!co.test(l.type),j&&p.active++===0&&p.event.trigger("ajaxStart");if(!l.hasContent){l.data&&(l.url+=(cq.test(l.url)?"&":"?")+l.data,delete l.data),d=l.url;if(l.cache===!1){var z=p.now(),A=l.url.replace(cs,"$1_="+z);l.url=A+(A===l.url?(cq.test(l.url)?"&":"?")+"_="+z:"")}}(l.data&&l.hasContent&&l.contentType!==!1||c.contentType)&&x.setRequestHeader("Content-Type",l.contentType),l.ifModified&&(d=d||l.url,p.lastModified[d]&&x.setRequestHeader("If-Modified-Since",p.lastModified[d]),p.etag[d]&&x.setRequestHeader("If-None-Match",p.etag[d])),x.setRequestHeader("Accept",l.dataTypes[0]&&l.accepts[l.dataTypes[0]]?l.accepts[l.dataTypes[0]]+(l.dataTypes[0]!=="*"?", "+cx+"; q=0.01":""):l.accepts["*"]);for(k in l.headers)x.setRequestHeader(k,l.headers[k]);if(!l.beforeSend||l.beforeSend.call(m,x,l)!==!1&&v!==2){w="abort";for(k in{success:1,error:1,complete:1})x[k](l[k]);g=cA(cw,l,c,x);if(!g)y(-1,"No Transport");else{x.readyState=1,j&&n.trigger("ajaxSend",[x,l]),l.async&&l.timeout>0&&(h=setTimeout(function(){x.abort("timeout")},l.timeout));try{v=1,g.send(t,y)}catch(B){if(v<2)y(-1,B);else throw B}}return x}return x.abort()},active:0,lastModified:{},etag:{}});var cE=[],cF=/\?/,cG=/(=)\?(?=&|$)|\?\?/,cH=p.now();p.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=cE.pop()||p.expando+"_"+cH++;return this[a]=!0,a}}),p.ajaxPrefilter("json jsonp",function(c,d,e){var f,g,h,i=c.data,j=c.url,k=c.jsonp!==!1,l=k&&cG.test(j),m=k&&!l&&typeof i=="string"&&!(c.contentType||"").indexOf("application/x-www-form-urlencoded")&&cG.test(i);if(c.dataTypes[0]==="jsonp"||l||m)return f=c.jsonpCallback=p.isFunction(c.jsonpCallback)?c.jsonpCallback():c.jsonpCallback,g=a[f],l?c.url=j.replace(cG,"$1"+f):m?c.data=i.replace(cG,"$1"+f):k&&(c.url+=(cF.test(j)?"&":"?")+c.jsonp+"="+f),c.converters["script json"]=function(){return h||p.error(f+" was not called"),h[0]},c.dataTypes[0]="json",a[f]=function(){h=arguments},e.always(function(){a[f]=g,c[f]&&(c.jsonpCallback=d.jsonpCallback,cE.push(f)),h&&p.isFunction(g)&&g(h[0]),h=g=b}),"script"}),p.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(a){return p.globalEval(a),a}}}),p.ajaxPrefilter("script",function(a){a.cache===b&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),p.ajaxTransport("script",function(a){if(a.crossDomain){var c,d=e.head||e.getElementsByTagName("head")[0]||e.documentElement;return{send:function(f,g){c=e.createElement("script"),c.async="async",a.scriptCharset&&(c.charset=a.scriptCharset),c.src=a.url,c.onload=c.onreadystatechange=function(a,e){if(e||!c.readyState||/loaded|complete/.test(c.readyState))c.onload=c.onreadystatechange=null,d&&c.parentNode&&d.removeChild(c),c=b,e||g(200,"success")},d.insertBefore(c,d.firstChild)},abort:function(){c&&c.onload(0,1)}}}});var cI,cJ=a.ActiveXObject?function(){for(var a in cI)cI[a](0,1)}:!1,cK=0;p.ajaxSettings.xhr=a.ActiveXObject?function(){return!this.isLocal&&cL()||cM()}:cL,function(a){p.extend(p.support,{ajax:!!a,cors:!!a&&"withCredentials"in a})}(p.ajaxSettings.xhr()),p.support.ajax&&p.ajaxTransport(function(c){if(!c.crossDomain||p.support.cors){var d;return{send:function(e,f){var g,h,i=c.xhr();c.username?i.open(c.type,c.url,c.async,c.username,c.password):i.open(c.type,c.url,c.async);if(c.xhrFields)for(h in c.xhrFields)i[h]=c.xhrFields[h];c.mimeType&&i.overrideMimeType&&i.overrideMimeType(c.mimeType),!c.crossDomain&&!e["X-Requested-With"]&&(e["X-Requested-With"]="XMLHttpRequest");try{for(h in e)i.setRequestHeader(h,e[h])}catch(j){}i.send(c.hasContent&&c.data||null),d=function(a,e){var h,j,k,l,m;try{if(d&&(e||i.readyState===4)){d=b,g&&(i.onreadystatechange=p.noop,cJ&&delete cI[g]);if(e)i.readyState!==4&&i.abort();else{h=i.status,k=i.getAllResponseHeaders(),l={},m=i.responseXML,m&&m.documentElement&&(l.xml=m);try{l.text=i.responseText}catch(a){}try{j=i.statusText}catch(n){j=""}!h&&c.isLocal&&!c.crossDomain?h=l.text?200:404:h===1223&&(h=204)}}}catch(o){e||f(-1,o)}l&&f(h,j,l,k)},c.async?i.readyState===4?setTimeout(d,0):(g=++cK,cJ&&(cI||(cI={},p(a).unload(cJ)),cI[g]=d),i.onreadystatechange=d):d()},abort:function(){d&&d(0,1)}}}});var cN,cO,cP=/^(?:toggle|show|hide)$/,cQ=new RegExp("^(?:([-+])=|)("+q+")([a-z%]*)$","i"),cR=/queueHooks$/,cS=[cY],cT={"*":[function(a,b){var c,d,e=this.createTween(a,b),f=cQ.exec(b),g=e.cur(),h=+g||0,i=1,j=20;if(f){c=+f[2],d=f[3]||(p.cssNumber[a]?"":"px");if(d!=="px"&&h){h=p.css(e.elem,a,!0)||c||1;do i=i||".5",h=h/i,p.style(e.elem,a,h+d);while(i!==(i=e.cur()/g)&&i!==1&&--j)}e.unit=d,e.start=h,e.end=f[1]?h+(f[1]+1)*c:c}return e}]};p.Animation=p.extend(cW,{tweener:function(a,b){p.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");var c,d=0,e=a.length;for(;d<e;d++)c=a[d],cT[c]=cT[c]||[],cT[c].unshift(b)},prefilter:function(a,b){b?cS.unshift(a):cS.push(a)}}),p.Tween=cZ,cZ.prototype={constructor:cZ,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(p.cssNumber[c]?"":"px")},cur:function(){var a=cZ.propHooks[this.prop];return a&&a.get?a.get(this):cZ.propHooks._default.get(this)},run:function(a){var b,c=cZ.propHooks[this.prop];return this.options.duration?this.pos=b=p.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):cZ.propHooks._default.set(this),this}},cZ.prototype.init.prototype=cZ.prototype,cZ.propHooks={_default:{get:function(a){var b;return a.elem[a.prop]==null||!!a.elem.style&&a.elem.style[a.prop]!=null?(b=p.css(a.elem,a.prop,!1,""),!b||b==="auto"?0:b):a.elem[a.prop]},set:function(a){p.fx.step[a.prop]?p.fx.step[a.prop](a):a.elem.style&&(a.elem.style[p.cssProps[a.prop]]!=null||p.cssHooks[a.prop])?p.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},cZ.propHooks.scrollTop=cZ.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},p.each(["toggle","show","hide"],function(a,b){var c=p.fn[b];p.fn[b]=function(d,e,f){return d==null||typeof d=="boolean"||!a&&p.isFunction(d)&&p.isFunction(e)?c.apply(this,arguments):this.animate(c$(b,!0),d,e,f)}}),p.fn.extend({fadeTo:function(a,b,c,d){return this.filter(bZ).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=p.isEmptyObject(a),f=p.speed(b,c,d),g=function(){var b=cW(this,p.extend({},a),f);e&&b.stop(!0)};return e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,c,d){var e=function(a){var b=a.stop;delete a.stop,b(d)};return typeof a!="string"&&(d=c,c=a,a=b),c&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,c=a!=null&&a+"queueHooks",f=p.timers,g=p._data(this);if(c)g[c]&&g[c].stop&&e(g[c]);else for(c in g)g[c]&&g[c].stop&&cR.test(c)&&e(g[c]);for(c=f.length;c--;)f[c].elem===this&&(a==null||f[c].queue===a)&&(f[c].anim.stop(d),b=!1,f.splice(c,1));(b||!d)&&p.dequeue(this,a)})}}),p.each({slideDown:c$("show"),slideUp:c$("hide"),slideToggle:c$("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){p.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),p.speed=function(a,b,c){var d=a&&typeof a=="object"?p.extend({},a):{complete:c||!c&&b||p.isFunction(a)&&a,duration:a,easing:c&&b||b&&!p.isFunction(b)&&b};d.duration=p.fx.off?0:typeof d.duration=="number"?d.duration:d.duration in p.fx.speeds?p.fx.speeds[d.duration]:p.fx.speeds._default;if(d.queue==null||d.queue===!0)d.queue="fx";return d.old=d.complete,d.complete=function(){p.isFunction(d.old)&&d.old.call(this),d.queue&&p.dequeue(this,d.queue)},d},p.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},p.timers=[],p.fx=cZ.prototype.init,p.fx.tick=function(){var a,b=p.timers,c=0;for(;c<b.length;c++)a=b[c],!a()&&b[c]===a&&b.splice(c--,1);b.length||p.fx.stop()},p.fx.timer=function(a){a()&&p.timers.push(a)&&!cO&&(cO=setInterval(p.fx.tick,p.fx.interval))},p.fx.interval=13,p.fx.stop=function(){clearInterval(cO),cO=null},p.fx.speeds={slow:600,fast:200,_default:400},p.fx.step={},p.expr&&p.expr.filters&&(p.expr.filters.animated=function(a){return p.grep(p.timers,function(b){return a===b.elem}).length});var c_=/^(?:body|html)$/i;p.fn.offset=function(a){if(arguments.length)return a===b?this:this.each(function(b){p.offset.setOffset(this,a,b)});var c,d,e,f,g,h,i,j={top:0,left:0},k=this[0],l=k&&k.ownerDocument;if(!l)return;return(d=l.body)===k?p.offset.bodyOffset(k):(c=l.documentElement,p.contains(c,k)?(typeof k.getBoundingClientRect!="undefined"&&(j=k.getBoundingClientRect()),e=da(l),f=c.clientTop||d.clientTop||0,g=c.clientLeft||d.clientLeft||0,h=e.pageYOffset||c.scrollTop,i=e.pageXOffset||c.scrollLeft,{top:j.top+h-f,left:j.left+i-g}):j)},p.offset={bodyOffset:function(a){var b=a.offsetTop,c=a.offsetLeft;return p.support.doesNotIncludeMarginInBodyOffset&&(b+=parseFloat(p.css(a,"marginTop"))||0,c+=parseFloat(p.css(a,"marginLeft"))||0),{top:b,left:c}},setOffset:function(a,b,c){var d=p.css(a,"position");d==="static"&&(a.style.position="relative");var e=p(a),f=e.offset(),g=p.css(a,"top"),h=p.css(a,"left"),i=(d==="absolute"||d==="fixed")&&p.inArray("auto",[g,h])>-1,j={},k={},l,m;i?(k=e.position(),l=k.top,m=k.left):(l=parseFloat(g)||0,m=parseFloat(h)||0),p.isFunction(b)&&(b=b.call(a,c,f)),b.top!=null&&(j.top=b.top-f.top+l),b.left!=null&&(j.left=b.left-f.left+m),"using"in b?b.using.call(a,j):e.css(j)}},p.fn.extend({position:function(){if(!this[0])return;var a=this[0],b=this.offsetParent(),c=this.offset(),d=c_.test(b[0].nodeName)?{top:0,left:0}:b.offset();return c.top-=parseFloat(p.css(a,"marginTop"))||0,c.left-=parseFloat(p.css(a,"marginLeft"))||0,d.top+=parseFloat(p.css(b[0],"borderTopWidth"))||0,d.left+=parseFloat(p.css(b[0],"borderLeftWidth"))||0,{top:c.top-d.top,left:c.left-d.left}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||e.body;while(a&&!c_.test(a.nodeName)&&p.css(a,"position")==="static")a=a.offsetParent;return a||e.body})}}),p.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,c){var d=/Y/.test(c);p.fn[a]=function(e){return p.access(this,function(a,e,f){var g=da(a);if(f===b)return g?c in g?g[c]:g.document.documentElement[e]:a[e];g?g.scrollTo(d?p(g).scrollLeft():f,d?f:p(g).scrollTop()):a[e]=f},a,e,arguments.length,null)}}),p.each({Height:"height",Width:"width"},function(a,c){p.each({padding:"inner"+a,content:c,"":"outer"+a},function(d,e){p.fn[e]=function(e,f){var g=arguments.length&&(d||typeof e!="boolean"),h=d||(e===!0||f===!0?"margin":"border");return p.access(this,function(c,d,e){var f;return p.isWindow(c)?c.document.documentElement["client"+a]:c.nodeType===9?(f=c.documentElement,Math.max(c.body["scroll"+a],f["scroll"+a],c.body["offset"+a],f["offset"+a],f["client"+a])):e===b?p.css(c,d,e,h):p.style(c,d,e,h)},c,g?e:b,g,null)}})}),a.jQuery=a.$=p,typeof define=="function"&&define.amd&&define.amd.jQuery&&define("jquery",[],function(){return p})})(window);
/** @license Hyphenator 4.2.0 - client side hyphenation for webbrowsers
 *  Copyright (C) 2013  Mathias Nater, Zürich (mathias at mnn dot ch)
 *  Project and Source hosted on http://code.google.com/p/hyphenator/
 * 
 *  This JavaScript code is free software: you can redistribute
 *  it and/or modify it under the terms of the GNU Lesser
 *  General Public License (GNU LGPL) as published by the Free Software
 *  Foundation, either version 3 of the License, or (at your option)
 *  any later version.  The code is distributed WITHOUT ANY WARRANTY;
 *  without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.
 *
 *  As additional permission under GNU GPL version 3 section 7, you
 *  may distribute non-source (e.g., minimized or compacted) forms of
 *  that code without the copy of the GNU GPL normally required by
 *  section 4, provided you include this license notice and a URL
 *  through which recipients can access the Corresponding Source.
 *
 * 
 *  Hyphenator.js contains code from Bram Steins hypher.js-Project:
 *  https://github.com/bramstein/Hypher
 *  
 *  Code from this project is marked in the source and belongs 
 *  to the following license:
 *  
 *  Copyright (c) 2011, Bram Stein
 *  All rights reserved.
 *  
 *  Redistribution and use in source and binary forms, with or without 
 *  modification, are permitted provided that the following conditions 
 *  are met:
 *   
 *   1. Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer. 
 *   2. Redistributions in binary form must reproduce the above copyright 
 *      notice, this list of conditions and the following disclaimer in the 
 *      documentation and/or other materials provided with the distribution. 
 *   3. The name of the author may not be used to endorse or promote products 
 *      derived from this software without specific prior written permission. 
 *  
 *  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED 
 *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO 
 *  EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY 
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *  
 */

/* 
 *  Comments are jsdoctoolkit formatted. See http://code.google.com/p/jsdoc-toolkit/
 */

/* The following comment is for JSLint: */
/*global window */
/*jslint browser: true */

/**
 * @constructor
 * @description Provides all functionality to do hyphenation, except the patterns that are loaded
 * externally.
 * @author Mathias Nater, <a href = "mailto:mathias@mnn.ch">mathias@mnn.ch</a>
 * @version 4.2.0
 * @namespace Holds all methods and properties
 * @example
 * &lt;script src = "Hyphenator.js" type = "text/javascript"&gt;&lt;/script&gt;
 * &lt;script type = "text/javascript"&gt;
 *   Hyphenator.run();
 * &lt;/script&gt;
 */
var Hyphenator = (function (window) {
    'use strict';

    /**
     * @name Hyphenator-contextWindow
     * @private
     * @description
     * contextWindow stores the window for the document to be hyphenated.
     * If there are frames this will change.
     * So use contextWindow instead of window!
     */
    var contextWindow = window,

        /**
         * @name Hyphenator-supportedLangs
         * @description
         * A key-value object that stores supported languages and meta data.
         * The key is the bcp47 code of the language and the value
         * is an object containing following informations about the language:
         * file: filename of the pattern file,
         * script: script type of the language (e.g. 'latin' for english), this type is abbreviated by an id,
         * prompt: the sentence prompted to the user, if Hyphenator.js doesn't find a language hint.
         * @type {Object.<string>, Object>}
         * @private
         * @example
         * Check if language lang is supported:
         * if (supportedLangs.hasOwnProperty(lang))
         */
        supportedLangs = (function () {
            var r = {},
                o = function (code, file, script, prompt) {
                    r[code] = {'file': file, 'script': script, 'prompt': prompt};
                };

            //latin:0, cyrillic: 1, arabic: 2, armenian:3, bengali: 4, devangari: 5, greek: 6
            //gujarati: 7, kannada: 8, lao: 9, malayalam: 10, oriya: 11, persian: 12, punjabi: 13, tamil: 14, telugu: 15
            //
            //(language code, file name, script, prompt)
            o('be', 'be.js', 1, 'Мова гэтага сайта не можа быць вызначаны аўтаматычна. Калі ласка пакажыце мову:');
            o('ca', 'ca.js', 0, '');
            o('cs', 'cs.js', 0, 'Jazyk této internetové stránky nebyl automaticky rozpoznán. Určete prosím její jazyk:');
            o('da', 'da.js', 0, 'Denne websides sprog kunne ikke bestemmes. Angiv venligst sprog:');
            o('bn', 'bn.js', 4, '');
            o('de', 'de.js', 0, 'Die Sprache dieser Webseite konnte nicht automatisch bestimmt werden. Bitte Sprache angeben:');
            o('el', 'el-monoton.js', 6, '');
            o('el-monoton', 'el-monoton.js', 6, '');
            o('el-polyton', 'el-polyton.js', 6, '');
            o('en', 'en-us.js', 0, 'The language of this website could not be determined automatically. Please indicate the main language:');
            o('en-gb', 'en-gb.js', 0, 'The language of this website could not be determined automatically. Please indicate the main language:');
            o('en-us', 'en-us.js', 0, 'The language of this website could not be determined automatically. Please indicate the main language:');
            o('eo', 'eo.js', 0, 'La lingvo de ĉi tiu retpaĝo ne rekoneblas aŭtomate. Bonvolu indiki ĝian ĉeflingvon:');
            o('es', 'es.js', 0, 'El idioma del sitio no pudo determinarse autom%E1ticamente. Por favor, indique el idioma principal:');
            o('et', 'et.js', 0, 'Veebilehe keele tuvastamine ebaõnnestus, palun valige kasutatud keel:');
            o('fi', 'fi.js', 0, 'Sivun kielt%E4 ei tunnistettu automaattisesti. M%E4%E4rit%E4 sivun p%E4%E4kieli:');
            o('fr', 'fr.js', 0, 'La langue de ce site n%u2019a pas pu %EAtre d%E9termin%E9e automatiquement. Veuillez indiquer une langue, s.v.p.%A0:');
            o('grc', 'grc.js', 6, '');
            o('gu', 'gu.js', 7, '');
            o('hi', 'hi.js', 5, '');
            o('hu', 'hu.js', 0, 'A weboldal nyelvét nem sikerült automatikusan megállapítani. Kérem adja meg a nyelvet:');
            o('hy', 'hy.js', 3, 'Չհաջողվեց հայտնաբերել այս կայքի լեզուն։ Խնդրում ենք նշեք հիմնական լեզուն՝');
            o('it', 'it.js', 0, 'Lingua del sito sconosciuta. Indicare una lingua, per favore:');
            o('kn', 'kn.js', 8, 'ಜಾಲ ತಾಣದ ಭಾಷೆಯನ್ನು ನಿರ್ಧರಿಸಲು ಸಾಧ್ಯವಾಗುತ್ತಿಲ್ಲ. ದಯವಿಟ್ಟು ಮುಖ್ಯ ಭಾಷೆಯನ್ನು ಸೂಚಿಸಿ:');
            o('la', 'la.js', 0, '');
            o('lt', 'lt.js', 0, 'Nepavyko automatiškai nustatyti šios svetainės kalbos. Prašome įvesti kalbą:');
            o('lv', 'lv.js', 0, 'Šīs lapas valodu nevarēja noteikt automātiski. Lūdzu norādiet pamata valodu:');
            o('ml', 'ml.js', 10, 'ഈ വെ%u0D2C%u0D4D%u200Cസൈറ്റിന്റെ ഭാഷ കണ്ടുപിടിയ്ക്കാ%u0D28%u0D4D%u200D കഴിഞ്ഞില്ല. ഭാഷ ഏതാണെന്നു തിരഞ്ഞെടുക്കുക:');
            o('nb', 'nb-no.js', 0, 'Nettstedets språk kunne ikke finnes automatisk. Vennligst oppgi språk:');
            o('no', 'nb-no.js', 0, 'Nettstedets språk kunne ikke finnes automatisk. Vennligst oppgi språk:');
            o('nb-no', 'nb-no.js', 0, 'Nettstedets språk kunne ikke finnes automatisk. Vennligst oppgi språk:');
            o('nl', 'nl.js', 0, 'De taal van deze website kan niet automatisch worden bepaald. Geef de hoofdtaal op:');
            o('or', 'or.js', 11, '');
            o('pa', 'pa.js', 13, '');
            o('pl', 'pl.js', 0, 'Języka tej strony nie można ustalić automatycznie. Proszę wskazać język:');
            o('pt', 'pt.js', 0, 'A língua deste site não pôde ser determinada automaticamente. Por favor indique a língua principal:');
            o('ru', 'ru.js', 1, 'Язык этого сайта не может быть определен автоматически. Пожалуйста укажите язык:');
            o('sk', 'sk.js', 0, '');
            o('sl', 'sl.js', 0, 'Jezika te spletne strani ni bilo mogoče samodejno določiti. Prosim navedite jezik:');
            o('sr-latn', 'sr-latn.js', 0, 'Jezika te spletne strani ni bilo mogoče samodejno določiti. Prosim navedite jezik:');
            o('sv', 'sv.js', 0, 'Spr%E5ket p%E5 den h%E4r webbplatsen kunde inte avg%F6ras automatiskt. V%E4nligen ange:');
            o('ta', 'ta.js', 14, '');
            o('te', 'te.js', 15, '');
            o('tr', 'tr.js', 0, 'Bu web sitesinin dili otomatik olarak tespit edilememiştir. Lütfen dökümanın dilini seçiniz%A0:');
            o('uk', 'uk.js', 1, 'Мова цього веб-сайту не може бути визначена автоматично. Будь ласка, вкажіть головну мову:');
            o('ro', 'ro.js', 0, 'Limba acestui sit nu a putut fi determinată automat. Alege limba principală:');

            return r;
        }()),


        /**
         * @name Hyphenator-basePath
         * @description
         * A string storing the basepath from where Hyphenator.js was loaded.
         * This is used to load the patternfiles.
         * The basepath is determined dynamically by searching all script-tags for Hyphenator.js
         * If the path cannot be determined http://hyphenator.googlecode.com/svn/trunk/ is used as fallback.
         * @type {string}
         * @private
         * @see Hyphenator-loadPatterns
         */
        basePath = (function () {
            var s = contextWindow.document.getElementsByTagName('script'), i = 0, p, src, t = s[i], r = '';
            while (!!t) {
                if (!!t.src) {
                    src = t.src;
                    p = src.indexOf('Hyphenator.js');
                    if (p !== -1) {
                        r = src.substring(0, p);
                    }
                }
                i += 1;
                t = s[i];
            }
            return !!r ? r : 'http://hyphenator.googlecode.com/svn/trunk/';
        }()),

        /**
         * @name Hyphenator-isLocal
         * @private
         * @description
         * isLocal is true, if Hyphenator is loaded from the same domain, as the webpage, but false, if
         * it's loaded from an external source (i.e. directly from google.code)
         */
        isLocal = (function () {
            var re = false;
            if (window.location.href.indexOf(basePath) !== -1) {
                re = true;
            }
            return re;
        }()),

        /**
         * @name Hyphenator-documentLoaded
         * @private
         * @description
         * documentLoaded is true, when the DOM has been loaded. This is set by runOnContentLoaded
         */
        documentLoaded = false,

        /**
         * @name Hyphenator-persistentConfig
         * @private
         * @description
         * if persistentConfig is set to true (defaults to false), config options and the state of the 
         * toggleBox are stored in DOM-storage (according to the storage-setting). So they haven't to be
         * set for each page.
         */
        persistentConfig = false,

        /**
         * @name Hyphenator-doFrames
         * @private
         * @description
         * switch to control if frames/iframes should be hyphenated, too
         * defaults to false (frames are a bag of hurt!)
         */
        doFrames = false,

        /**
         * @name Hyphenator-dontHyphenate
         * @description
         * A key-value object containing all html-tags whose content should not be hyphenated
         * @type {Object.<string,boolean>}
         * @private
         * @see Hyphenator-hyphenateElement
         */
        dontHyphenate = {'script': true, 'code': true, 'pre': true, 'img': true, 'br': true, 'samp': true, 'kbd': true, 'var': true, 'abbr': true, 'acronym': true, 'sub': true, 'sup': true, 'button': true, 'option': true, 'label': true, 'textarea': true, 'input': true, 'math': true, 'svg': true},

        /**
         * @name Hyphenator-enableCache
         * @description
         * A variable to set if caching is enabled or not
         * @type boolean
         * @default true
         * @private
         * @see Hyphenator.config
         * @see hyphenateWord
         */
        enableCache = true,

        /**
         * @name Hyphenator-storageType
         * @description
         * A variable to define what html5-DOM-Storage-Method is used ('none', 'local' or 'session')
         * @type {string}
         * @default 'local'
         * @private
         * @see Hyphenator.config
         */
        storageType = 'local',

        /**
         * @name Hyphenator-storage
         * @description
         * An alias to the storage-Method defined in storageType.
         * Set by Hyphenator.run()
         * @type {Object|undefined}
         * @default null
         * @private
         * @see Hyphenator.run
         */
        storage,

        /**
         * @name Hyphenator-enableReducedPatternSet
         * @description
         * A variable to set if storing the used patterns is set
         * @type boolean
         * @default false
         * @private
         * @see Hyphenator.config
         * @see hyphenateWord
         * @see Hyphenator.getRedPatternSet
         */
        enableReducedPatternSet = false,

        /**
         * @name Hyphenator-enableRemoteLoading
         * @description
         * A variable to set if pattern files should be loaded remotely or not
         * @type boolean
         * @default true
         * @private
         * @see Hyphenator.config
         * @see Hyphenator-loadPatterns
         */
        enableRemoteLoading = true,

        /**
         * @name Hyphenator-displayToggleBox
         * @description
         * A variable to set if the togglebox should be displayed or not
         * @type boolean
         * @default false
         * @private
         * @see Hyphenator.config
         * @see Hyphenator-toggleBox
         */
        displayToggleBox = false,

        /**
         * @name Hyphenator-onError
         * @description
         * A function that can be called upon an error.
         * @see Hyphenator.config
         * @type {function(Object)}
         * @private
         */
        onError = function (e) {
            window.alert("Hyphenator.js says:\n\nAn Error occurred:\n" + e.message);
        },

        /**
         * @name Hyphenator-createElem
         * @description
         * A function alias to document.createElementNS or document.createElement
         * @type {function(string, Object)}
         * @private
         */
        createElem = function (tagname, context) {
            context = context || contextWindow;
            var el;
            if (window.document.createElementNS) {
                el = context.document.createElementNS('http://www.w3.org/1999/xhtml', tagname);
            } else if (window.document.createElement) {
                el = context.document.createElement(tagname);
            }
            return el;
        },

        /**
         * @name Hyphenator-css3
         * @description
         * A variable to set if css3 hyphenation should be used
         * @type boolean
         * @default false
         * @private
         * @see Hyphenator.config
         */
        css3 = false,

        /**
         * @name Hyphenator-css3_hsupport
         * @description
         * A generated object containing information for CSS3-hyphenation support
         * {
         *   support: boolean,
         *   property: <the property name to access hyphen-settings>,
         *   languages: <an object containing supported languages>
         * }
         * @type object
         * @default undefined
         * @private
         * @see Hyphenator-css3_gethsupport
         */
        css3_h9n,

        /**
         * @name Hyphenator-css3_gethsupport
         * @description
         * This function sets Hyphenator-css3_h9n for the current UA
         * @type function
         * @private
         * @see Hyphenator-css3_h9n
         */
        css3_gethsupport = function () {
            var s,
                createLangSupportChecker = function (prefix) {
                    var testStrings = [
                        //latin: 0
                        'aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz',
                        //cyrillic: 1
                        'абвгдеёжзийклмнопрстуфхцчшщъыьэюя',
                        //arabic: 2
                        'أبتثجحخدذرزسشصضطظعغفقكلمنهوي',
                        //armenian: 3
                        'աբգդեզէըթժիլխծկհձղճմյնշոչպջռսվտրցւփքօֆ',
                        //bengali: 4
                        'ঁংঃঅআইঈউঊঋঌএঐওঔকখগঘঙচছজঝঞটঠডঢণতথদধনপফবভমযরলশষসহ়ঽািীুূৃৄেৈোৌ্ৎৗড়ঢ়য়ৠৡৢৣ',
                        //devangari: 5
                        'ँंःअआइईउऊऋऌएऐओऔकखगघङचछजझञटठडढणतथदधनपफबभमयरलळवशषसहऽािीुूृॄेैोौ्॒॑ॠॡॢॣ',
                        //greek: 6
                        'αβγδεζηθικλμνξοπρσςτυφχψω',
                        //gujarati: 7
                        'બહઅઆઇઈઉઊઋૠએઐઓઔાિીુૂૃૄૢૣેૈોૌકખગઘઙચછજઝઞટઠડઢણતથદધનપફસભમયરલળવશષ',
                        //kannada: 8
                        'ಂಃಅಆಇಈಉಊಋಌಎಏಐಒಓಔಕಖಗಘಙಚಛಜಝಞಟಠಡಢಣತಥದಧನಪಫಬಭಮಯರಱಲಳವಶಷಸಹಽಾಿೀುೂೃೄೆೇೈೊೋೌ್ೕೖೞೠೡ',
                        //lao: 9
                        'ກຂຄງຈຊຍດຕຖທນບປຜຝພຟມຢຣລວສຫອຮະັາິີຶືຸູົຼເແໂໃໄ່້໊໋ໜໝ',
                        //malayalam: 10
                        'ംഃഅആഇഈഉഊഋഌഎഏഐഒഓഔകഖഗഘങചഛജഝഞടഠഡഢണതഥദധനപഫബഭമയരറലളഴവശഷസഹാിീുൂൃെേൈൊോൌ്ൗൠൡൺൻർൽൾൿ',
                        //oriya: 11
                        'ଁଂଃଅଆଇଈଉଊଋଌଏଐଓଔକଖଗଘଙଚଛଜଝଞଟଠଡଢଣତଥଦଧନପଫବଭମଯରଲଳଵଶଷସହାିୀୁୂୃେୈୋୌ୍ୗୠୡ',
                        //persian: 12
                        'أبتثجحخدذرزسشصضطظعغفقكلمنهوي',
                        //punjabi: 13
                        'ਁਂਃਅਆਇਈਉਊਏਐਓਔਕਖਗਘਙਚਛਜਝਞਟਠਡਢਣਤਥਦਧਨਪਫਬਭਮਯਰਲਲ਼ਵਸ਼ਸਹਾਿੀੁੂੇੈੋੌ੍ੰੱ',
                        //tamil: 14
                        'ஃஅஆஇஈஉஊஎஏஐஒஓஔகஙசஜஞடணதநனபமயரறலளழவஷஸஹாிீுூெேைொோௌ்ௗ',
                        //telugu: 15
                        'ఁంఃఅఆఇఈఉఊఋఌఎఏఐఒఓఔకఖగఘఙచఛజఝఞటఠడఢణతథదధనపఫబభమయరఱలళవశషసహాిీుూృౄెేైొోౌ్ౕౖౠౡ'
                    ],
                        f = function (lang) {
                            var shadow,
                                computedHeight,
                                bdy = window.document.getElementsByTagName('body')[0],
                                r = false;

                            if (supportedLangs.hasOwnProperty(lang)) {
                                //create and append shadow-test-element
                                shadow = createElem('div', window);
                                shadow.id = 'Hyphenator_LanguageChecker';
                                shadow.style.width = '5em';
                                shadow.style[prefix] = 'auto';
                                shadow.style.hyphens = 'auto';
                                shadow.style.fontSize = '12px';
                                shadow.style.lineHeight = '12px';
                                shadow.style.visibility = 'hidden';
                                shadow.lang = lang;
                                shadow.style['-webkit-locale'] = "'" + lang + "'";
                                shadow.innerHTML = testStrings[supportedLangs[lang].script];
                                bdy.appendChild(shadow);
                                //measure its height
                                computedHeight = shadow.offsetHeight;
                                //remove shadow element
                                bdy.removeChild(shadow);
                                r = (computedHeight > 12) ? true : false;
                            } else {
                                r = false;
                            }
                            return r;
                        };
                    return f;
                },
                r = {
                    support: false,
                    property: '',
                    checkLangSupport: function () {}
                };

            if (window.getComputedStyle) {
                s = contextWindow.getComputedStyle(contextWindow.document.getElementsByTagName('body')[0], null);
            } else {
                //ancient Browsers don't support CSS3 anyway
                css3_h9n = r;
                return;
            }

            if (s['-webkit-hyphens'] !== undefined) {
                r.support = true;
                r.property = '-webkit-hyphens';
                r.checkLangSupport = createLangSupportChecker('-webkit-hyphens');
            } else if (s.MozHyphens !== undefined) {
                r.support = true;
                r.property = '-moz-hyphens';
                r.checkLangSupport = createLangSupportChecker('MozHyphens');
            } else if (s['-ms-hyphens'] !== undefined) {
                r.support = true;
                r.property = '-ms-hyphens';
                r.checkLangSupport = createLangSupportChecker('-ms-hyphens');
            }
            css3_h9n = r;
        },

        /**
         * @name Hyphenator-hyphenateClass
         * @description
         * A string containing the css-class-name for the hyphenate class
         * @type {string}
         * @default 'hyphenate'
         * @private
         * @example
         * &lt;p class = "hyphenate"&gt;Text&lt;/p&gt;
         * @see Hyphenator.config
         */
        hyphenateClass = 'hyphenate',

        /**
         * @name Hyphenator-classPrefix
         * @description
         * A string containing a unique className prefix to be used
         * whenever Hyphenator sets a CSS-class
         * @type {string}
         * @private
         */
        classPrefix = 'Hyphenator' + Math.round(Math.random() * 1000),

        /**
         * @name Hyphenator-hideClass
         * @description
         * The name of the class that hides elements
         * @type {string}
         * @private
         */
        hideClass = classPrefix + 'hide',

        /**
         * @name Hyphenator-hideClassRegExp
         * @description
         * RegExp to remove hideClass from a list of classes
         * @type {RegExp}
         * @private
         */
        hideClassRegExp = new RegExp("\\s?\\b" + hideClass + "\\b", "g"),

        /**
         * @name Hyphenator-hideClass
         * @description
         * The name of the class that unhides elements
         * @type {string}
         * @private
         */
        unhideClass = classPrefix + 'unhide',

        /**
         * @name Hyphenator-hideClassRegExp
         * @description
         * RegExp to remove unhideClass from a list of classes
         * @type {RegExp}
         * @private
         */
        unhideClassRegExp = new RegExp("\\s?\\b" + unhideClass + "\\b", "g"),

        /**
         * @name Hyphenator-css3hyphenateClass
         * @description
         * The name of the class that hyphenates elements with css3
         * @type {string}
         * @private
         */
        css3hyphenateClass = classPrefix + 'css3hyphenate',

        /**
         * @name Hyphenator-css3hyphenateClass
         * @description
         * The var where CSSEdit class is stored
         * @type {Object}
         * @private
         */
        css3hyphenateClassHandle,

        /**
         * @name Hyphenator-dontHyphenateClass
         * @description
         * A string containing the css-class-name for elements that should not be hyphenated
         * @type {string}
         * @default 'donthyphenate'
         * @private
         * @example
         * &lt;p class = "donthyphenate"&gt;Text&lt;/p&gt;
         * @see Hyphenator.config
         */
        dontHyphenateClass = 'donthyphenate',

        /**
         * @name Hyphenator-min
         * @description
         * A number wich indicates the minimal length of words to hyphenate.
         * @type {number}
         * @default 6
         * @private
         * @see Hyphenator.config
         */
        min = 6,

        /**
         * @name Hyphenator-orphanControl
         * @description
         * Control how the last words of a line are handled:
         * level 1 (default): last word is hyphenated
         * level 2: last word is not hyphenated
         * level 3: last word is not hyphenated and last space is non breaking
         * @type {number}
         * @default 1
         * @private
         */
        orphanControl = 1,

        /**
         * @name Hyphenator-isBookmarklet
         * @description
         * Indicates if Hyphanetor runs as bookmarklet or not.
         * @type boolean
         * @default false
         * @private
         */
        isBookmarklet = (function () {
            var loc = null,
                re = false,
                scripts = contextWindow.document.getElementsByTagName('script'),
                i = 0,
                l = scripts.length;
            while (!re && i < l) {
                loc = scripts[i].getAttribute('src');
                if (!!loc && loc.indexOf('Hyphenator.js?bm=true') !== -1) {
                    re = true;
                }
                i += 1;
            }
            return re;
        }()),

        /**
         * @name Hyphenator-mainLanguage
         * @description
         * The general language of the document. In contrast to {@link Hyphenator-defaultLanguage},
         * mainLanguage is defined by the client (i.e. by the html or by a prompt).
         * @type {string|null}
         * @private
         * @see Hyphenator-autoSetMainLanguage
         */
        mainLanguage = null,

        /**
         * @name Hyphenator-defaultLanguage
         * @description
         * The language defined by the developper. This language setting is defined by a config option.
         * It is overwritten by any html-lang-attribute and only taken in count, when no such attribute can
         * be found (i.e. just before the prompt).
         * @type {string|null}
         * @private
         * @see Hyphenator-autoSetMainLanguage
         */
        defaultLanguage = '',


        /**
         * @name Hyphenator-elements
         * @description
         * An object holding all elements that have to be hyphenated. This var is filled by
         * {@link Hyphenator-gatherDocumentInfos}
         * @type {Array}
         * @private
         */
        elements = (function () {
            var Element = function (element) {
                this.element = element;
                this.hyphenated = false;
                this.treated = false; //collected but not hyphenated (dohyphenation is off)
            },
                ElementCollection = function () {
                    this.count = 0;
                    this.hyCount = 0;
                    this.list = {};
                };
            ElementCollection.prototype = {
                add: function (el, lang) {
                    if (!this.list.hasOwnProperty(lang)) {
                        this.list[lang] = [];
                    }
                    this.list[lang].push(new Element(el));
                    this.count += 1;
                },
                each: function (fn) {
                    var k;
                    for (k in this.list) {
                        if (this.list.hasOwnProperty(k)) {
                            if (fn.length === 2) {
                                fn(k, this.list[k]);
                            } else {
                                fn(this.list[k]);
                            }
                        }
                    }
                }
            };
            return new ElementCollection();
        }()),


        /**
         * @name Hyphenator-exceptions
         * @description
         * An object containing exceptions as comma separated strings for each language.
         * When the language-objects are loaded, their exceptions are processed, copied here and then deleted.
         * @see Hyphenator-prepareLanguagesObj
         * @type {Object}
         * @private
         */
        exceptions = {},

        /**
         * @name Hyphenator-docLanguages
         * @description
         * An object holding all languages used in the document. This is filled by
         * {@link Hyphenator-gatherDocumentInfos}
         * @type {Object}
         * @private
         */
        docLanguages = {},

        /**
         * @name Hyphenator-state
         * @description
         * A number that inidcates the current state of the script
         * 0: not initialized
         * 1: loading patterns
         * 2: ready
         * 3: hyphenation done
         * 4: hyphenation removed
         * @type {number}
         * @private
         */
        state = 0,

        /**
         * @name Hyphenator-url
         * @description
         * A string containing a RegularExpression to match URL's
         * @type {string}
         * @private
         */
        url = '(\\w*:\/\/)?((\\w*:)?(\\w*)@)?((([\\d]{1,3}\\.){3}([\\d]{1,3}))|((www\\.|[a-zA-Z]\\.)?[a-zA-Z0-9\\-\\.]+\\.([a-z]{2,4})))(:\\d*)?(\/[\\w#!:\\.?\\+=&%@!\\-]*)*',
        //      protocoll     usr     pwd                    ip               or                          host                 tld        port               path

        /**
         * @name Hyphenator-mail
         * @description
         * A string containing a RegularExpression to match mail-adresses
         * @type {string}
         * @private
         */
        mail = '[\\w-\\.]+@[\\w\\.]+',

        /**
         * @name Hyphenator-urlRE
         * @description
         * A RegularExpressions-Object for url- and mail adress matching
         * @type {RegExp}
         * @private
         */
        urlOrMailRE = new RegExp('(' + url + ')|(' + mail + ')', 'i'),

        /**
         * @name Hyphenator-zeroWidthSpace
         * @description
         * A string that holds a char.
         * Depending on the browser, this is the zero with space or an empty string.
         * zeroWidthSpace is used to break URLs
         * @type {string}
         * @private
         */
        zeroWidthSpace = (function () {
            var zws, ua = window.navigator.userAgent.toLowerCase();
            zws = String.fromCharCode(8203); //Unicode zero width space
            if (ua.indexOf('msie 6') !== -1) {
                zws = ''; //IE6 doesn't support zws
            }
            if (ua.indexOf('opera') !== -1 && ua.indexOf('version/10.00') !== -1) {
                zws = ''; //opera 10 on XP doesn't support zws
            }
            return zws;
        }()),

        /**
         * @name Hyphenator-onBeforeWordHyphenation
         * @description
         * A method to be called for each word to be hyphenated before it is hyphenated.
         * Takes the word as a first parameter and its language as a second parameter.
         * Returns a string that will replace the word to be hyphenated.
         * @see Hyphenator.config
         * @type {function()}
         * @private
         */
        onBeforeWordHyphenation = function (word) {
            return word;
        },

        /**
         * @name Hyphenator-onAfterWordHyphenation
         * @description
         * A method to be called for each word to be hyphenated after it is hyphenated.
         * Takes the word as a first parameter and its language as a second parameter.
         * Returns a string that will replace the word that has been hyphenated.
         * @see Hyphenator.config
         * @type {function()}
         * @private
         */
        onAfterWordHyphenation = function (word) {
            return word;
        },

        /**
         * @name Hyphenator-onHyphenationDone
         * @description
         * A method to be called, when the last element has been hyphenated
         * @see Hyphenator.config
         * @type {function()}
         * @private
         */
        onHyphenationDone = function () {},

        /**
         * @name Hyphenator-selectorFunction
         * @description
         * A function set by the user that has to return a HTMLNodeList or array of Elements to be hyphenated.
         * By default this is set to false so we can check if a selectorFunction is set…
         * @see Hyphenator.config
         * @type {function()}
         * @private
         */
        selectorFunction = false,

        /**
         * @name Hyphenator-mySelectorFunction
         * @description
         * A function that has to return a HTMLNodeList or array of Elements to be hyphenated.
         * By default it uses the classname ('hyphenate') to select the elements.
         * @type {function()}
         * @private
         */
        mySelectorFunction = function (hyphenateClass) {
            var tmp, el = [], i, l;
            if (window.document.getElementsByClassName) {
                el = contextWindow.document.getElementsByClassName(hyphenateClass);
            } else if (window.document.querySelectorAll) {
                el = contextWindow.document.querySelectorAll('.' + hyphenateClass);
            } else {
                tmp = contextWindow.document.getElementsByTagName('*');
                l = tmp.length;
                for (i = 0; i < l; i += 1) {
                    if (tmp[i].className.indexOf(hyphenateClass) !== -1 && tmp[i].className.indexOf(dontHyphenateClass) === -1) {
                        el.push(tmp[i]);
                    }
                }
            }
            return el;
        },

        /**
         * @name Hyphenator-selectElements
         * @description
         * A function that has to return a HTMLNodeList or array of Elements to be hyphenated.
         * It uses either selectorFunction set by the user (and adds a unique class to each element)
         * or the default mySelectorFunction.
         * @type {function()}
         * @private
         */
        selectElements = function () {
            var elements;
            if (selectorFunction) {
                elements = selectorFunction();
            } else {
                elements = mySelectorFunction(hyphenateClass);
            }

            return elements;
        },

        /**
         * @name Hyphenator-intermediateState
         * @description
         * The value of style.visibility of the text while it is hyphenated.
         * @see Hyphenator.config
         * @type {string}
         * @private
         */
        intermediateState = 'hidden',

        /**
         * @name Hyphenator-unhide
         * @description
         * How hidden elements unhide: either simultaneous (default: 'wait') or progressively.
         * 'wait' makes Hyphenator.js to wait until all elements are hyphenated (one redraw)
         * With 'progressive' Hyphenator.js unhides elements as soon as they are hyphenated.
         * @see Hyphenator.config
         * @type {string}
         * @private
         */
        unhide = 'wait',

        /**
         * @name Hyphenator-CSSEditors
         * @description A container array that holds CSSEdit classes
         * For each window object one CSSEdit class is inserted
         * @see Hyphenator-CSSEdit
         * @type {array}
         * @private
         */
        CSSEditors = [],

        /**
         * @name Hyphenator-CSSEditors
         * @description A custom class with two public methods: setRule() and clearChanges()
         * Rather sets style for CSS-classes then for single elements
         * This is used to hide/unhide elements when they are hyphenated.
         * @see Hyphenator-gatherDocumentInfos
         * @type {function ()}
         * @private
         */
        CSSEdit = function (w) {
            w = w || window;
            var doc = w.document,
                //find/create an accessible StyleSheet
                sheet = (function () {
                    var i,
                        l = doc.styleSheets.length,
                        sheet,
                        element,
                        r = false;
                    for (i = 0; i < l; i += 1) {
                        sheet = doc.styleSheets[i];
                        try {
                            if (!!sheet.cssRules) {
                                r = sheet;
                                break;
                            }
                        } catch (e) {}
                    }
                    if (r === false) {
                        element = doc.createElement('style');
                        element.type = 'text/css';
                        doc.getElementsByTagName('head')[0].appendChild(element);
                        r = doc.styleSheets[doc.styleSheets.length - 1];
                    }
                    return r;
                }()),
                changes = [],
                findRule = function (sel) {
                    var sheet, rule, sheets = window.document.styleSheets, rules, i, j, r = false;
                    for (i = 0; i < sheets.length; i += 1) {
                        sheet = sheets[i];
                        try { //FF has issues here with external CSS (s.o.p)
                            if (!!sheet.cssRules) {
                                rules = sheet.cssRules;
                            } else if (!!sheet.rules) {
                                // IE < 9
                                rules = sheet.rules;
                            }
                        } catch (e) {
                            //do nothing
                            //console.log(e);
                        }
                        if (!!rules && !!rules.length) {
                            for (j = 0; j < rules.length; j += 1) {
                                rule = rules[j];
                                if (rule.selectorText === sel) {
                                    r = {
                                        index: j,
                                        rule: rule
                                    };
                                }
                            }
                        }
                    }
                    return r;
                },
                addRule = function (sel, rulesStr) {
                    var i, r;
                    if (!!sheet.insertRule) {
                        if (!!sheet.cssRules) {
                            i = sheet.cssRules.length;
                        } else {
                            i = 0;
                        }
                        r = sheet.insertRule(sel + '{' + rulesStr + '}', i);
                    } else if (!!sheet.addRule) {
                        // IE < 9
                        if (!!sheet.rules) {
                            i = sheet.rules.length;
                        } else {
                            i = 0;
                        }
                        sheet.addRule(sel, rulesStr, i);
                        r = i;
                    }
                    return r;
                },
                removeRule = function (sheet, index) {
                    if (sheet.deleteRule) {
                        sheet.deleteRule(index);
                    } else {
                        // IE < 9
                        sheet.removeRule(index);
                    }
                };

            return {
                setRule: function (sel, rulesString) {
                    var i, existingRule, cssText;
                    existingRule = findRule(sel);
                    if (!!existingRule) {
                        if (!!existingRule.rule.cssText) {
                            cssText = existingRule.rule.cssText;
                        } else {
                            // IE < 9
                            cssText = existingRule.rule.style.cssText.toLowerCase();
                        }
                        if (cssText === '.' + hyphenateClass + ' { visibility: hidden; }') {
                            //browsers w/o IE < 9 and no additional style defs:
                            //add to [changes] for later removal
                            changes.push({sheet: existingRule.rule.parentStyleSheet, index: existingRule.index});
                        } else if (cssText.indexOf('visibility: hidden') !== -1) {
                            // IE < 9 or additional style defs:
                            // add new rule
                            i = addRule(sel, rulesString);
                            //add to [changes] for later removal
                            changes.push({sheet: sheet, index: i});
                            // clear existing def
                            existingRule.rule.style.visibility = '';
                        } else {
                            addRule(sel, rulesString);
                        }
                    } else {
                        i = addRule(sel, rulesString);
                        changes.push({sheet: sheet, index: i});
                    }
                },
                clearChanges: function () {
                    var change = changes.pop();
                    while (!!change) {
                        removeRule(change.sheet, change.index);
                        change = changes.pop();
                    }
                }
            };
        },

        /**
         * @name Hyphenator-hyphen
         * @description
         * A string containing the character for in-word-hyphenation
         * @type {string}
         * @default the soft hyphen
         * @private
         * @see Hyphenator.config
         */
        hyphen = String.fromCharCode(173),

        /**
         * @name Hyphenator-urlhyphen
         * @description
         * A string containing the character for url/mail-hyphenation
         * @type {string}
         * @default the zero width space
         * @private
         * @see Hyphenator.config
         * @see Hyphenator-zeroWidthSpace
         */
        urlhyphen = zeroWidthSpace,

        /**
         * @name Hyphenator-safeCopy
         * @description
         * Defines wether work-around for copy issues is active or not
         * Not supported by Opera (no onCopy handler)
         * @type boolean
         * @default true
         * @private
         * @see Hyphenator.config
         * @see Hyphenator-registerOnCopy
         */
        safeCopy = true,

        /*
         * runOnContentLoaded is based od jQuery.bindReady()
         * see
         * jQuery JavaScript Library v1.3.2
         * http://jquery.com/
         *
         * Copyright (c) 2009 John Resig
         * Dual licensed under the MIT and GPL licenses.
         * http://docs.jquery.com/License
         *
         * Date: 2009-02-19 17:34:21 -0500 (Thu, 19 Feb 2009)
         * Revision: 6246
         */
        /**
         * @name Hyphenator-runOnContentLoaded
         * @description
         * A crossbrowser solution for the DOMContentLoaded-Event based on jQuery
         * <a href = "http://jquery.com/</a>
         * I added some functionality: e.g. support for frames and iframes…
         * @param {Object} w the window-object
         * @param {function()} f the function to call onDOMContentLoaded
         * @private
         */
        runOnContentLoaded = function (w, f) {
            var
                toplevel, hyphRunForThis = {},
                add = window.document.addEventListener ? 'addEventListener' : 'attachEvent',
                rem = window.document.addEventListener ? 'removeEventListener' : 'detachEvent',
                pre = window.document.addEventListener ? '' : 'on',

                init = function (context) {
                    contextWindow = context || window;
                    if (!hyphRunForThis[contextWindow.location.href] && (!documentLoaded || !!contextWindow.frameElement)) {
                        documentLoaded = true;
                        f();
                        hyphRunForThis[contextWindow.location.href] = true;
                    }
                },

                doScrollCheck = function () {
                    try {
                        // If IE is used, use the trick by Diego Perini
                        // http://javascript.nwbox.com/IEContentLoaded/
                        contextWindow.document.documentElement.doScroll("left");
                    } catch (error) {
                        window.setTimeout(doScrollCheck, 1);
                        return;
                    }

                    // and execute any waiting functions
                    init(window);
                },

                doOnLoad = function () {
                    var i, haveAccess, fl = window.frames.length;
                    if (doFrames && fl > 0) {
                        for (i = 0; i < fl; i += 1) {
                            haveAccess = undefined;
                            //try catch isn't enough for webkit
                            try {
                                //opera throws only on document.toString-access
                                haveAccess = window.frames[i].document.toString();
                            } catch (e) {
                                haveAccess = undefined;
                            }
                            if (!!haveAccess) {
                                if (window.frames[i].location.href !== 'about:blank') {
                                    init(window.frames[i]);
                                }
                            }
                        }
                        contextWindow = window;
                        f();
                        hyphRunForThis[window.location.href] = true;
                    } else {
                        init(window);
                    }
                },

                // Cleanup functions for the document ready method
                DOMContentLoaded = function (e) {
                    if (e.type === 'readystatechange' && contextWindow.document.readyState !== 'complete') {
                        return;
                    }
                    contextWindow.document[rem](pre + e.type, DOMContentLoaded, false);
                    if (!doFrames && window.frames.length === 0) {
                        init(window);
                    } /* else {
                        //we are in a frameset, so do nothing but wait for onload to fire
                        
                    }*/
                };

            if (documentLoaded && !hyphRunForThis[w.location.href]) {
                f();
                hyphRunForThis[w.location.href] = true;
                return;
            }

            if (contextWindow.document.readyState === "complete" || contextWindow.document.readyState === "interactive") {
                //Running Hyphenator.js if it has been loaded later
                //Thanks to davenewtron http://code.google.com/p/hyphenator/issues/detail?id=158#c10
                window.setTimeout(doOnLoad, 1);
            } else {
                //registering events
                contextWindow.document[add](pre + "DOMContentLoaded", DOMContentLoaded, false);
                contextWindow.document[add](pre + 'readystatechange', DOMContentLoaded, false);
                window[add](pre + 'load', doOnLoad, false);
                toplevel = false;
                try {
                    toplevel = !window.frameElement;
                } catch (e) {}
                if (contextWindow.document.documentElement.doScroll && toplevel) {
                    doScrollCheck();
                }
            }
        },

        /**
         * @name Hyphenator-getLang
         * @description
         * Gets the language of an element. If no language is set, it may use the {@link Hyphenator-mainLanguage}.
         * @param {Object} el The first parameter is an DOM-Element-Object
         * @param {boolean} fallback The second parameter is a boolean to tell if the function should return the {@link Hyphenator-mainLanguage}
         * if there's no language found for the element.
         * @private
         */
        getLang = function (el, fallback) {
            try {
                return !!el.getAttribute('lang') ? el.getAttribute('lang').toLowerCase() :
                        !!el.getAttribute('xml:lang') ? el.getAttribute('xml:lang').toLowerCase() :
                                el.tagName.toLowerCase() !== 'html' ? getLang(el.parentNode, fallback) :
                                        fallback ? mainLanguage :
                                                null;
            } catch (e) {}
        },

        /**
         * @name Hyphenator-autoSetMainLanguage
         * @description
         * Retrieves the language of the document from the DOM.
         * The function looks in the following places:
         * <ul>
         * <li>lang-attribute in the html-tag</li>
         * <li>&lt;meta http-equiv = "content-language" content = "xy" /&gt;</li>
         * <li>&lt;meta name = "DC.Language" content = "xy" /&gt;</li>
         * <li>&lt;meta name = "language" content = "xy" /&gt;</li>
         * </li>
         * If nothing can be found a prompt using {@link Hyphenator-languageHint} and a prompt-string is displayed.
         * If the retrieved language is in the object {@link Hyphenator-supportedLangs} it is copied to {@link Hyphenator-mainLanguage}
         * @private
         */
        autoSetMainLanguage = function (w) {
            w = w || contextWindow;
            var el = w.document.getElementsByTagName('html')[0],
                m = w.document.getElementsByTagName('meta'),
                i,
                getLangFromUser = function () {
                    var mainLanguage,
                        text = '',
                        dH = 300,
                        dW = 450,
                        dX = Math.floor((w.outerWidth - dW) / 2) + window.screenX,
                        dY = Math.floor((w.outerHeight - dH) / 2) + window.screenY,
                        ul = '',
                        languageHint;
                    if (!!window.showModalDialog) {
                        mainLanguage = window.showModalDialog(basePath + 'modalLangDialog.html', supportedLangs, "dialogWidth: " + dW + "px; dialogHeight: " + dH + "px; dialogtop: " + dY + "; dialogleft: " + dX + "; center: on; resizable: off; scroll: off;");
                    } else {
                        languageHint = (function () {
                            var k, r = '';
                            for (k in supportedLangs) {
                                if (supportedLangs.hasOwnProperty(k)) {
                                    r += k + ', ';
                                }
                            }
                            r = r.substring(0, r.length - 2);
                            return r;
                        }());
                        ul = window.navigator.language || window.navigator.userLanguage;
                        ul = ul.substring(0, 2);
                        if (!!supportedLangs[ul] && supportedLangs[ul].prompt !== '') {
                            text = supportedLangs[ul].prompt;
                        } else {
                            text = supportedLangs.en.prompt;
                        }
                        text += ' (ISO 639-1)\n\n' + languageHint;
                        mainLanguage = window.prompt(window.unescape(text), ul).toLowerCase();
                    }
                    return mainLanguage;
                };
            mainLanguage = getLang(el, false);
            if (!mainLanguage) {
                for (i = 0; i < m.length; i += 1) {
                    //<meta http-equiv = "content-language" content="xy">
                    if (!!m[i].getAttribute('http-equiv') && (m[i].getAttribute('http-equiv').toLowerCase() === 'content-language')) {
                        mainLanguage = m[i].getAttribute('content').toLowerCase();
                    }
                    //<meta name = "DC.Language" content="xy">
                    if (!!m[i].getAttribute('name') && (m[i].getAttribute('name').toLowerCase() === 'dc.language')) {
                        mainLanguage = m[i].getAttribute('content').toLowerCase();
                    }
                    //<meta name = "language" content = "xy">
                    if (!!m[i].getAttribute('name') && (m[i].getAttribute('name').toLowerCase() === 'language')) {
                        mainLanguage = m[i].getAttribute('content').toLowerCase();
                    }
                }
            }
            //get lang for frame from enclosing document
            if (!mainLanguage && doFrames && (!!contextWindow.frameElement)) {
                autoSetMainLanguage(window.parent);
            }
            //fallback to defaultLang if set
            if (!mainLanguage && defaultLanguage !== '') {
                mainLanguage = defaultLanguage;
            }
            //ask user for lang
            if (!mainLanguage) {
                mainLanguage = getLangFromUser();
            }
            el.lang = mainLanguage;
        },

        /**
         * @name Hyphenator-gatherDocumentInfos
         * @description
         * This method runs through the DOM and executes the process()-function on:
         * - every node returned by the {@link Hyphenator-selectorFunction}.
         * The process()-function copies the element to the elements-variable, sets its visibility
         * to intermediateState, retrieves its language and recursivly descends the DOM-tree until
         * the child-Nodes aren't of type 1
         * @private
         */
        gatherDocumentInfos = function () {
            var elToProcess, tmp, i = 0,
                process = function (el, lang) {
                    var n, i = 0, hyphenate = true;

                    if (el.lang && typeof (el.lang) === 'string') {
                        lang = el.lang.toLowerCase(); //copy attribute-lang to internal lang
                    } else if (lang) {
                        lang = lang.toLowerCase();
                    } else {
                        lang = getLang(el, true);
                    }
                    //if css3-hyphenation is supported: use it!
                    if (css3 && css3_h9n.support && !!css3_h9n.checkLangSupport(lang)) {
                        css3hyphenateClassHandle =  new CSSEdit(contextWindow);
                        css3hyphenateClassHandle.setRule('.' + css3hyphenateClass, css3_h9n.property + ': auto;');
                        css3hyphenateClassHandle.setRule('.' + dontHyphenateClass, css3_h9n.property + ': none;');
                        css3hyphenateClassHandle.setRule('.' + css3hyphenateClass, '-webkit-locale : ' + lang + ';');

                        el.className = el.className + ' ' + css3hyphenateClass;
                    } else {
                        if (supportedLangs.hasOwnProperty(lang)) {
                            docLanguages[lang] = true;
                        } else {
                            if (supportedLangs.hasOwnProperty(lang.split('-')[0])) { //try subtag
                                lang = lang.split('-')[0];
                                docLanguages[lang] = true;
                            } else if (!isBookmarklet) {
                                hyphenate = false;
                                onError(new Error('Language "' + lang + '" is not yet supported.'));
                            }
                        }
                        if (hyphenate) {
                            if (intermediateState === 'hidden') {
                                el.className = el.className + ' ' + hideClass;
                            }
                            elements.add(el, lang);
                        }
                    }
                    n = el.childNodes[i];
                    while (!!n) {
                        if (n.nodeType === 1 && !dontHyphenate[n.nodeName.toLowerCase()] &&
                                n.className.indexOf(dontHyphenateClass) === -1 && !elToProcess[n]) {
                            process(n, lang);
                        }
                        i += 1;
                        n = el.childNodes[i];
                    }
                };
            if (css3) {
                css3_gethsupport();
            }
            if (isBookmarklet) {
                elToProcess = contextWindow.document.getElementsByTagName('body')[0];
                process(elToProcess, mainLanguage);
            } else {
                if (!css3 && intermediateState === 'hidden') {
                    CSSEditors.push(new CSSEdit(contextWindow));
                    CSSEditors[CSSEditors.length - 1].setRule('.' + hyphenateClass, 'visibility: hidden;');
                    CSSEditors[CSSEditors.length - 1].setRule('.' + hideClass, 'visibility: hidden;');
                    CSSEditors[CSSEditors.length - 1].setRule('.' + unhideClass, 'visibility: visible;');
                }
                elToProcess = selectElements();
                tmp = elToProcess[i];
                while (!!tmp) {
                    process(tmp, '');
                    i += 1;
                    tmp = elToProcess[i];
                }
            }
            if (elements.count === 0) {
                //nothing to hyphenate or all hyphenated by css3
                for (i = 0; i < CSSEditors.length; i += 1) {
                    CSSEditors[i].clearChanges();
                }
                state = 3;
                onHyphenationDone();
            }
        },

        /**
         * @name Hyphenator-createTrie
         * @description
         * converts patterns of the given language in a trie
         * @private
         * @param {string} lang the language whose patterns shall be converted
         */
        convertPatterns = function (lang) {
            /** @license BSD licenced code
             * The following code is based on code from hypher.js and adapted for Hyphenator.js
             * Copyright (c) 2011, Bram Stein
             */
            var size = 0,
                tree = {
                    tpoints: []
                },
                patterns,
                pattern,
                i,
                j,
                k,
                patternObject = Hyphenator.languages[lang].patterns,
                c,
                chars,
                points,
                t,
                p,
                codePoint,
                test = 'in3se',
                rf,
                getPoints = (function () {
                    //IE<9 doesn't act like other browsers: doesn't preserve the separators
                    if (test.split(/\D/).length === 1) {
                        rf = function (pattern) {
                            pattern = pattern.replace(/\D/gi, ' ');
                            return pattern.split(' ');
                        };
                    } else {
                        rf = function (pattern) {
                            return pattern.split(/\D/);
                        };
                    }
                    return rf;
                }());

            for (size in patternObject) {
                if (patternObject.hasOwnProperty(size)) {
                    patterns = patternObject[size].match(new RegExp('.{1,' + (+size) + '}', 'g'));
                    i = 0;
                    pattern = patterns[i];
                    while (!!pattern) {
                        chars = pattern.replace(/[\d]/g, '').split('');
                        points = getPoints(pattern);
                        t = tree;

                        j = 0;
                        c = chars[j];
                        while (!!c) {
                            codePoint = c.charCodeAt(0);

                            if (!t[codePoint]) {
                                t[codePoint] = {};
                            }
                            t = t[codePoint];
                            j += 1;
                            c = chars[j];
                        }

                        t.tpoints = [];
                        for (k = 0; k < points.length; k += 1) {
                            p = points[k];
                            t.tpoints.push((p === "") ? 0 : p);
                        }
                        i += 1;
                        pattern = patterns[i];
                    }
                }
            }
            Hyphenator.languages[lang].patterns = tree;
            /**
             * end of BSD licenced code from hypher.js
             */
        },

        /**
         * @name Hyphenator-recreatePattern
         * @description
         * Recreates the pattern for the reducedPatternSet
         * @private
         */
        recreatePattern = function (pattern, nodePoints) {
            var r = [], c = pattern.split(''), i;
            for (i = 0; i < nodePoints.length; i += 1) {
                if (nodePoints[i] !== 0) {
                    r.push(nodePoints[i]);
                }
                if (c[i]) {
                    r.push(c[i]);
                }
            }
            return r.join('');
        },

        /**
         * @name Hyphenator-convertExceptionsToObject
         * @description
         * Converts a list of comma seprated exceptions to an object:
         * 'Fortran,Hy-phen-a-tion' -> {'Fortran':'Fortran','Hyphenation':'Hy-phen-a-tion'}
         * @private
         * @param {string} exc a comma separated string of exceptions (without spaces)
         */
        convertExceptionsToObject = function (exc) {
            var w = exc.split(', '),
                r = {},
                i,
                l,
                key;
            for (i = 0, l = w.length; i < l; i += 1) {
                key = w[i].replace(/-/g, '');
                if (!r.hasOwnProperty(key)) {
                    r[key] = w[i];
                }
            }
            return r;
        },

        /**
         * @name Hyphenator-loadPatterns
         * @description
         * Checks if the requested file is available in the network.
         * Adds a &lt;script&gt;-Tag to the DOM to load an externeal .js-file containing patterns and settings for the given language.
         * If the given language is not in the {@link Hyphenator-supportedLangs}-Object it returns.
         * One may ask why we are not using AJAX to load the patterns. The XMLHttpRequest-Object 
         * has a same-origin-policy. This makes the Bookmarklet impossible.
         * @param {string} lang The language to load the patterns for
         * @private
         * @see Hyphenator-basePath
         */
        loadPatterns = function (lang) {
            var url, xhr, head, script;
            if (supportedLangs.hasOwnProperty(lang) && !Hyphenator.languages[lang]) {
                url = basePath + 'patterns/' + supportedLangs[lang].file;
            } else {
                return;
            }
            if (isLocal && !isBookmarklet) {
                //check if 'url' is available:
                xhr = null;
                try {
                    // Mozilla, Opera, Safari and Internet Explorer (ab v7)
                    xhr = new window.XMLHttpRequest();
                } catch (e) {
                    try {
                        //IE>=6
                        xhr  = new window.ActiveXObject("Microsoft.XMLHTTP");
                    } catch (e2) {
                        try {
                            //IE>=5
                            xhr  = new window.ActiveXObject("Msxml2.XMLHTTP");
                        } catch (e3) {
                            xhr  = null;
                        }
                    }
                }

                if (xhr) {
                    xhr.open('HEAD', url, true);
                    xhr.setRequestHeader('Cache-Control', 'no-cache');
                    xhr.onreadystatechange = function () {
                        if (xhr.readyState === 4) {
                            if (xhr.status === 404) {
                                onError(new Error('Could not load\n' + url));
                                delete docLanguages[lang];
                                return;
                            }
                        }
                    };
                    xhr.send(null);
                }
            }
            if (createElem) {
                head = window.document.getElementsByTagName('head').item(0);
                script = createElem('script', window);
                script.src = url;
                script.type = 'text/javascript';
                head.appendChild(script);
            }
        },

        /**
         * @name Hyphenator-prepareLanguagesObj
         * @description
         * Adds a cache to each language and converts the exceptions-list to an object.
         * If storage is active the object is stored there.
         * @private
         * @param {string} lang the language ob the lang-obj
         */
        prepareLanguagesObj = function (lang) {
            var lo = Hyphenator.languages[lang], wrd;
            if (!lo.prepared) {
                if (enableCache) {
                    lo.cache = {};
                    //Export
                    //lo['cache'] = lo.cache;
                }
                if (enableReducedPatternSet) {
                    lo.redPatSet = {};
                }
                //add exceptions from the pattern file to the local 'exceptions'-obj
                if (lo.hasOwnProperty('exceptions')) {
                    Hyphenator.addExceptions(lang, lo.exceptions);
                    delete lo.exceptions;
                }
                //copy global exceptions to the language specific exceptions
                if (exceptions.hasOwnProperty('global')) {
                    if (exceptions.hasOwnProperty(lang)) {
                        exceptions[lang] += ', ' + exceptions.global;
                    } else {
                        exceptions[lang] = exceptions.global;
                    }
                }
                //move exceptions from the the local 'exceptions'-obj to the 'language'-object
                if (exceptions.hasOwnProperty(lang)) {
                    lo.exceptions = convertExceptionsToObject(exceptions[lang]);
                    delete exceptions[lang];
                } else {
                    lo.exceptions = {};
                }
                convertPatterns(lang);
                wrd = '[\\w' + lo.specialChars + '@' + String.fromCharCode(173) + String.fromCharCode(8204) + '-]{' + min + ',}';
                lo.genRegExp = new RegExp('(' + url + ')|(' + mail + ')|(' + wrd + ')', 'gi');
                lo.prepared = true;
            }
            if (!!storage) {
                try {
                    storage.setItem(lang, window.JSON.stringify(lo));
                } catch (e) {
                    onError(e);
                }
            }

        },

        /**
         * @name Hyphenator-prepare
         * @description
         * This funtion prepares the Hyphenator-Object: If RemoteLoading is turned off, it assumes
         * that the patternfiles are loaded, all conversions are made and the callback is called.
         * If storage is active the object is retrieved there.
         * If RemoteLoading is on (default), it loads the pattern files and waits until they are loaded,
         * by repeatedly checking Hyphenator.languages. If a patterfile is loaded the patterns are
         * converted to their object style and the lang-object extended.
         * Finally the callback is called.
         * @private
         */
        prepare = function (callback) {
            var lang, interval, tmp1, tmp2;
            if (!enableRemoteLoading) {
                for (lang in Hyphenator.languages) {
                    if (Hyphenator.languages.hasOwnProperty(lang)) {
                        prepareLanguagesObj(lang);
                    }
                }
                state = 2;
                callback('*');
                return;
            }
            // get all languages that are used and preload the patterns
            state = 1;
            for (lang in docLanguages) {
                if (docLanguages.hasOwnProperty(lang)) {
                    if (!!storage && storage.test(lang)) {
                        Hyphenator.languages[lang] = window.JSON.parse(storage.getItem(lang));
                        if (exceptions.hasOwnProperty('global')) {
                            tmp1 = convertExceptionsToObject(exceptions.global);
                            for (tmp2 in tmp1) {
                                if (tmp1.hasOwnProperty(tmp2)) {
                                    Hyphenator.languages[lang].exceptions[tmp2] = tmp1[tmp2];
                                }
                            }
                        }
                        //Replace exceptions since they may have been changed:
                        if (exceptions.hasOwnProperty(lang)) {
                            tmp1 = convertExceptionsToObject(exceptions[lang]);
                            for (tmp2 in tmp1) {
                                if (tmp1.hasOwnProperty(tmp2)) {
                                    Hyphenator.languages[lang].exceptions[tmp2] = tmp1[tmp2];
                                }
                            }
                            delete exceptions[lang];
                        }
                        //Replace genRegExp since it may have been changed:
                        tmp1 = '[\\w' + Hyphenator.languages[lang].specialChars + '@' + String.fromCharCode(173) + String.fromCharCode(8204) + '-]{' + min + ',}';
                        Hyphenator.languages[lang].genRegExp = new RegExp('(' + url + ')|(' + mail + ')|(' + tmp1 + ')', 'gi');

                        delete docLanguages[lang];
                        callback(lang);
                    } else {
                        loadPatterns(lang);
                    }
                }
            }
            // else async wait until patterns are loaded, then hyphenate
            interval = window.setInterval(function () {
                var finishedLoading = true, lang;
                for (lang in docLanguages) {
                    if (docLanguages.hasOwnProperty(lang)) {
                        finishedLoading = false;
                        if (!!Hyphenator.languages[lang]) {
                            delete docLanguages[lang];
                            //do conversion while other patterns are loading:
                            prepareLanguagesObj(lang);
                            callback(lang);
                        }
                    }
                }
                if (finishedLoading) {
                    window.clearInterval(interval);
                    state = 2;
                }
            }, 100);
        },

        /**
         * @name Hyphenator-switchToggleBox
         * @description
         * Creates or hides the toggleBox: a small button to turn off/on hyphenation on a page.
         * @see Hyphenator.config
         * @private
         */
        toggleBox = function () {
            var bdy, myTextNode,
                text = (Hyphenator.doHyphenation ? 'Hy-phen-a-tion' : 'Hyphenation'),
                myBox = contextWindow.document.getElementById('HyphenatorToggleBox');
            if (!!myBox) {
                myBox.firstChild.data = text;
            } else {
                bdy = contextWindow.document.getElementsByTagName('body')[0];
                myBox = createElem('div', contextWindow);
                myBox.setAttribute('id', 'HyphenatorToggleBox');
                myBox.setAttribute('class', dontHyphenateClass);
                myTextNode = contextWindow.document.createTextNode(text);
                myBox.appendChild(myTextNode);
                myBox.onclick =  Hyphenator.toggleHyphenation;
                myBox.style.position = 'absolute';
                myBox.style.top = '0px';
                myBox.style.right = '0px';
                myBox.style.margin = '0';
                myBox.style.backgroundColor = '#AAAAAA';
                myBox.style.color = '#FFFFFF';
                myBox.style.font = '6pt Arial';
                myBox.style.letterSpacing = '0.2em';
                myBox.style.padding = '3px';
                myBox.style.cursor = 'pointer';
                myBox.style.WebkitBorderBottomLeftRadius = '4px';
                myBox.style.MozBorderRadiusBottomleft = '4px';
                myBox.style.borderBottomLeftRadius = '4px';
                bdy.appendChild(myBox);
            }
        },


        /**
         * @name Hyphenator-hyphenateWord
         * @description
         * This function is the heart of Hyphenator.js. It returns a hyphenated word.
         *
         * If there's already a {@link Hyphenator-hypen} in the word, the word is returned as it is.
         * If the word is in the exceptions list or in the cache, it is retrieved from it.
         * If there's a '-' put a zeroWidthSpace after the '-' and hyphenate the parts.
         * @param {string} lang The language of the word
         * @param {string} word The word
         * @returns string The hyphenated word
         * @public
         */
        hyphenateWord = function (lang, word) {
            var lo = Hyphenator.languages[lang], parts, l, subst,
                w, characters, origWord, originalCharacters, wordLength, i, j, k, node, points = [],
                characterPoints = [], nodePoints, nodePointsLength, m = Math.max, trie,
                result = [''], pattern, r;
            word = onBeforeWordHyphenation(word, lang);
            if (word === '') {
                r = '';
            } else if (enableCache && lo.cache.hasOwnProperty(word)) { //the word is in the cache
                r = lo.cache[word];
            } else if (word.indexOf(hyphen) !== -1) {
                //word already contains shy; -> leave at it is!
                r = word;
            } else if (lo.exceptions.hasOwnProperty(word)) { //the word is in the exceptions list
                r = lo.exceptions[word].replace(/-/g, hyphen);
            } else if (word.indexOf('-') !== -1) {
                //word contains '-' -> hyphenate the parts separated with '-'
                parts = word.split('-');
                for (i = 0, l = parts.length; i < l; i += 1) {
                    parts[i] = hyphenateWord(lang, parts[i]);
                }
                r = parts.join('-');
            } else {
                origWord = word;
                w = word = '_' + word + '_';
                if (!!lo.charSubstitution) {
                    for (subst in lo.charSubstitution) {
                        if (lo.charSubstitution.hasOwnProperty(subst)) {
                            w = w.replace(new RegExp(subst, 'g'), lo.charSubstitution[subst]);
                        }
                    }
                }
                if (origWord.indexOf("'") !== -1) {
                    w = w.replace("'", "’"); //replace APOSTROPHE with RIGHT SINGLE QUOTATION MARK (since the latter is used in the patterns)
                }
                /** @license BSD licenced code
                 * The following code is based on code from hypher.js
                 * Copyright (c) 2011, Bram Stein
                 */
                characters = w.toLowerCase().split('');
                originalCharacters = word.split('');
                wordLength = characters.length;
                trie = lo.patterns;
                for (i = 0; i < wordLength; i += 1) {
                    points[i] = 0;
                    characterPoints[i] = characters[i].charCodeAt(0);
                }
                for (i = 0; i < wordLength; i += 1) {
                    pattern = '';
                    node = trie;
                    for (j = i; j < wordLength; j += 1) {
                        node = node[characterPoints[j]];
                        if (node) {
                            if (enableReducedPatternSet) {
                                pattern += String.fromCharCode(characterPoints[j]);
                            }
                            nodePoints = node.tpoints;
                            if (nodePoints) {
                                if (enableReducedPatternSet) {
                                    if (!lo.redPatSet) {
                                        lo.redPatSet = {};
                                    }
                                    lo.redPatSet[pattern] = recreatePattern(pattern, nodePoints);
                                }
                                for (k = 0, nodePointsLength = nodePoints.length; k < nodePointsLength; k += 1) {
                                    points[i + k] = m(points[i + k], nodePoints[k]);
                                }
                            }
                        } else {
                            break;
                        }
                    }
                }
                for (i = 1; i < wordLength - 1; i += 1) {
                    if (i > lo.leftmin && i < (wordLength - lo.rightmin) && points[i] % 2) {
                        result.push(originalCharacters[i]);
                    } else {
                        result[result.length - 1] += originalCharacters[i];
                    }
                }
                r = result.join(hyphen);
                /**
                 * end of BSD licenced code from hypher.js
                 */
            }
            r = onAfterWordHyphenation(r, lang);
            if (enableCache) { //put the word in the cache
                lo.cache[origWord] = r;
            }
            return r;
        },

        /**
         * @name Hyphenator-hyphenateURL
         * @description
         * Puts {@link Hyphenator-urlhyphen} after each no-alphanumeric char that my be in a URL.
         * @param {string} url to hyphenate
         * @returns string the hyphenated URL
         * @public
         */
        hyphenateURL = function (url) {
            return url.replace(/([:\/\.\?#&_,;!@]+)/gi, '$&' + urlhyphen);
        },

        /**
         * @name Hyphenator-removeHyphenationFromElement
         * @description
         * Removes all hyphens from the element. If there are other elements, the function is
         * called recursively.
         * Removing hyphens is usefull if you like to copy text. Some browsers are buggy when the copy hyphenated texts.
         * @param {Object} el The element where to remove hyphenation.
         * @public
         */
        removeHyphenationFromElement = function (el) {
            var h, i = 0, n;
            switch (hyphen) {
            case '|':
                h = '\\|';
                break;
            case '+':
                h = '\\+';
                break;
            case '*':
                h = '\\*';
                break;
            default:
                h = hyphen;
            }
            n = el.childNodes[i];
            while (!!n) {
                if (n.nodeType === 3) {
                    n.data = n.data.replace(new RegExp(h, 'g'), '');
                    n.data = n.data.replace(new RegExp(zeroWidthSpace, 'g'), '');
                } else if (n.nodeType === 1) {
                    removeHyphenationFromElement(n);
                }
                i += 1;
                n = el.childNodes[i];
            }
        },

        /**
         * @name Hyphenator-oncopyHandler
         * @description
         * The function called by registerOnCopy
         * @private
         */
        oncopyHandler,

        /**
         * @name Hyphenator-removeOnCopy
         * @description
         * Method to remove copy event handler from the given element
         * @param object a html object from witch we remove the event
         * @private
         */
        removeOnCopy = function (el) {
            var body = el.ownerDocument.getElementsByTagName('body')[0];
            if (!body) {
                return;
            }
            el = el || body;
            if (window.removeEventListener) {
                el.removeEventListener("copy", oncopyHandler, true);
            } else {
                el.detachEvent("oncopy", oncopyHandler);
            }
        },

        /**
         * @name Hyphenator-registerOnCopy
         * @description
         * Huge work-around for browser-inconsistency when it comes to
         * copying of hyphenated text.
         * The idea behind this code has been provided by http://github.com/aristus/sweet-justice
         * sweet-justice is under BSD-License
         * @param object an HTML element where the copy event will be registered to
         * @private
         */
        registerOnCopy = function (el) {
            var body = el.ownerDocument.getElementsByTagName('body')[0],
                shadow,
                selection,
                range,
                rangeShadow,
                restore;
            oncopyHandler = function (e) {
                e = e || window.event;
                var target = e.target || e.srcElement,
                    currDoc = target.ownerDocument,
                    body = currDoc.getElementsByTagName('body')[0],
                    targetWindow = currDoc.defaultView || currDoc.parentWindow;
                if (target.tagName && dontHyphenate[target.tagName.toLowerCase()]) {
                    //Safari needs this
                    return;
                }
                //create a hidden shadow element
                shadow = currDoc.createElement('div');
                //Moving the element out of the screen doesn't work for IE9 (https://connect.microsoft.com/IE/feedback/details/663981/)
                //shadow.style.overflow = 'hidden';
                //shadow.style.position = 'absolute';
                //shadow.style.top = '-5000px';
                //shadow.style.height = '1px';
                //doing this instead:
                shadow.style.color = window.getComputedStyle ? targetWindow.getComputedStyle(body, null).backgroundColor : '#FFFFFF';
                shadow.style.fontSize = '0px';
                body.appendChild(shadow);
                if (!!window.getSelection) {
                    //FF3, Webkit, IE9
                    e.stopPropagation();
                    selection = targetWindow.getSelection();
                    range = selection.getRangeAt(0);
                    shadow.appendChild(range.cloneContents());
                    removeHyphenationFromElement(shadow);
                    selection.selectAllChildren(shadow);
                    restore = function () {
                        shadow.parentNode.removeChild(shadow);
                        selection.removeAllRanges(); //IE9 needs that
                        selection.addRange(range);
                    };
                } else {
                    // IE<9
                    e.cancelBubble = true;
                    selection = targetWindow.document.selection;
                    range = selection.createRange();
                    shadow.innerHTML = range.htmlText;
                    removeHyphenationFromElement(shadow);
                    rangeShadow = body.createTextRange();
                    rangeShadow.moveToElementText(shadow);
                    rangeShadow.select();
                    restore = function () {
                        shadow.parentNode.removeChild(shadow);
                        if (range.text !== "") {
                            range.select();
                        }
                    };
                }
                window.setTimeout(restore, 0);
            };
            if (!body) {
                return;
            }
            el = el || body;
            if (window.addEventListener) {
                el.addEventListener("copy", oncopyHandler, true);
            } else {
                el.attachEvent("oncopy", oncopyHandler);
            }
        },

        /**
         * @name Hyphenator-checkIfAllDone
         * @description
         * Checks if all Elements are hyphenated, unhides them and fires onHyphenationDone()
         * @private
         */
        checkIfAllDone = function () {
            var allDone = true, i;
            elements.each(function (ellist) {
                var i, l = ellist.length;
                for (i = 0; i < l; i += 1) {
                    allDone = allDone && ellist[i].hyphenated;
                }
            });
            if (allDone) {
                if (intermediateState === 'hidden' && unhide === 'progressive') {
                    elements.each(function (ellist) {
                        var i, l = ellist.length, el;
                        for (i = 0; i < l; i += 1) {
                            el = ellist[i].element;
                            el.className = el.className.replace(unhideClassRegExp, '');
                            if (el.className === '') {
                                el.removeAttribute('class');
                            }
                        }
                    });
                }
                for (i = 0; i < CSSEditors.length; i += 1) {
                    CSSEditors[i].clearChanges();
                }
                state = 3;
                onHyphenationDone();
            }
        },


        /**
         * @name Hyphenator-hyphenateElement
         * @description
         * Takes the content of the given element and - if there's text - replaces the words
         * by hyphenated words. If there's another element, the function is called recursively.
         * When all words are hyphenated, the visibility of the element is set to 'visible'.
         * @param {Object} el The element to hyphenate
         * @private
         */
        hyphenateElement = function (lang, elo) {
            var el = elo.element,
                hyphenate,
                n,
                i,
                r,
                controlOrphans = function (part) {
                    var h, r;
                    switch (hyphen) {
                    case '|':
                        h = '\\|';
                        break;
                    case '+':
                        h = '\\+';
                        break;
                    case '*':
                        h = '\\*';
                        break;
                    default:
                        h = hyphen;
                    }
                    if (orphanControl >= 2) {
                        //remove hyphen points from last word
                        r = part.split(' ');
                        r[1] = r[1].replace(new RegExp(h, 'g'), '');
                        r[1] = r[1].replace(new RegExp(zeroWidthSpace, 'g'), '');
                        r = r.join(' ');
                    }
                    if (orphanControl === 3) {
                        //replace spaces by non breaking spaces
                        r = r.replace(/[ ]+/g, String.fromCharCode(160));
                    }
                    return r;
                };
            if (Hyphenator.languages.hasOwnProperty(lang)) {
                hyphenate = function (word) {
                    if (!Hyphenator.doHyphenation) {
                        r = word;
                    } else if (urlOrMailRE.test(word)) {
                        r = hyphenateURL(word);
                    } else {
                        r = hyphenateWord(lang, word);
                    }
                    return r;
                };
                if (safeCopy && (el.tagName.toLowerCase() !== 'body')) {
                    registerOnCopy(el);
                }
                i = 0;
                n = el.childNodes[i];
                while (!!n) {
                    if (n.nodeType === 3 && n.data.length >= min) { //type 3 = #text -> hyphenate!
                        n.data = n.data.replace(Hyphenator.languages[lang].genRegExp, hyphenate);
                        if (orphanControl !== 1) {
                            n.data = n.data.replace(/[\S]+ [\S]+$/, controlOrphans);
                        }
                    }
                    i += 1;
                    n = el.childNodes[i];
                }
            }
            if (intermediateState === 'hidden' && unhide === 'wait') {
                el.className = el.className.replace(hideClassRegExp, '');
                if (el.className === '') {
                    el.removeAttribute('class');
                }
            }
            if (intermediateState === 'hidden' && unhide === 'progressive') {
                el.className = el.className.replace(hideClassRegExp, ' ' + unhideClass);
            }
            elo.hyphenated = true;
            elements.hyCount += 1;
            if (elements.count <= elements.hyCount) {
                checkIfAllDone();
            }
        },


        /**
         * @name Hyphenator-hyphenateLanguageElements
         * @description
         * Calls hyphenateElement() for all elements of the specified language.
         * If the language is '*' then all elements are hyphenated.
         * This is done with a setTimout
         * to prevent a "long running Script"-alert when hyphenating large pages.
         * Therefore a tricky bind()-function was necessary.
         * @private
         */
        hyphenateLanguageElements = function (lang) {
            function bind(fun, arg1, arg2) {
                return function () {
                    return fun(arg1, arg2);
                };
            }
            var i, l;
            if (lang === '*') {
                elements.each(function (lang, ellist) {
                    var i, l = ellist.length;
                    for (i = 0; i < l; i += 1) {
                        window.setTimeout(bind(hyphenateElement, lang, ellist[i]), 0);
                    }
                });
            } else {
                if (elements.list.hasOwnProperty(lang)) {
                    l = elements.list[lang].length;
                    for (i = 0; i < l; i += 1) {
                        window.setTimeout(bind(hyphenateElement, lang, elements.list[lang][i]), 0);
                    }
                }
            }
        },

        /**
         * @name Hyphenator-removeHyphenationFromDocument
         * @description
         * Does what it says ;-)
         * @private
         */
        removeHyphenationFromDocument = function () {
            elements.each(function (ellist) {
                var i, l = ellist.length;
                for (i = 0; i < l; i += 1) {
                    removeHyphenationFromElement(ellist[i].element);
                    if (safeCopy) {
                        removeOnCopy(ellist[i].element);
                    }
                    ellist[i].hyphenated = false;
                }
            });
            state = 4;
        },

        /**
         * @name Hyphenator-createStorage
         * @description
         * inits the private var storage depending of the setting in storageType
         * and the supported features of the system.
         * @private
         */
        createStorage = function () {
            var s;
            try {
                if (storageType !== 'none' &&
                        window.localStorage !== undefined &&
                        window.sessionStorage !== undefined &&
                        window.JSON.stringify !== undefined &&
                        window.JSON.parse !== undefined) {
                    switch (storageType) {
                    case 'session':
                        s = window.sessionStorage;
                        break;
                    case 'local':
                        s = window.localStorage;
                        break;
                    default:
                        s = undefined;
                        break;
                    }
                }
            } catch (f) {
                //FF throws an error if DOM.storage.enabled is set to false
            }
            if (s) {
                storage = {
                    prefix: 'Hyphenator_' + Hyphenator.version + '_',
                    store: s,
                    test: function (name) {
                        var val = this.store.getItem(this.prefix + name);
                        return (!!val) ? true : false;
                    },
                    getItem: function (name) {
                        return this.store.getItem(this.prefix + name);
                    },
                    setItem: function (name, value) {
                        this.store.setItem(this.prefix + name, value);
                    }
                };
            } else {
                storage = undefined;
            }
        },

        /**
         * @name Hyphenator-storeConfiguration
         * @description
         * Stores the current config-options in DOM-Storage
         * @private
         */
        storeConfiguration = function () {
            if (!storage) {
                return;
            }
            var settings = {
                'STORED': true,
                'classname': hyphenateClass,
                'donthyphenateclassname': dontHyphenateClass,
                'minwordlength': min,
                'hyphenchar': hyphen,
                'urlhyphenchar': urlhyphen,
                'togglebox': toggleBox,
                'displaytogglebox': displayToggleBox,
                'remoteloading': enableRemoteLoading,
                'enablecache': enableCache,
                'onhyphenationdonecallback': onHyphenationDone,
                'onerrorhandler': onError,
                'intermediatestate': intermediateState,
                'selectorfunction': selectorFunction || mySelectorFunction,
                'safecopy': safeCopy,
                'doframes': doFrames,
                'storagetype': storageType,
                'orphancontrol': orphanControl,
                'dohyphenation': Hyphenator.doHyphenation,
                'persistentconfig': persistentConfig,
                'defaultlanguage': defaultLanguage,
                'useCSS3hyphenation': css3,
                'unhide': unhide,
                'onbeforewordhyphenation': onBeforeWordHyphenation,
                'onafterwordhyphenation': onAfterWordHyphenation
            };
            storage.setItem('config', window.JSON.stringify(settings));
        },

        /**
         * @name Hyphenator-restoreConfiguration
         * @description
         * Retrieves config-options from DOM-Storage and does configuration accordingly
         * @private
         */
        restoreConfiguration = function () {
            var settings;
            if (storage.test('config')) {
                settings = window.JSON.parse(storage.getItem('config'));
                Hyphenator.config(settings);
            }
        };

    return {

        /**
         * @name Hyphenator.version
         * @memberOf Hyphenator
         * @description
         * String containing the actual version of Hyphenator.js
         * [major release].[minor releas].[bugfix release]
         * major release: new API, new Features, big changes
         * minor release: new languages, improvements
         * @public
         */
        version: '4.2.0',

        /**
         * @name Hyphenator.doHyphenation
         * @description
         * If doHyphenation is set to false (defaults to true), hyphenateDocument() isn't called.
         * All other actions are performed.
         */
        doHyphenation: true,

        /**
         * @name Hyphenator.languages
         * @memberOf Hyphenator
         * @description
         * Objects that holds key-value pairs, where key is the language and the value is the
         * language-object loaded from (and set by) the pattern file.
         * The language object holds the following members:
         * <table>
         * <tr><th>key</th><th>desc></th></tr>
         * <tr><td>leftmin</td><td>The minimum of chars to remain on the old line</td></tr>
         * <tr><td>rightmin</td><td>The minimum of chars to go on the new line</td></tr>
         * <tr><td>shortestPattern</td><td>The shortes pattern (numbers don't count!)</td></tr>
         * <tr><td>longestPattern</td><td>The longest pattern (numbers don't count!)</td></tr>
         * <tr><td>specialChars</td><td>Non-ASCII chars in the alphabet.</td></tr>
         * <tr><td>patterns</td><td>the patterns</td></tr>
         * </table>
         * And optionally (or after prepareLanguagesObj() has been called):
         * <table>
         * <tr><td>exceptions</td><td>Excpetions for the secified language</td></tr>
         * </table>
         * @public
         */
        languages: {},


        /**
         * @name Hyphenator.config
             * @description
         * Config function that takes an object as an argument. The object contains key-value-pairs
         * containig Hyphenator-settings. This is a shortcut for calling Hyphenator.set...-Methods.
         * @param {Object} obj <table>
         * <tr><th>key</th><th>values</th><th>default</th></tr>
         * <tr><td>classname</td><td>string</td><td>'hyphenate'</td></tr>
         * <tr><td>donthyphenateclassname</td><td>string</td><td>''</td></tr>
         * <tr><td>minwordlength</td><td>integer</td><td>6</td></tr>
         * <tr><td>hyphenchar</td><td>string</td><td>'&amp;shy;'</td></tr>
         * <tr><td>urlhyphenchar</td><td>string</td><td>'zero with space'</td></tr>
         * <tr><td>togglebox</td><td>function</td><td>see code</td></tr>
         * <tr><td>displaytogglebox</td><td>boolean</td><td>false</td></tr>
         * <tr><td>remoteloading</td><td>boolean</td><td>true</td></tr>
         * <tr><td>enablecache</td><td>boolean</td><td>true</td></tr>
         * <tr><td>enablereducedpatternset</td><td>boolean</td><td>false</td></tr>
         * <tr><td>onhyphenationdonecallback</td><td>function</td><td>empty function</td></tr>
         * <tr><td>onerrorhandler</td><td>function</td><td>alert(onError)</td></tr>
         * <tr><td>intermediatestate</td><td>string</td><td>'hidden'</td></tr>
         * <tr><td>selectorfunction</td><td>function</td><td>[…]</td></tr>
         * <tr><td>safecopy</td><td>boolean</td><td>true</td></tr>
         * <tr><td>doframes</td><td>boolean</td><td>false</td></tr>
         * <tr><td>storagetype</td><td>string</td><td>'none'</td></tr>
         * </table>
         * @public
         * @example &lt;script src = "Hyphenator.js" type = "text/javascript"&gt;&lt;/script&gt;
         * &lt;script type = "text/javascript"&gt;
         *     Hyphenator.config({'minwordlength':4,'hyphenchar':'|'});
         *     Hyphenator.run();
         * &lt;/script&gt;
         */
        config: function (obj) {
            var assert = function (name, type) {
                    var r, t;
                    t = typeof obj[name];
                    if (t === type) {
                        r = true;
                    } else {
                        onError(new Error('Config onError: ' + name + ' must be of type ' + type));
                        r = false;
                    }
                    return r;
                },
                key;

            if (obj.hasOwnProperty('storagetype')) {
                if (assert('storagetype', 'string')) {
                    storageType = obj.storagetype;
                }
                if (!storage) {
                    createStorage();
                }
            }
            if (!obj.hasOwnProperty('STORED') && storage && obj.hasOwnProperty('persistentconfig') && obj.persistentconfig === true) {
                restoreConfiguration();
            }

            for (key in obj) {
                if (obj.hasOwnProperty(key)) {
                    switch (key) {
                    case 'STORED':
                        break;
                    case 'classname':
                        if (assert('classname', 'string')) {
                            hyphenateClass = obj[key];
                        }
                        break;
                    case 'donthyphenateclassname':
                        if (assert('donthyphenateclassname', 'string')) {
                            dontHyphenateClass = obj[key];
                        }
                        break;
                    case 'minwordlength':
                        if (assert('minwordlength', 'number')) {
                            min = obj[key];
                        }
                        break;
                    case 'hyphenchar':
                        if (assert('hyphenchar', 'string')) {
                            if (obj.hyphenchar === '&shy;') {
                                obj.hyphenchar = String.fromCharCode(173);
                            }
                            hyphen = obj[key];
                        }
                        break;
                    case 'urlhyphenchar':
                        if (obj.hasOwnProperty('urlhyphenchar')) {
                            if (assert('urlhyphenchar', 'string')) {
                                urlhyphen = obj[key];
                            }
                        }
                        break;
                    case 'togglebox':
                        if (assert('togglebox', 'function')) {
                            toggleBox = obj[key];
                        }
                        break;
                    case 'displaytogglebox':
                        if (assert('displaytogglebox', 'boolean')) {
                            displayToggleBox = obj[key];
                        }
                        break;
                    case 'remoteloading':
                        if (assert('remoteloading', 'boolean')) {
                            enableRemoteLoading = obj[key];
                        }
                        break;
                    case 'enablecache':
                        if (assert('enablecache', 'boolean')) {
                            enableCache = obj[key];
                        }
                        break;
                    case 'enablereducedpatternset':
                        if (assert('enablereducedpatternset', 'boolean')) {
                            enableReducedPatternSet = obj[key];
                        }
                        break;
                    case 'onhyphenationdonecallback':
                        if (assert('onhyphenationdonecallback', 'function')) {
                            onHyphenationDone = obj[key];
                        }
                        break;
                    case 'onerrorhandler':
                        if (assert('onerrorhandler', 'function')) {
                            onError = obj[key];
                        }
                        break;
                    case 'intermediatestate':
                        if (assert('intermediatestate', 'string')) {
                            intermediateState = obj[key];
                        }
                        break;
                    case 'selectorfunction':
                        if (assert('selectorfunction', 'function')) {
                            selectorFunction = obj[key];
                        }
                        break;
                    case 'safecopy':
                        if (assert('safecopy', 'boolean')) {
                            safeCopy = obj[key];
                        }
                        break;
                    case 'doframes':
                        if (assert('doframes', 'boolean')) {
                            doFrames = obj[key];
                        }
                        break;
                    case 'storagetype':
                        if (assert('storagetype', 'string')) {
                            storageType = obj[key];
                        }
                        break;
                    case 'orphancontrol':
                        if (assert('orphancontrol', 'number')) {
                            orphanControl = obj[key];
                        }
                        break;
                    case 'dohyphenation':
                        if (assert('dohyphenation', 'boolean')) {
                            Hyphenator.doHyphenation = obj[key];
                        }
                        break;
                    case 'persistentconfig':
                        if (assert('persistentconfig', 'boolean')) {
                            persistentConfig = obj[key];
                        }
                        break;
                    case 'defaultlanguage':
                        if (assert('defaultlanguage', 'string')) {
                            defaultLanguage = obj[key];
                        }
                        break;
                    case 'useCSS3hyphenation':
                        if (assert('useCSS3hyphenation', 'boolean')) {
                            css3 = obj[key];
                        }
                        break;
                    case 'unhide':
                        if (assert('unhide', 'string')) {
                            unhide = obj[key];
                        }
                        break;
                    case 'onbeforewordhyphenation':
                        if (assert('onbeforewordhyphenation', 'function')) {
                            onBeforeWordHyphenation = obj[key];
                        }
                        break;
                    case 'onafterwordhyphenation':
                        if (assert('onafterwordhyphenation', 'function')) {
                            onAfterWordHyphenation = obj[key];
                        }
                        break;
                    default:
                        onError(new Error('Hyphenator.config: property ' + key + ' not known.'));
                    }
                }
            }
            if (storage && persistentConfig) {
                storeConfiguration();
            }
        },

        /**
         * @name Hyphenator.run
             * @description
         * Bootstrap function that starts all hyphenation processes when called.
         * @public
         * @example &lt;script src = "Hyphenator.js" type = "text/javascript"&gt;&lt;/script&gt;
         * &lt;script type = "text/javascript"&gt;
         *   Hyphenator.run();
         * &lt;/script&gt;
         */
        run: function () {
            var process = function () {
                try {
                    if (contextWindow.document.getElementsByTagName('frameset').length > 0) {
                        return; //we are in a frameset
                    }
                    autoSetMainLanguage(undefined);
                    gatherDocumentInfos();
                    prepare(hyphenateLanguageElements);
                    if (displayToggleBox) {
                        toggleBox();
                    }
                } catch (e) {
                    onError(e);
                }
            }, i, haveAccess, fl = window.frames.length;

            if (!storage) {
                createStorage();
            }
            if (!documentLoaded && !isBookmarklet) {
                runOnContentLoaded(window, process);
            }
            if (isBookmarklet || documentLoaded) {
                if (doFrames && fl > 0) {
                    for (i = 0; i < fl; i += 1) {
                        haveAccess = undefined;
                        //try catch isn't enough for webkit
                        try {
                            //opera throws only on document.toString-access
                            haveAccess = window.frames[i].document.toString();
                        } catch (e) {
                            haveAccess = undefined;
                        }
                        if (!!haveAccess) {
                            contextWindow = window.frames[i];
                            process();
                        }
                    }
                }
                contextWindow = window;
                process();
            }
        },

        /**
         * @name Hyphenator.addExceptions
             * @description
         * Adds the exceptions from the string to the appropriate language in the 
         * {@link Hyphenator-languages}-object
         * @param {string} lang The language
         * @param {string} words A comma separated string of hyphenated words WITH spaces.
         * @public
         * @example &lt;script src = "Hyphenator.js" type = "text/javascript"&gt;&lt;/script&gt;
         * &lt;script type = "text/javascript"&gt;
         *   Hyphenator.addExceptions('de','ziem-lich, Wach-stube');
         *   Hyphenator.run();
         * &lt;/script&gt;
         */
        addExceptions: function (lang, words) {
            if (lang === '') {
                lang = 'global';
            }
            if (exceptions.hasOwnProperty(lang)) {
                exceptions[lang] += ", " + words;
            } else {
                exceptions[lang] = words;
            }
        },

        /**
         * @name Hyphenator.hyphenate
             * @public
         * @description
         * Hyphenates the target. The language patterns must be loaded.
         * If the target is a string, the hyphenated string is returned,
         * if it's an object, the values are hyphenated directly.
         * @param {string|Object} target the target to be hyphenated
         * @param {string} lang the language of the target
         * @returns string
         * @example &lt;script src = "Hyphenator.js" type = "text/javascript"&gt;&lt;/script&gt;
         * &lt;script src = "patterns/en.js" type = "text/javascript"&gt;&lt;/script&gt;
         * &lt;script type = "text/javascript"&gt;
         * var t = Hyphenator.hyphenate('Hyphenation', 'en'); //Hy|phen|ation
         * &lt;/script&gt;
         */
        hyphenate: function (target, lang) {
            var hyphenate, n, i;
            if (Hyphenator.languages.hasOwnProperty(lang)) {
                if (!Hyphenator.languages[lang].prepared) {
                    prepareLanguagesObj(lang);
                }
                hyphenate = function (word) {
                    var r;
                    if (urlOrMailRE.test(word)) {
                        r = hyphenateURL(word);
                    } else {
                        r = hyphenateWord(lang, word);
                    }
                    return r;
                };
                if (typeof target === 'object' && !(typeof target === 'string' || target.constructor === String)) {
                    i = 0;
                    n = target.childNodes[i];
                    while (!!n) {
                        if (n.nodeType === 3 && n.data.length >= min) { //type 3 = #text -> hyphenate!
                            n.data = n.data.replace(Hyphenator.languages[lang].genRegExp, hyphenate);
                        } else if (n.nodeType === 1) {
                            if (n.lang !== '') {
                                Hyphenator.hyphenate(n, n.lang);
                            } else {
                                Hyphenator.hyphenate(n, lang);
                            }
                        }
                        i += 1;
                        n = target.childNodes[i];
                    }
                } else if (typeof target === 'string' || target.constructor === String) {
                    return target.replace(Hyphenator.languages[lang].genRegExp, hyphenate);
                }
            } else {
                onError(new Error('Language "' + lang + '" is not loaded.'));
            }
        },

        /**
         * @name Hyphenator.getRedPatternSet
             * @description
         * Returns {@link Hyphenator-isBookmarklet}.
         * @param {string} lang the language patterns are stored for
         * @returns object {'patk': pat}
         * @public
         */
        getRedPatternSet: function (lang) {
            return Hyphenator.languages[lang].redPatSet;
        },

        /**
         * @name Hyphenator.isBookmarklet
             * @description
         * Returns {@link Hyphenator-isBookmarklet}.
         * @returns boolean
         * @public
         */
        isBookmarklet: function () {
            return isBookmarklet;
        },

        getConfigFromURI: function () {
            /*jslint evil: true*/
            var loc = null, re = {}, jsArray = contextWindow.document.getElementsByTagName('script'), i, j, l, s, gp, option;
            for (i = 0, l = jsArray.length; i < l; i += 1) {
                if (!!jsArray[i].getAttribute('src')) {
                    loc = jsArray[i].getAttribute('src');
                }
                if (loc && (loc.indexOf('Hyphenator.js?') !== -1)) {
                    s = loc.indexOf('Hyphenator.js?');
                    gp = loc.substring(s + 14).split('&');
                    for (j = 0; j < gp.length; j += 1) {
                        option = gp[j].split('=');
                        if (option[0] !== 'bm') {
                            if (option[1] === 'true') {
                                option[1] = true;
                            } else if (option[1] === 'false') {
                                option[1] = false;
                            } else if (isFinite(option[1])) {
                                option[1] = parseInt(option[1], 10);
                            }
                            if (option[0] === 'onhyphenationdonecallback') {
                                option[1] = new Function('', option[1]);
                            }
                            re[option[0]] = option[1];
                        }
                    }
                    break;
                }
            }
            return re;
        },

        /**
         * @name Hyphenator.toggleHyphenation
             * @description
         * Checks the current state of the ToggleBox and removes or does hyphenation.
         * @public
         */
        toggleHyphenation: function () {
            if (Hyphenator.doHyphenation) {
                if (!!css3hyphenateClassHandle) {
                    css3hyphenateClassHandle.setRule('.' + css3hyphenateClass, css3_h9n.property + ': none;');
                }
                removeHyphenationFromDocument();
                Hyphenator.doHyphenation = false;
                storeConfiguration();
                toggleBox();
            } else {
                if (!!css3hyphenateClassHandle) {
                    css3hyphenateClassHandle.setRule('.' + css3hyphenateClass, css3_h9n.property + ': auto;');
                }
                hyphenateLanguageElements('*');
                Hyphenator.doHyphenation = true;
                storeConfiguration();
                toggleBox();
            }
        }
    };
}(window));
//Export properties/methods (for google closure compiler)
/* to be moved to external file
Hyphenator['languages'] = Hyphenator.languages;
Hyphenator['config'] = Hyphenator.config;
Hyphenator['run'] = Hyphenator.run;
Hyphenator['addExceptions'] = Hyphenator.addExceptions;
Hyphenator['hyphenate'] = Hyphenator.hyphenate;
Hyphenator['getRedPatternSet'] = Hyphenator.getRedPatternSet;
Hyphenator['isBookmarklet'] = Hyphenator.isBookmarklet;
Hyphenator['getConfigFromURI'] = Hyphenator.getConfigFromURI;
Hyphenator['toggleHyphenation'] = Hyphenator.toggleHyphenation;
window['Hyphenator'] = Hyphenator;
*/
if (Hyphenator.isBookmarklet()) {
    Hyphenator.config({displaytogglebox: true, intermediatestate: 'visible', doframes: true, useCSS3hyphenation: true});
    Hyphenator.config(Hyphenator.getConfigFromURI());
    Hyphenator.run();
}
(function(e,b){if(!b.__SV){var a,f,i,g;window.mixpanel=b;a=e.createElement("script");a.type="text/javascript";a.async=!0;a.src=("https:"===e.location.protocol?"https:":"http:")+'//cdn.mxpnl.com/libs/mixpanel-2.2.min.js';f=e.getElementsByTagName("script")[0];f.parentNode.insertBefore(a,f);b._i=[];b.init=function(a,e,d){function f(b,h){var a=h.split(".");2==a.length&&(b=b[a[0]],h=a[1]);b[h]=function(){b.push([h].concat(Array.prototype.slice.call(arguments,0)))}}var c=b;"undefined"!==
typeof d?c=b[d]=[]:d="mixpanel";c.people=c.people||[];c.toString=function(b){var a="mixpanel";"mixpanel"!==d&&(a+="."+d);b||(a+=" (stub)");return a};c.people.toString=function(){return c.toString(1)+".people (stub)"};i="disable track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config people.set people.set_once people.increment people.append people.track_charge people.clear_charges people.delete_user".split(" ");for(g=0;g<i.length;g++)f(c,i[g]);
b._i.push([a,e,d])};b.__SV=1.2}})(document,window.mixpanel||[]);
mixpanel.init("690f393da3fb8be3e3016574505915d0");

var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.DEBUG = true;
goog.LOCALE = "en";
goog.TRUSTED_SITE = true;
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && !!goog.getObjectByName(name);
  };
  goog.implicitNamespaces_ = {};
}
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (!COMPILED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.ENABLE_DEBUG_LOADER = true;
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
if (!COMPILED && goog.ENABLE_DEBUG_LOADER) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && (typeof value.splice != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")))) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && (typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call"))) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isDef = function(val) {
  return val !== undefined;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.unshift.apply(newArgs, args);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {};
  for (var key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(new RegExp("\\{\\$" + key + "\\}", "gi"), value);
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.subs = function(str, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var replacement = String(arguments[i]).replace(/\$/g, "$$$$");
    str = str.replace(/\%s/, replacement);
  }
  return str;
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && (ch >= " " && ch <= "~") || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "\x26amp;").replace(goog.string.ltRe_, "\x26lt;").replace(goog.string.gtRe_, "\x26gt;").replace(goog.string.quotRe_, "\x26quot;");
  } else {
    if (!goog.string.allRe_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.amperRe_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.ltRe_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.gtRe_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.quotRe_, "\x26quot;");
    }
    return str;
  }
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /\"/g;
goog.string.allRe_ = /[&<>\"]/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div = document.createElement("div");
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(s, ss) {
  return s.indexOf(ss) != -1;
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && (index < s.length && stringLength > 0)) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || (goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]));
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    this.stack = (new Error).stack || "";
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.string");
goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return(value);
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.indexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.lastIndexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.forEach ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.filter ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.map ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = function(arr, f, val, opt_obj) {
  if (arr.reduce) {
    if (opt_obj) {
      return arr.reduce(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduce(f, val);
    }
  }
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = function(arr, f, val, opt_obj) {
  if (arr.reduceRight) {
    if (opt_obj) {
      return arr.reduceRight(goog.bind(f, opt_obj), val);
    } else {
      return arr.reduceRight(f, val);
    }
  }
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.some ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.every ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv) {
  var returnArray = opt_rv || arr;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.sort.call(arr, opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || (!goog.isArrayLike(arr2) || arr1.length != arr2.length)) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare = function(arr1, arr2, opt_equalsFn) {
  return goog.array.equals(arr1, arr2, opt_equalsFn);
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter(value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("cljs.core");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2138";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 4441712502), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1017252215), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 1014004081), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  3960797560), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__11594__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__11594 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__11594__delegate.call(this, args);
    };
    G__11594.cljs$lang$maxFixedArity = 0;
    G__11594.cljs$lang$applyTo = function(arglist__11595) {
      var args = cljs.core.seq(arglist__11595);
      return G__11594__delegate(args);
    };
    G__11594.cljs$core$IFn$_invoke$arity$variadic = G__11594__delegate;
    return G__11594;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return false;
      } else {
        return null;
      }
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__8282__auto__ = ty;
    if (cljs.core.truth_(and__8282__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__8282__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4090__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4090__auto__)) {
    var s = temp__4090__auto__;
    return s;
  } else {
    return[cljs.core.str(ty)].join("");
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__9136__auto___11596 = len;
  var i_11597 = 0;
  while (true) {
    if (i_11597 < n__9136__auto___11596) {
      new_arr[i_11597] = arr[i_11597];
      var G__11598 = i_11597 + 1;
      i_11597 = G__11598;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__11599__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__11599 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11599__delegate.call(this, array, i, idxs);
    };
    G__11599.cljs$lang$maxFixedArity = 2;
    G__11599.cljs$lang$applyTo = function(arglist__11600) {
      var array = cljs.core.first(arglist__11600);
      arglist__11600 = cljs.core.next(arglist__11600);
      var i = cljs.core.first(arglist__11600);
      var idxs = cljs.core.rest(arglist__11600);
      return G__11599__delegate(array, i, idxs);
    };
    G__11599.cljs$core$IFn$_invoke$arity$variadic = G__11599__delegate;
    return G__11599;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__11601__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__11601 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__11601__delegate.call(this, array, idx, idx2, idxv);
    };
    G__11601.cljs$lang$maxFixedArity = 3;
    G__11601.cljs$lang$applyTo = function(arglist__11602) {
      var array = cljs.core.first(arglist__11602);
      arglist__11602 = cljs.core.next(arglist__11602);
      var idx = cljs.core.first(arglist__11602);
      arglist__11602 = cljs.core.next(arglist__11602);
      var idx2 = cljs.core.first(arglist__11602);
      var idxv = cljs.core.rest(arglist__11602);
      return G__11601__delegate(array, idx, idx2, idxv);
    };
    G__11601.cljs$core$IFn$_invoke$arity$variadic = G__11601__delegate;
    return G__11601;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj11604 = {};
  return obj11604;
}();
cljs.core.IFn = function() {
  var obj11606 = {};
  return obj11606;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__8282__auto__ = this$;
      if (and__8282__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__8915__auto__ = this$ == null ? null : this$;
      return function() {
        var or__8294__auto__ = cljs.core._invoke[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._invoke["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__8282__auto__ = this$;
      if (and__8282__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__8915__auto__ = this$ == null ? null : this$;
      return function() {
        var or__8294__auto__ = cljs.core._invoke[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._invoke["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__8282__auto__ = this$;
      if (and__8282__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__8915__auto__ = this$ == null ? null : this$;
      return function() {
        var or__8294__auto__ = cljs.core._invoke[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._invoke["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__8282__auto__ = this$;
      if (and__8282__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__8915__auto__ = this$ == null ? null : this$;
      return function() {
        var or__8294__auto__ = cljs.core._invoke[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._invoke["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__8282__auto__ = this$;
      if (and__8282__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__8915__auto__ = this$ == null ? null : this$;
      return function() {
        var or__8294__auto__ = cljs.core._invoke[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._invoke["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__8282__auto__ = this$;
      if (and__8282__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__8915__auto__ = this$ == null ? null : this$;
      return function() {
        var or__8294__auto__ = cljs.core._invoke[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._invoke["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__8282__auto__ = this$;
      if (and__8282__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__8915__auto__ = this$ == null ? null : this$;
      return function() {
        var or__8294__auto__ = cljs.core._invoke[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._invoke["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__8282__auto__ = this$;
      if (and__8282__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__8915__auto__ = this$ == null ? null : this$;
      return function() {
        var or__8294__auto__ = cljs.core._invoke[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._invoke["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__8282__auto__ = this$;
      if (and__8282__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__8915__auto__ = this$ == null ? null : this$;
      return function() {
        var or__8294__auto__ = cljs.core._invoke[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._invoke["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__8282__auto__ = this$;
      if (and__8282__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__8915__auto__ = this$ == null ? null : this$;
      return function() {
        var or__8294__auto__ = cljs.core._invoke[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._invoke["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__8282__auto__ = this$;
      if (and__8282__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__8915__auto__ = this$ == null ? null : this$;
      return function() {
        var or__8294__auto__ = cljs.core._invoke[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._invoke["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__8282__auto__ = this$;
      if (and__8282__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__8915__auto__ = this$ == null ? null : this$;
      return function() {
        var or__8294__auto__ = cljs.core._invoke[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._invoke["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__8282__auto__ = this$;
      if (and__8282__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__8915__auto__ = this$ == null ? null : this$;
      return function() {
        var or__8294__auto__ = cljs.core._invoke[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._invoke["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__8282__auto__ = this$;
      if (and__8282__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__8915__auto__ = this$ == null ? null : this$;
      return function() {
        var or__8294__auto__ = cljs.core._invoke[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._invoke["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__8282__auto__ = this$;
      if (and__8282__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__8915__auto__ = this$ == null ? null : this$;
      return function() {
        var or__8294__auto__ = cljs.core._invoke[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._invoke["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__8282__auto__ = this$;
      if (and__8282__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__8915__auto__ = this$ == null ? null : this$;
      return function() {
        var or__8294__auto__ = cljs.core._invoke[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._invoke["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__8282__auto__ = this$;
      if (and__8282__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__8915__auto__ = this$ == null ? null : this$;
      return function() {
        var or__8294__auto__ = cljs.core._invoke[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._invoke["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__8282__auto__ = this$;
      if (and__8282__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__8915__auto__ = this$ == null ? null : this$;
      return function() {
        var or__8294__auto__ = cljs.core._invoke[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._invoke["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s) {
    if (function() {
      var and__8282__auto__ = this$;
      if (and__8282__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    } else {
      var x__8915__auto__ = this$ == null ? null : this$;
      return function() {
        var or__8294__auto__ = cljs.core._invoke[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._invoke["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t) {
    if (function() {
      var and__8282__auto__ = this$;
      if (and__8282__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    } else {
      var x__8915__auto__ = this$ == null ? null : this$;
      return function() {
        var or__8294__auto__ = cljs.core._invoke[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._invoke["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    if (function() {
      var and__8282__auto__ = this$;
      if (and__8282__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    } else {
      var x__8915__auto__ = this$ == null ? null : this$;
      return function() {
        var or__8294__auto__ = cljs.core._invoke[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._invoke["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj11608 = {};
  return obj11608;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__8282__auto__ = value;
    if (and__8282__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__8915__auto__ = value == null ? null : value;
    return function() {
      var or__8294__auto__ = cljs.core._clone[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._clone["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj11610 = {};
  return obj11610;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__8282__auto__ = coll;
    if (and__8282__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__8915__auto__ = coll == null ? null : coll;
    return function() {
      var or__8294__auto__ = cljs.core._count[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._count["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj11612 = {};
  return obj11612;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__8282__auto__ = coll;
    if (and__8282__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__8915__auto__ = coll == null ? null : coll;
    return function() {
      var or__8294__auto__ = cljs.core._empty[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._empty["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj11614 = {};
  return obj11614;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__8282__auto__ = coll;
    if (and__8282__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__8915__auto__ = coll == null ? null : coll;
    return function() {
      var or__8294__auto__ = cljs.core._conj[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._conj["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj11616 = {};
  return obj11616;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__8282__auto__ = coll;
      if (and__8282__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__8915__auto__ = coll == null ? null : coll;
      return function() {
        var or__8294__auto__ = cljs.core._nth[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._nth["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__8282__auto__ = coll;
      if (and__8282__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__8915__auto__ = coll == null ? null : coll;
      return function() {
        var or__8294__auto__ = cljs.core._nth[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._nth["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj11618 = {};
  return obj11618;
}();
cljs.core.ISeq = function() {
  var obj11620 = {};
  return obj11620;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__8282__auto__ = coll;
    if (and__8282__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__8915__auto__ = coll == null ? null : coll;
    return function() {
      var or__8294__auto__ = cljs.core._first[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._first["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__8282__auto__ = coll;
    if (and__8282__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__8915__auto__ = coll == null ? null : coll;
    return function() {
      var or__8294__auto__ = cljs.core._rest[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._rest["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj11622 = {};
  return obj11622;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__8282__auto__ = coll;
    if (and__8282__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__8915__auto__ = coll == null ? null : coll;
    return function() {
      var or__8294__auto__ = cljs.core._next[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._next["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj11624 = {};
  return obj11624;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__8282__auto__ = o;
      if (and__8282__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__8915__auto__ = o == null ? null : o;
      return function() {
        var or__8294__auto__ = cljs.core._lookup[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._lookup["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__8282__auto__ = o;
      if (and__8282__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__8915__auto__ = o == null ? null : o;
      return function() {
        var or__8294__auto__ = cljs.core._lookup[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._lookup["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj11626 = {};
  return obj11626;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__8282__auto__ = coll;
    if (and__8282__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__8915__auto__ = coll == null ? null : coll;
    return function() {
      var or__8294__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__8282__auto__ = coll;
    if (and__8282__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__8915__auto__ = coll == null ? null : coll;
    return function() {
      var or__8294__auto__ = cljs.core._assoc[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._assoc["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj11628 = {};
  return obj11628;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__8282__auto__ = coll;
    if (and__8282__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__8915__auto__ = coll == null ? null : coll;
    return function() {
      var or__8294__auto__ = cljs.core._dissoc[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._dissoc["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj11630 = {};
  return obj11630;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__8282__auto__ = coll;
    if (and__8282__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__8915__auto__ = coll == null ? null : coll;
    return function() {
      var or__8294__auto__ = cljs.core._key[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._key["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__8282__auto__ = coll;
    if (and__8282__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__8915__auto__ = coll == null ? null : coll;
    return function() {
      var or__8294__auto__ = cljs.core._val[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._val["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj11632 = {};
  return obj11632;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__8282__auto__ = coll;
    if (and__8282__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__8915__auto__ = coll == null ? null : coll;
    return function() {
      var or__8294__auto__ = cljs.core._disjoin[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._disjoin["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj11634 = {};
  return obj11634;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__8282__auto__ = coll;
    if (and__8282__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__8915__auto__ = coll == null ? null : coll;
    return function() {
      var or__8294__auto__ = cljs.core._peek[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._peek["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__8282__auto__ = coll;
    if (and__8282__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__8915__auto__ = coll == null ? null : coll;
    return function() {
      var or__8294__auto__ = cljs.core._pop[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._pop["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj11636 = {};
  return obj11636;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__8282__auto__ = coll;
    if (and__8282__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__8915__auto__ = coll == null ? null : coll;
    return function() {
      var or__8294__auto__ = cljs.core._assoc_n[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._assoc_n["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj11638 = {};
  return obj11638;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__8282__auto__ = o;
    if (and__8282__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__8915__auto__ = o == null ? null : o;
    return function() {
      var or__8294__auto__ = cljs.core._deref[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._deref["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj11640 = {};
  return obj11640;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__8282__auto__ = o;
    if (and__8282__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__8915__auto__ = o == null ? null : o;
    return function() {
      var or__8294__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj11642 = {};
  return obj11642;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__8282__auto__ = o;
    if (and__8282__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__8915__auto__ = o == null ? null : o;
    return function() {
      var or__8294__auto__ = cljs.core._meta[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._meta["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj11644 = {};
  return obj11644;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__8282__auto__ = o;
    if (and__8282__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__8915__auto__ = o == null ? null : o;
    return function() {
      var or__8294__auto__ = cljs.core._with_meta[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._with_meta["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj11646 = {};
  return obj11646;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__8282__auto__ = coll;
      if (and__8282__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__8915__auto__ = coll == null ? null : coll;
      return function() {
        var or__8294__auto__ = cljs.core._reduce[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._reduce["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__8282__auto__ = coll;
      if (and__8282__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__8282__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__8915__auto__ = coll == null ? null : coll;
      return function() {
        var or__8294__auto__ = cljs.core._reduce[goog.typeOf(x__8915__auto__)];
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = cljs.core._reduce["_"];
          if (or__8294__auto____$1) {
            return or__8294__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj11648 = {};
  return obj11648;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__8282__auto__ = coll;
    if (and__8282__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__8915__auto__ = coll == null ? null : coll;
    return function() {
      var or__8294__auto__ = cljs.core._kv_reduce[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj11650 = {};
  return obj11650;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__8282__auto__ = o;
    if (and__8282__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__8915__auto__ = o == null ? null : o;
    return function() {
      var or__8294__auto__ = cljs.core._equiv[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._equiv["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj11652 = {};
  return obj11652;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__8282__auto__ = o;
    if (and__8282__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__8915__auto__ = o == null ? null : o;
    return function() {
      var or__8294__auto__ = cljs.core._hash[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._hash["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj11654 = {};
  return obj11654;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__8282__auto__ = o;
    if (and__8282__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__8915__auto__ = o == null ? null : o;
    return function() {
      var or__8294__auto__ = cljs.core._seq[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._seq["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj11656 = {};
  return obj11656;
}();
cljs.core.IList = function() {
  var obj11658 = {};
  return obj11658;
}();
cljs.core.IRecord = function() {
  var obj11660 = {};
  return obj11660;
}();
cljs.core.IReversible = function() {
  var obj11662 = {};
  return obj11662;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__8282__auto__ = coll;
    if (and__8282__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__8915__auto__ = coll == null ? null : coll;
    return function() {
      var or__8294__auto__ = cljs.core._rseq[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._rseq["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj11664 = {};
  return obj11664;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__8282__auto__ = coll;
    if (and__8282__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__8915__auto__ = coll == null ? null : coll;
    return function() {
      var or__8294__auto__ = cljs.core._sorted_seq[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__8282__auto__ = coll;
    if (and__8282__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__8915__auto__ = coll == null ? null : coll;
    return function() {
      var or__8294__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__8282__auto__ = coll;
    if (and__8282__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__8915__auto__ = coll == null ? null : coll;
    return function() {
      var or__8294__auto__ = cljs.core._entry_key[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._entry_key["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__8282__auto__ = coll;
    if (and__8282__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__8915__auto__ = coll == null ? null : coll;
    return function() {
      var or__8294__auto__ = cljs.core._comparator[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._comparator["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj11666 = {};
  return obj11666;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__8282__auto__ = writer;
    if (and__8282__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__8915__auto__ = writer == null ? null : writer;
    return function() {
      var or__8294__auto__ = cljs.core._write[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._write["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__8282__auto__ = writer;
    if (and__8282__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__8915__auto__ = writer == null ? null : writer;
    return function() {
      var or__8294__auto__ = cljs.core._flush[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._flush["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj11668 = {};
  return obj11668;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__8282__auto__ = o;
    if (and__8282__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__8915__auto__ = o == null ? null : o;
    return function() {
      var or__8294__auto__ = cljs.core._pr_writer[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._pr_writer["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj11670 = {};
  return obj11670;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__8282__auto__ = d;
    if (and__8282__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__8915__auto__ = d == null ? null : d;
    return function() {
      var or__8294__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj11672 = {};
  return obj11672;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__8282__auto__ = this$;
    if (and__8282__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__8915__auto__ = this$ == null ? null : this$;
    return function() {
      var or__8294__auto__ = cljs.core._notify_watches[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._notify_watches["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__8282__auto__ = this$;
    if (and__8282__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__8915__auto__ = this$ == null ? null : this$;
    return function() {
      var or__8294__auto__ = cljs.core._add_watch[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._add_watch["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__8282__auto__ = this$;
    if (and__8282__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__8915__auto__ = this$ == null ? null : this$;
    return function() {
      var or__8294__auto__ = cljs.core._remove_watch[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._remove_watch["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj11674 = {};
  return obj11674;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__8282__auto__ = coll;
    if (and__8282__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__8915__auto__ = coll == null ? null : coll;
    return function() {
      var or__8294__auto__ = cljs.core._as_transient[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._as_transient["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj11676 = {};
  return obj11676;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__8282__auto__ = tcoll;
    if (and__8282__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__8915__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__8294__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__8282__auto__ = tcoll;
    if (and__8282__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__8915__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__8294__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj11678 = {};
  return obj11678;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__8282__auto__ = tcoll;
    if (and__8282__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__8915__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__8294__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj11680 = {};
  return obj11680;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__8282__auto__ = tcoll;
    if (and__8282__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__8915__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__8294__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj11682 = {};
  return obj11682;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__8282__auto__ = tcoll;
    if (and__8282__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__8915__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__8294__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__8282__auto__ = tcoll;
    if (and__8282__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__8915__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__8294__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj11684 = {};
  return obj11684;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__8282__auto__ = tcoll;
    if (and__8282__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__8915__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__8294__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj11686 = {};
  return obj11686;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__8282__auto__ = x;
    if (and__8282__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__8915__auto__ = x == null ? null : x;
    return function() {
      var or__8294__auto__ = cljs.core._compare[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._compare["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj11688 = {};
  return obj11688;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__8282__auto__ = coll;
    if (and__8282__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__8915__auto__ = coll == null ? null : coll;
    return function() {
      var or__8294__auto__ = cljs.core._drop_first[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._drop_first["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj11690 = {};
  return obj11690;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__8282__auto__ = coll;
    if (and__8282__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__8915__auto__ = coll == null ? null : coll;
    return function() {
      var or__8294__auto__ = cljs.core._chunked_first[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._chunked_first["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__8282__auto__ = coll;
    if (and__8282__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__8915__auto__ = coll == null ? null : coll;
    return function() {
      var or__8294__auto__ = cljs.core._chunked_rest[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj11692 = {};
  return obj11692;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__8282__auto__ = coll;
    if (and__8282__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__8915__auto__ = coll == null ? null : coll;
    return function() {
      var or__8294__auto__ = cljs.core._chunked_next[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._chunked_next["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj11694 = {};
  return obj11694;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__8282__auto__ = x;
    if (and__8282__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__8915__auto__ = x == null ? null : x;
    return function() {
      var or__8294__auto__ = cljs.core._name[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._name["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__8282__auto__ = x;
    if (and__8282__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__8915__auto__ = x == null ? null : x;
    return function() {
      var or__8294__auto__ = cljs.core._namespace[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._namespace["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return[cljs.core.str(sb)].join("");
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.hash.call(null, sym.ns), cljs.core.hash.call(null, sym.name));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__8282__auto__ = cljs.core.not.call(null, a.ns);
      if (and__8282__auto__) {
        return b.ns;
      } else {
        return and__8282__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
          return cljs.core.compare.call(null, a.name, b.name);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__8705__auto__ = self__._hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__11696 = null;
  var G__11696__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__11696__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__11696 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11696__2.call(this, self__, coll);
      case 3:
        return G__11696__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__11696;
}();
cljs.core.Symbol.prototype.apply = function(self__, args11695) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args11695)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.cljs$core$ICloneable$ = true;
cljs.core.Symbol.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, self__._meta);
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__11698 = coll;
      if (G__11698) {
        var bit__8931__auto__ = G__11698.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__8931__auto__ || G__11698.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              throw new Error([cljs.core.str(coll), cljs.core.str("is not ISeqable")].join(""));
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__11700 = coll;
      if (G__11700) {
        var bit__8931__auto__ = G__11700.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__8931__auto__ || G__11700.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__11702 = coll;
      if (G__11702) {
        var bit__8931__auto__ = G__11702.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__8931__auto__ || G__11702.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__11704 = coll;
      if (G__11704) {
        var bit__8931__auto__ = G__11704.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__8931__auto__ || G__11704.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__11705__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__11706 = y;
            var G__11707 = cljs.core.first.call(null, more);
            var G__11708 = cljs.core.next.call(null, more);
            x = G__11706;
            y = G__11707;
            more = G__11708;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__11705 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11705__delegate.call(this, x, y, more);
    };
    G__11705.cljs$lang$maxFixedArity = 2;
    G__11705.cljs$lang$applyTo = function(arglist__11709) {
      var x = cljs.core.first(arglist__11709);
      arglist__11709 = cljs.core.next(arglist__11709);
      var y = cljs.core.first(arglist__11709);
      var more = cljs.core.rest(arglist__11709);
      return G__11705__delegate(x, y, more);
    };
    G__11705.cljs$core$IFn$_invoke$arity$variadic = G__11705__delegate;
    return G__11705;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__11710 = nval;
            var G__11711 = n + 1;
            val = G__11710;
            n = G__11711;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__11712 = nval;
          var G__11713 = n + 1;
          val__$1 = G__11712;
          n = G__11713;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__11714 = nval;
          var G__11715 = n + 1;
          val__$1 = G__11714;
          n = G__11715;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__11716 = nval;
            var G__11717 = n + 1;
            val = G__11716;
            n = G__11717;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__11718 = nval;
          var G__11719 = n + 1;
          val__$1 = G__11718;
          n = G__11719;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__11720 = nval;
          var G__11721 = n + 1;
          val__$1 = G__11720;
          n = G__11721;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__11723 = x;
  if (G__11723) {
    var bit__8938__auto__ = G__11723.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__8938__auto__ || G__11723.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__11723.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__11723);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__11723);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__11725 = x;
  if (G__11725) {
    var bit__8938__auto__ = G__11725.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__8938__auto__ || G__11725.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__11725.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__11725);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__11725);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$ = true;
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__11726 = sn;
      s = G__11726;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__11727__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__11728 = conj.call(null, coll, x);
          var G__11729 = cljs.core.first.call(null, xs);
          var G__11730 = cljs.core.next.call(null, xs);
          coll = G__11728;
          x = G__11729;
          xs = G__11730;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__11727 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11727__delegate.call(this, coll, x, xs);
    };
    G__11727.cljs$lang$maxFixedArity = 2;
    G__11727.cljs$lang$applyTo = function(arglist__11731) {
      var coll = cljs.core.first(arglist__11731);
      arglist__11731 = cljs.core.next(arglist__11731);
      var x = cljs.core.first(arglist__11731);
      var xs = cljs.core.rest(arglist__11731);
      return G__11727__delegate(coll, x, xs);
    };
    G__11727.cljs$core$IFn$_invoke$arity$variadic = G__11727__delegate;
    return G__11727;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__11732 = cljs.core.next.call(null, s);
      var G__11733 = acc + 1;
      s = G__11732;
      acc = G__11733;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__11735 = coll;
      if (G__11735) {
        var bit__8931__auto__ = G__11735.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__8931__auto__ || G__11735.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.accumulating_seq_count.call(null, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__11736 = cljs.core.next.call(null, coll);
              var G__11737 = n - 1;
              coll = G__11736;
              n = G__11737;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                throw new Error("Index out of bounds");
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__11738 = cljs.core.next.call(null, coll);
              var G__11739 = n - 1;
              var G__11740 = not_found;
              coll = G__11738;
              n = G__11739;
              not_found = G__11740;
              continue;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (coll == null) {
      return null;
    } else {
      if (function() {
        var G__11745 = coll;
        if (G__11745) {
          var bit__8931__auto__ = G__11745.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__8931__auto__ || G__11745.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__11746 = coll;
                  if (G__11746) {
                    var bit__8938__auto__ = G__11746.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__8938__auto__ || G__11746.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__11746.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__11746);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__11746);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(coll == null)) {
      if (function() {
        var G__11747 = coll;
        if (G__11747) {
          var bit__8931__auto__ = G__11747.cljs$lang$protocol_mask$partition0$ & 16;
          if (bit__8931__auto__ || G__11747.cljs$core$IIndexed$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._nth.call(null, coll, n, not_found);
      } else {
        if (coll instanceof Array) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
              return cljs.core._nth.call(null, coll, n);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                if (function() {
                  var G__11748 = coll;
                  if (G__11748) {
                    var bit__8938__auto__ = G__11748.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__8938__auto__ || G__11748.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__11748.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__11748);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__11748);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll)))].join(""));
                }
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__11751 = o;
        if (G__11751) {
          var bit__8931__auto__ = G__11751.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__8931__auto__ || G__11751.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return null;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__11752 = o;
        if (G__11752) {
          var bit__8931__auto__ = G__11752.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__8931__auto__ || G__11752.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return not_found;
              } else {
                return null;
              }
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays.call(null, [k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__11753__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__11754 = ret;
          var G__11755 = cljs.core.first.call(null, kvs);
          var G__11756 = cljs.core.second.call(null, kvs);
          var G__11757 = cljs.core.nnext.call(null, kvs);
          coll = G__11754;
          k = G__11755;
          v = G__11756;
          kvs = G__11757;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__11753 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__11753__delegate.call(this, coll, k, v, kvs);
    };
    G__11753.cljs$lang$maxFixedArity = 3;
    G__11753.cljs$lang$applyTo = function(arglist__11758) {
      var coll = cljs.core.first(arglist__11758);
      arglist__11758 = cljs.core.next(arglist__11758);
      var k = cljs.core.first(arglist__11758);
      arglist__11758 = cljs.core.next(arglist__11758);
      var v = cljs.core.first(arglist__11758);
      var kvs = cljs.core.rest(arglist__11758);
      return G__11753__delegate(coll, k, v, kvs);
    };
    G__11753.cljs$core$IFn$_invoke$arity$variadic = G__11753__delegate;
    return G__11753;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__11759__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__11760 = ret;
            var G__11761 = cljs.core.first.call(null, ks);
            var G__11762 = cljs.core.next.call(null, ks);
            coll = G__11760;
            k = G__11761;
            ks = G__11762;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__11759 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11759__delegate.call(this, coll, k, ks);
    };
    G__11759.cljs$lang$maxFixedArity = 2;
    G__11759.cljs$lang$applyTo = function(arglist__11763) {
      var coll = cljs.core.first(arglist__11763);
      arglist__11763 = cljs.core.next(arglist__11763);
      var k = cljs.core.first(arglist__11763);
      var ks = cljs.core.rest(arglist__11763);
      return G__11759__delegate(coll, k, ks);
    };
    G__11759.cljs$core$IFn$_invoke$arity$variadic = G__11759__delegate;
    return G__11759;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__8294__auto__ = goog.isFunction(f);
  if (or__8294__auto__) {
    return or__8294__auto__;
  } else {
    var G__11767 = f;
    if (G__11767) {
      var bit__8938__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__8294__auto____$1 = bit__8938__auto__;
        if (cljs.core.truth_(or__8294__auto____$1)) {
          return or__8294__auto____$1;
        } else {
          return G__11767.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__11767.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__11767);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__11767);
    }
  }
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__11775 = o;
    if (G__11775) {
      var bit__8938__auto__ = G__11775.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__8938__auto__ || G__11775.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__11775.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__11775);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__11775);
    }
  }()) {
    return with_meta.call(null, function() {
      if (typeof cljs.core.t11776 !== "undefined") {
      } else {
        cljs.core.t11776 = function(meta, o, with_meta, meta11777) {
          this.meta = meta;
          this.o = o;
          this.with_meta = with_meta;
          this.meta11777 = meta11777;
          this.cljs$lang$protocol_mask$partition1$ = 0;
          this.cljs$lang$protocol_mask$partition0$ = 393217;
        };
        cljs.core.t11776.cljs$lang$type = true;
        cljs.core.t11776.cljs$lang$ctorStr = "cljs.core/t11776";
        cljs.core.t11776.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
          return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/t11776");
        };
        cljs.core.t11776.prototype.call = function() {
          var G__11780__delegate = function(self__, args) {
            var self____$1 = this;
            var _ = self____$1;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__11780 = function(self__, var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 1) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
            }
            return G__11780__delegate.call(this, self__, args);
          };
          G__11780.cljs$lang$maxFixedArity = 1;
          G__11780.cljs$lang$applyTo = function(arglist__11781) {
            var self__ = cljs.core.first(arglist__11781);
            var args = cljs.core.rest(arglist__11781);
            return G__11780__delegate(self__, args);
          };
          G__11780.cljs$core$IFn$_invoke$arity$variadic = G__11780__delegate;
          return G__11780;
        }();
        cljs.core.t11776.prototype.apply = function(self__, args11779) {
          var self__ = this;
          var self____$1 = this;
          return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args11779)));
        };
        cljs.core.t11776.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
          var G__11782__delegate = function(args) {
            var _ = this;
            return cljs.core.apply.call(null, self__.o, args);
          };
          var G__11782 = function(var_args) {
            var self__ = this;
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__11782__delegate.call(this, args);
          };
          G__11782.cljs$lang$maxFixedArity = 0;
          G__11782.cljs$lang$applyTo = function(arglist__11783) {
            var args = cljs.core.seq(arglist__11783);
            return G__11782__delegate(args);
          };
          G__11782.cljs$core$IFn$_invoke$arity$variadic = G__11782__delegate;
          return G__11782;
        }();
        cljs.core.t11776.prototype.cljs$core$Fn$ = true;
        cljs.core.t11776.prototype.cljs$core$IMeta$_meta$arity$1 = function(_11778) {
          var self__ = this;
          var _11778__$1 = this;
          return self__.meta11777;
        };
        cljs.core.t11776.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_11778, meta11777__$1) {
          var self__ = this;
          var _11778__$1 = this;
          return new cljs.core.t11776(self__.meta, self__.o, self__.with_meta, meta11777__$1);
        };
        cljs.core.__GT_t11776 = function __GT_t11776(meta__$1, o__$1, with_meta__$1, meta11777) {
          return new cljs.core.t11776(meta__$1, o__$1, with_meta__$1, meta11777);
        };
      }
      return new cljs.core.t11776(meta, o, with_meta, null);
    }(), meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__8282__auto__ = !(o == null);
    if (and__8282__auto__) {
      var G__11787 = o;
      if (G__11787) {
        var bit__8938__auto__ = G__11787.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__8938__auto__ || G__11787.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__11787.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__11787);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__11787);
      }
    } else {
      return and__8282__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__11788__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__11789 = ret;
            var G__11790 = cljs.core.first.call(null, ks);
            var G__11791 = cljs.core.next.call(null, ks);
            coll = G__11789;
            k = G__11790;
            ks = G__11791;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__11788 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11788__delegate.call(this, coll, k, ks);
    };
    G__11788.cljs$lang$maxFixedArity = 2;
    G__11788.cljs$lang$applyTo = function(arglist__11792) {
      var coll = cljs.core.first(arglist__11792);
      arglist__11792 = cljs.core.next(arglist__11792);
      var k = cljs.core.first(arglist__11792);
      var ks = cljs.core.rest(arglist__11792);
      return G__11788__delegate(coll, k, ks);
    };
    G__11788.cljs$core$IFn$_invoke$arity$variadic = G__11788__delegate;
    return G__11788;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.string_hash_cache = function() {
  var obj11794 = {};
  return obj11794;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = goog.string.hashCode(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.check_string_hash_cache = function check_string_hash_cache(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj11798 = {};
      return obj11798;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__11800 = o;
    if (G__11800) {
      var bit__8931__auto__ = G__11800.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__8931__auto__ || G__11800.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.check_string_hash_cache.call(null, o);
          } else {
            if (o == null) {
              return 0;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return cljs.core._hash.call(null, o);
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__11802 = x;
    if (G__11802) {
      var bit__8938__auto__ = G__11802.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__8938__auto__ || G__11802.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__11802.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__11802);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__11802);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__11804 = x;
    if (G__11804) {
      var bit__8938__auto__ = G__11804.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__8938__auto__ || G__11804.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__11804.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__11804);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__11804);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__11806 = x;
  if (G__11806) {
    var bit__8938__auto__ = G__11806.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__8938__auto__ || G__11806.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__11806.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__11806);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__11806);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__11808 = x;
  if (G__11808) {
    var bit__8938__auto__ = G__11808.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__8938__auto__ || G__11808.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__11808.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__11808);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__11808);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__11810 = x;
  if (G__11810) {
    var bit__8938__auto__ = G__11810.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__8938__auto__ || G__11810.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__11810.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__11810);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__11810);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__11812 = x;
  if (G__11812) {
    var bit__8938__auto__ = G__11812.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__8938__auto__ || G__11812.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__11812.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__11812);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__11812);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__11814 = x;
    if (G__11814) {
      var bit__8938__auto__ = G__11814.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__8938__auto__ || G__11814.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__11814.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__11814);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__11814);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__11816 = x;
  if (G__11816) {
    var bit__8938__auto__ = G__11816.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__8938__auto__ || G__11816.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__11816.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__11816);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__11816);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__11818 = x;
  if (G__11818) {
    var bit__8931__auto__ = G__11818.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__8931__auto__ || G__11818.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj11822 = {};
    return obj11822;
  };
  var js_obj__1 = function() {
    var G__11823__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__11823 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__11823__delegate.call(this, keyvals);
    };
    G__11823.cljs$lang$maxFixedArity = 0;
    G__11823.cljs$lang$applyTo = function(arglist__11824) {
      var keyvals = cljs.core.seq(arglist__11824);
      return G__11823__delegate(keyvals);
    };
    G__11823.cljs$core$IFn$_invoke$arity$variadic = G__11823__delegate;
    return G__11823;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(val, key, obj__$1) {
    return keys.push(key);
  });
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__11825 = i__$1 + 1;
      var G__11826 = j__$1 + 1;
      var G__11827 = len__$1 - 1;
      i__$1 = G__11825;
      j__$1 = G__11826;
      len__$1 = G__11827;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__11828 = i__$1 - 1;
      var G__11829 = j__$1 - 1;
      var G__11830 = len__$1 - 1;
      i__$1 = G__11828;
      j__$1 = G__11829;
      len__$1 = G__11830;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj11832 = {};
  return obj11832;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__11834 = s;
    if (G__11834) {
      var bit__8938__auto__ = G__11834.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__8938__auto__ || G__11834.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__11834.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__11834);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__11834);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__11836 = s;
  if (G__11836) {
    var bit__8938__auto__ = G__11836.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__8938__auto__ || G__11836.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__11836.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__11836);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__11836);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__8294__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__8294__auto__) {
    return or__8294__auto__;
  } else {
    var G__11840 = f;
    if (G__11840) {
      var bit__8938__auto__ = G__11840.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__8938__auto__ || G__11840.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__11840.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__11840);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__11840);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && (!isNaN(n) && (!(n === Infinity) && parseFloat(n) === parseInt(n, 10)));
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && (cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__11841__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([y, x], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__11842 = cljs.core.conj.call(null, s, x__$1);
              var G__11843 = etc;
              s = G__11842;
              xs = G__11843;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__11841 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11841__delegate.call(this, x, y, more);
    };
    G__11841.cljs$lang$maxFixedArity = 2;
    G__11841.cljs$lang$applyTo = function(arglist__11844) {
      var x = cljs.core.first(arglist__11844);
      arglist__11844 = cljs.core.next(arglist__11844);
      var y = cljs.core.first(arglist__11844);
      var more = cljs.core.rest(arglist__11844);
      return G__11841__delegate(x, y, more);
    };
    G__11841.cljs$core$IFn$_invoke$arity$variadic = G__11841__delegate;
    return G__11841;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__8294__auto__ = cljs.core.seq.call(null, coll);
    if (or__8294__auto__) {
      return or__8294__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__11846 = x;
            if (G__11846) {
              var bit__8931__auto__ = G__11846.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__8931__auto__ || G__11846.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw new Error("compare on non-nil objects of different types");
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return compare_indexed.call(null, xs, ys, xl, 0);
        } else {
          return null;
        }
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__11847 = xs;
        var G__11848 = ys;
        var G__11849 = len;
        var G__11850 = n + 1;
        xs = G__11847;
        ys = G__11848;
        len = G__11849;
        n = G__11850;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4090__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4090__auto__) {
      var s = temp__4090__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__11851 = nval;
          var G__11852 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__11851;
          coll__$1 = G__11852;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__11855 = coll;
      if (G__11855) {
        var bit__8931__auto__ = G__11855.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__8931__auto__ || G__11855.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__11856 = coll;
      if (G__11856) {
        var bit__8931__auto__ = G__11856.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__8931__auto__ || G__11856.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return cljs.core.seq_reduce.call(null, f, val, coll);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__11857__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__11857 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11857__delegate.call(this, x, y, more);
    };
    G__11857.cljs$lang$maxFixedArity = 2;
    G__11857.cljs$lang$applyTo = function(arglist__11858) {
      var x = cljs.core.first(arglist__11858);
      arglist__11858 = cljs.core.next(arglist__11858);
      var y = cljs.core.first(arglist__11858);
      var more = cljs.core.rest(arglist__11858);
      return G__11857__delegate(x, y, more);
    };
    G__11857.cljs$core$IFn$_invoke$arity$variadic = G__11857__delegate;
    return G__11857;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__11859__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__11859 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11859__delegate.call(this, x, y, more);
    };
    G__11859.cljs$lang$maxFixedArity = 2;
    G__11859.cljs$lang$applyTo = function(arglist__11860) {
      var x = cljs.core.first(arglist__11860);
      arglist__11860 = cljs.core.next(arglist__11860);
      var y = cljs.core.first(arglist__11860);
      var more = cljs.core.rest(arglist__11860);
      return G__11859__delegate(x, y, more);
    };
    G__11859.cljs$core$IFn$_invoke$arity$variadic = G__11859__delegate;
    return G__11859;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__11861__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__11861 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11861__delegate.call(this, x, y, more);
    };
    G__11861.cljs$lang$maxFixedArity = 2;
    G__11861.cljs$lang$applyTo = function(arglist__11862) {
      var x = cljs.core.first(arglist__11862);
      arglist__11862 = cljs.core.next(arglist__11862);
      var y = cljs.core.first(arglist__11862);
      var more = cljs.core.rest(arglist__11862);
      return G__11861__delegate(x, y, more);
    };
    G__11861.cljs$core$IFn$_invoke$arity$variadic = G__11861__delegate;
    return G__11861;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__11863__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__11863 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11863__delegate.call(this, x, y, more);
    };
    G__11863.cljs$lang$maxFixedArity = 2;
    G__11863.cljs$lang$applyTo = function(arglist__11864) {
      var x = cljs.core.first(arglist__11864);
      arglist__11864 = cljs.core.next(arglist__11864);
      var y = cljs.core.first(arglist__11864);
      var more = cljs.core.rest(arglist__11864);
      return G__11863__delegate(x, y, more);
    };
    G__11863.cljs$core$IFn$_invoke$arity$variadic = G__11863__delegate;
    return G__11863;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__11865__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__11866 = y;
            var G__11867 = cljs.core.first.call(null, more);
            var G__11868 = cljs.core.next.call(null, more);
            x = G__11866;
            y = G__11867;
            more = G__11868;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__11865 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11865__delegate.call(this, x, y, more);
    };
    G__11865.cljs$lang$maxFixedArity = 2;
    G__11865.cljs$lang$applyTo = function(arglist__11869) {
      var x = cljs.core.first(arglist__11869);
      arglist__11869 = cljs.core.next(arglist__11869);
      var y = cljs.core.first(arglist__11869);
      var more = cljs.core.rest(arglist__11869);
      return G__11865__delegate(x, y, more);
    };
    G__11865.cljs$core$IFn$_invoke$arity$variadic = G__11865__delegate;
    return G__11865;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__11870__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__11871 = y;
            var G__11872 = cljs.core.first.call(null, more);
            var G__11873 = cljs.core.next.call(null, more);
            x = G__11871;
            y = G__11872;
            more = G__11873;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__11870 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11870__delegate.call(this, x, y, more);
    };
    G__11870.cljs$lang$maxFixedArity = 2;
    G__11870.cljs$lang$applyTo = function(arglist__11874) {
      var x = cljs.core.first(arglist__11874);
      arglist__11874 = cljs.core.next(arglist__11874);
      var y = cljs.core.first(arglist__11874);
      var more = cljs.core.rest(arglist__11874);
      return G__11870__delegate(x, y, more);
    };
    G__11870.cljs$core$IFn$_invoke$arity$variadic = G__11870__delegate;
    return G__11870;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__11875__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__11876 = y;
            var G__11877 = cljs.core.first.call(null, more);
            var G__11878 = cljs.core.next.call(null, more);
            x = G__11876;
            y = G__11877;
            more = G__11878;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__11875 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11875__delegate.call(this, x, y, more);
    };
    G__11875.cljs$lang$maxFixedArity = 2;
    G__11875.cljs$lang$applyTo = function(arglist__11879) {
      var x = cljs.core.first(arglist__11879);
      arglist__11879 = cljs.core.next(arglist__11879);
      var y = cljs.core.first(arglist__11879);
      var more = cljs.core.rest(arglist__11879);
      return G__11875__delegate(x, y, more);
    };
    G__11875.cljs$core$IFn$_invoke$arity$variadic = G__11875__delegate;
    return G__11875;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__11880__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__11881 = y;
            var G__11882 = cljs.core.first.call(null, more);
            var G__11883 = cljs.core.next.call(null, more);
            x = G__11881;
            y = G__11882;
            more = G__11883;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__11880 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11880__delegate.call(this, x, y, more);
    };
    G__11880.cljs$lang$maxFixedArity = 2;
    G__11880.cljs$lang$applyTo = function(arglist__11884) {
      var x = cljs.core.first(arglist__11884);
      arglist__11884 = cljs.core.next(arglist__11884);
      var y = cljs.core.first(arglist__11884);
      var more = cljs.core.rest(arglist__11884);
      return G__11880__delegate(x, y, more);
    };
    G__11880.cljs$core$IFn$_invoke$arity$variadic = G__11880__delegate;
    return G__11880;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__8601__auto__ = x;
    var y__8602__auto__ = y;
    return x__8601__auto__ > y__8602__auto__ ? x__8601__auto__ : y__8602__auto__;
  };
  var max__3 = function() {
    var G__11885__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__8601__auto__ = x;
        var y__8602__auto__ = y;
        return x__8601__auto__ > y__8602__auto__ ? x__8601__auto__ : y__8602__auto__;
      }(), more);
    };
    var G__11885 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11885__delegate.call(this, x, y, more);
    };
    G__11885.cljs$lang$maxFixedArity = 2;
    G__11885.cljs$lang$applyTo = function(arglist__11886) {
      var x = cljs.core.first(arglist__11886);
      arglist__11886 = cljs.core.next(arglist__11886);
      var y = cljs.core.first(arglist__11886);
      var more = cljs.core.rest(arglist__11886);
      return G__11885__delegate(x, y, more);
    };
    G__11885.cljs$core$IFn$_invoke$arity$variadic = G__11885__delegate;
    return G__11885;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__8608__auto__ = x;
    var y__8609__auto__ = y;
    return x__8608__auto__ < y__8609__auto__ ? x__8608__auto__ : y__8609__auto__;
  };
  var min__3 = function() {
    var G__11887__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__8608__auto__ = x;
        var y__8609__auto__ = y;
        return x__8608__auto__ < y__8609__auto__ ? x__8608__auto__ : y__8609__auto__;
      }(), more);
    };
    var G__11887 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11887__delegate.call(this, x, y, more);
    };
    G__11887.cljs$lang$maxFixedArity = 2;
    G__11887.cljs$lang$applyTo = function(arglist__11888) {
      var x = cljs.core.first(arglist__11888);
      arglist__11888 = cljs.core.next(arglist__11888);
      var y = cljs.core.first(arglist__11888);
      var more = cljs.core.rest(arglist__11888);
      return G__11887__delegate(x, y, more);
    };
    G__11887.cljs$core$IFn$_invoke$arity$variadic = G__11887__delegate;
    return G__11887;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error("Argument to char must be a character or number");
      } else {
        return null;
      }
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__11889__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__11889 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11889__delegate.call(this, x, y, more);
    };
    G__11889.cljs$lang$maxFixedArity = 2;
    G__11889.cljs$lang$applyTo = function(arglist__11890) {
      var x = cljs.core.first(arglist__11890);
      arglist__11890 = cljs.core.next(arglist__11890);
      var y = cljs.core.first(arglist__11890);
      var more = cljs.core.rest(arglist__11890);
      return G__11889__delegate(x, y, more);
    };
    G__11889.cljs$core$IFn$_invoke$arity$variadic = G__11889__delegate;
    return G__11889;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__11891__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__11891 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11891__delegate.call(this, x, y, more);
    };
    G__11891.cljs$lang$maxFixedArity = 2;
    G__11891.cljs$lang$applyTo = function(arglist__11892) {
      var x = cljs.core.first(arglist__11892);
      arglist__11892 = cljs.core.next(arglist__11892);
      var y = cljs.core.first(arglist__11892);
      var more = cljs.core.rest(arglist__11892);
      return G__11891__delegate(x, y, more);
    };
    G__11891.cljs$core$IFn$_invoke$arity$variadic = G__11891__delegate;
    return G__11891;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__11893__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__11893 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11893__delegate.call(this, x, y, more);
    };
    G__11893.cljs$lang$maxFixedArity = 2;
    G__11893.cljs$lang$applyTo = function(arglist__11894) {
      var x = cljs.core.first(arglist__11894);
      arglist__11894 = cljs.core.next(arglist__11894);
      var y = cljs.core.first(arglist__11894);
      var more = cljs.core.rest(arglist__11894);
      return G__11893__delegate(x, y, more);
    };
    G__11893.cljs$core$IFn$_invoke$arity$variadic = G__11893__delegate;
    return G__11893;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__11895__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__11895 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11895__delegate.call(this, x, y, more);
    };
    G__11895.cljs$lang$maxFixedArity = 2;
    G__11895.cljs$lang$applyTo = function(arglist__11896) {
      var x = cljs.core.first(arglist__11896);
      arglist__11896 = cljs.core.next(arglist__11896);
      var y = cljs.core.first(arglist__11896);
      var more = cljs.core.rest(arglist__11896);
      return G__11895__delegate(x, y, more);
    };
    G__11895.cljs$core$IFn$_invoke$arity$variadic = G__11895__delegate;
    return G__11895;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__11897__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__11897 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11897__delegate.call(this, x, y, more);
    };
    G__11897.cljs$lang$maxFixedArity = 2;
    G__11897.cljs$lang$applyTo = function(arglist__11898) {
      var x = cljs.core.first(arglist__11898);
      arglist__11898 = cljs.core.next(arglist__11898);
      var y = cljs.core.first(arglist__11898);
      var more = cljs.core.rest(arglist__11898);
      return G__11897__delegate(x, y, more);
    };
    G__11897.cljs$core$IFn$_invoke$arity$variadic = G__11897__delegate;
    return G__11897;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_substract = function() {
  var unchecked_substract = null;
  var unchecked_substract__1 = function(x) {
    return-x;
  };
  var unchecked_substract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract__3 = function() {
    var G__11899__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract, x - y, more);
    };
    var G__11899 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11899__delegate.call(this, x, y, more);
    };
    G__11899.cljs$lang$maxFixedArity = 2;
    G__11899.cljs$lang$applyTo = function(arglist__11900) {
      var x = cljs.core.first(arglist__11900);
      arglist__11900 = cljs.core.next(arglist__11900);
      var y = cljs.core.first(arglist__11900);
      var more = cljs.core.rest(arglist__11900);
      return G__11899__delegate(x, y, more);
    };
    G__11899.cljs$core$IFn$_invoke$arity$variadic = G__11899__delegate;
    return G__11899;
  }();
  unchecked_substract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract__1.call(this, x);
      case 2:
        return unchecked_substract__2.call(this, x, y);
      default:
        return unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract.cljs$lang$maxFixedArity = 2;
  unchecked_substract.cljs$lang$applyTo = unchecked_substract__3.cljs$lang$applyTo;
  unchecked_substract.cljs$core$IFn$_invoke$arity$1 = unchecked_substract__1;
  unchecked_substract.cljs$core$IFn$_invoke$arity$2 = unchecked_substract__2;
  unchecked_substract.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract;
}();
cljs.core.unchecked_substract_int = function() {
  var unchecked_substract_int = null;
  var unchecked_substract_int__1 = function(x) {
    return-x;
  };
  var unchecked_substract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_substract_int__3 = function() {
    var G__11901__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_substract_int, x - y, more);
    };
    var G__11901 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11901__delegate.call(this, x, y, more);
    };
    G__11901.cljs$lang$maxFixedArity = 2;
    G__11901.cljs$lang$applyTo = function(arglist__11902) {
      var x = cljs.core.first(arglist__11902);
      arglist__11902 = cljs.core.next(arglist__11902);
      var y = cljs.core.first(arglist__11902);
      var more = cljs.core.rest(arglist__11902);
      return G__11901__delegate(x, y, more);
    };
    G__11901.cljs$core$IFn$_invoke$arity$variadic = G__11901__delegate;
    return G__11901;
  }();
  unchecked_substract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_substract_int__1.call(this, x);
      case 2:
        return unchecked_substract_int__2.call(this, x, y);
      default:
        return unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_substract_int.cljs$lang$maxFixedArity = 2;
  unchecked_substract_int.cljs$lang$applyTo = unchecked_substract_int__3.cljs$lang$applyTo;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_substract_int__1;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_substract_int__2;
  unchecked_substract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_substract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_substract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__11903__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__11904 = y;
            var G__11905 = cljs.core.first.call(null, more);
            var G__11906 = cljs.core.next.call(null, more);
            x = G__11904;
            y = G__11905;
            more = G__11906;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__11903 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__11903__delegate.call(this, x, y, more);
    };
    G__11903.cljs$lang$maxFixedArity = 2;
    G__11903.cljs$lang$applyTo = function(arglist__11907) {
      var x = cljs.core.first(arglist__11907);
      arglist__11907 = cljs.core.next(arglist__11907);
      var y = cljs.core.first(arglist__11907);
      var more = cljs.core.rest(arglist__11907);
      return G__11903__delegate(x, y, more);
    };
    G__11903.cljs$core$IFn$_invoke$arity$variadic = G__11903__delegate;
    return G__11903;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__11908 = n__$1 - 1;
      var G__11909 = cljs.core.next.call(null, xs);
      n__$1 = G__11908;
      xs = G__11909;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return x.toString();
    }
  };
  var str__2 = function() {
    var G__11910__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__11911 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__11912 = cljs.core.next.call(null, more);
          sb = G__11911;
          more = G__11912;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__11910 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__11910__delegate.call(this, x, ys);
    };
    G__11910.cljs$lang$maxFixedArity = 1;
    G__11910.cljs$lang$applyTo = function(arglist__11913) {
      var x = cljs.core.first(arglist__11913);
      var ys = cljs.core.rest(arglist__11913);
      return G__11910__delegate(x, ys);
    };
    G__11910.cljs$core$IFn$_invoke$arity$variadic = G__11910__delegate;
    return G__11910;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__11914 = cljs.core.next.call(null, xs);
            var G__11915 = cljs.core.next.call(null, ys);
            xs = G__11914;
            ys = G__11915;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return false;
            } else {
              return null;
            }
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__11916 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__11917 = cljs.core.next.call(null, s);
        res = G__11916;
        s = G__11917;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__11918 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__11919 = cljs.core.next.call(null, s);
      h = G__11918;
      s = G__11919;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__11920 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__11921 = cljs.core.next.call(null, s__$1);
      h = G__11920;
      s__$1 = G__11921;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__11928_11934 = cljs.core.seq.call(null, fn_map);
  var chunk__11929_11935 = null;
  var count__11930_11936 = 0;
  var i__11931_11937 = 0;
  while (true) {
    if (i__11931_11937 < count__11930_11936) {
      var vec__11932_11938 = cljs.core._nth.call(null, chunk__11929_11935, i__11931_11937);
      var key_name_11939 = cljs.core.nth.call(null, vec__11932_11938, 0, null);
      var f_11940 = cljs.core.nth.call(null, vec__11932_11938, 1, null);
      var str_name_11941 = cljs.core.name.call(null, key_name_11939);
      obj[str_name_11941] = f_11940;
      var G__11942 = seq__11928_11934;
      var G__11943 = chunk__11929_11935;
      var G__11944 = count__11930_11936;
      var G__11945 = i__11931_11937 + 1;
      seq__11928_11934 = G__11942;
      chunk__11929_11935 = G__11943;
      count__11930_11936 = G__11944;
      i__11931_11937 = G__11945;
      continue;
    } else {
      var temp__4092__auto___11946 = cljs.core.seq.call(null, seq__11928_11934);
      if (temp__4092__auto___11946) {
        var seq__11928_11947__$1 = temp__4092__auto___11946;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11928_11947__$1)) {
          var c__9036__auto___11948 = cljs.core.chunk_first.call(null, seq__11928_11947__$1);
          var G__11949 = cljs.core.chunk_rest.call(null, seq__11928_11947__$1);
          var G__11950 = c__9036__auto___11948;
          var G__11951 = cljs.core.count.call(null, c__9036__auto___11948);
          var G__11952 = 0;
          seq__11928_11934 = G__11949;
          chunk__11929_11935 = G__11950;
          count__11930_11936 = G__11951;
          i__11931_11937 = G__11952;
          continue;
        } else {
          var vec__11933_11953 = cljs.core.first.call(null, seq__11928_11947__$1);
          var key_name_11954 = cljs.core.nth.call(null, vec__11933_11953, 0, null);
          var f_11955 = cljs.core.nth.call(null, vec__11933_11953, 1, null);
          var str_name_11956 = cljs.core.name.call(null, key_name_11954);
          obj[str_name_11956] = f_11955;
          var G__11957 = cljs.core.next.call(null, seq__11928_11947__$1);
          var G__11958 = null;
          var G__11959 = 0;
          var G__11960 = 0;
          seq__11928_11934 = G__11957;
          chunk__11929_11935 = G__11958;
          count__11930_11936 = G__11959;
          i__11931_11937 = G__11960;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/List");
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__8705__auto__ = self__.__hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICloneable$ = true;
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$ = true;
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__11962 = coll;
  if (G__11962) {
    var bit__8938__auto__ = G__11962.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__8938__auto__ || G__11962.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__11962.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__11962);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__11962);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__11963 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__11963;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__11964 = i - 1;
        var G__11965 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__11964;
        r = G__11965;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__11966) {
    var xs = cljs.core.seq(arglist__11966);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__8705__auto__ = self__.__hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICloneable$ = true;
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__8294__auto__ = coll == null;
    if (or__8294__auto__) {
      return or__8294__auto__;
    } else {
      var G__11970 = coll;
      if (G__11970) {
        var bit__8931__auto__ = G__11970.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__8931__auto__ || G__11970.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__11972 = x;
  if (G__11972) {
    var bit__8938__auto__ = G__11972.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__8938__auto__ || G__11972.cljs$core$IList$) {
      return true;
    } else {
      if (!G__11972.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__11972);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__11972);
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._hash == null) {
    self__._hash = cljs.core.hash_combine.call(null, cljs.core.hash.call(null, self__.ns), cljs.core.hash.call(null, self__.name)) + 2654435769;
    return self__._hash;
  } else {
    return self__._hash;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__11974 = null;
  var G__11974__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__11974__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__11974 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11974__2.call(this, self__, coll);
      case 3:
        return G__11974__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__11974;
}();
cljs.core.Keyword.prototype.apply = function(self__, args11973) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args11973)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.cljs$core$ICloneable$ = true;
cljs.core.Keyword.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Keyword(self__.ns, self__.name, self__.fqn, self__._hash);
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return[cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__11976 = x;
    if (G__11976) {
      var bit__8931__auto__ = G__11976.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__8931__auto__ || G__11976.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__8705__auto__ = self__.__hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__11977 = ls.sval();
        ls = G__11977;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__8705__auto__ = self__.__hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__11979 = s;
    if (G__11979) {
      var bit__8931__auto__ = G__11979.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__8931__auto__ || G__11979.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__11980 = cljs.core.next.call(null, s__$1);
      s__$1 = G__11980;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_11981 = 0;
  var xs_11982 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_11982) {
      ret[i_11981] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_11982));
      var G__11983 = i_11981 + 1;
      var G__11984 = cljs.core.next.call(null, xs_11982);
      i_11981 = G__11983;
      xs_11982 = G__11984;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__11985 = i + 1;
          var G__11986 = cljs.core.next.call(null, s__$1);
          i = G__11985;
          s__$1 = G__11986;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__9136__auto___11987 = size;
      var i_11988 = 0;
      while (true) {
        if (i_11988 < n__9136__auto___11987) {
          a[i_11988] = init_val_or_seq;
          var G__11989 = i_11988 + 1;
          i_11988 = G__11989;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__11990 = i + 1;
          var G__11991 = cljs.core.next.call(null, s__$1);
          i = G__11990;
          s__$1 = G__11991;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__9136__auto___11992 = size;
      var i_11993 = 0;
      while (true) {
        if (i_11993 < n__9136__auto___11992) {
          a[i_11993] = init_val_or_seq;
          var G__11994 = i_11993 + 1;
          i_11993 = G__11994;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__11995 = i + 1;
          var G__11996 = cljs.core.next.call(null, s__$1);
          i = G__11995;
          s__$1 = G__11996;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__9136__auto___11997 = size;
      var i_11998 = 0;
      while (true) {
        if (i_11998 < n__9136__auto___11997) {
          a[i_11998] = init_val_or_seq;
          var G__11999 = i_11998 + 1;
          i_11998 = G__11999;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__12000 = i + 1;
          var G__12001 = cljs.core.next.call(null, s__$1);
          i = G__12000;
          s__$1 = G__12001;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__9136__auto___12002 = size;
      var i_12003 = 0;
      while (true) {
        if (i_12003 < n__9136__auto___12002) {
          a[i_12003] = init_val_or_seq;
          var G__12004 = i_12003 + 1;
          i_12003 = G__12004;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__12005 = cljs.core.next.call(null, s__$1);
        var G__12006 = i - 1;
        var G__12007 = sum + 1;
        s__$1 = G__12005;
        i = G__12006;
        sum = G__12007;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__12008__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__12008 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__12008__delegate.call(this, x, y, zs);
    };
    G__12008.cljs$lang$maxFixedArity = 2;
    G__12008.cljs$lang$applyTo = function(arglist__12009) {
      var x = cljs.core.first(arglist__12009);
      arglist__12009 = cljs.core.next(arglist__12009);
      var y = cljs.core.first(arglist__12009);
      var zs = cljs.core.rest(arglist__12009);
      return G__12008__delegate(x, y, zs);
    };
    G__12008.cljs$core$IFn$_invoke$arity$variadic = G__12008__delegate;
    return G__12008;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__12010__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__12010 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__12010__delegate.call(this, a, b, c, d, more);
    };
    G__12010.cljs$lang$maxFixedArity = 4;
    G__12010.cljs$lang$applyTo = function(arglist__12011) {
      var a = cljs.core.first(arglist__12011);
      arglist__12011 = cljs.core.next(arglist__12011);
      var b = cljs.core.first(arglist__12011);
      arglist__12011 = cljs.core.next(arglist__12011);
      var c = cljs.core.first(arglist__12011);
      arglist__12011 = cljs.core.next(arglist__12011);
      var d = cljs.core.first(arglist__12011);
      var more = cljs.core.rest(arglist__12011);
      return G__12010__delegate(a, b, c, d, more);
    };
    G__12010.cljs$core$IFn$_invoke$arity$variadic = G__12010__delegate;
    return G__12010;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function conj_BANG_(tcoll, val) {
  return cljs.core._conj_BANG_.call(null, tcoll, val);
};
cljs.core.assoc_BANG_ = function assoc_BANG_(tcoll, key, val) {
  return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
};
cljs.core.dissoc_BANG_ = function dissoc_BANG_(tcoll, key) {
  return cljs.core._dissoc_BANG_.call(null, tcoll, key);
};
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function disj_BANG_(tcoll, val) {
  return cljs.core._disjoin_BANG_.call(null, tcoll, val);
};
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a);
      } else {
        return f.call(null, a);
      }
    } else {
      var b = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a, b);
        } else {
          return f.call(null, a, b);
        }
      } else {
        var c = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a, b, c);
          } else {
            return f.call(null, a, b, c);
          }
        } else {
          var d = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a, b, c, d);
            } else {
              return f.call(null, a, b, c, d);
            }
          } else {
            var e = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e);
              } else {
                return f.call(null, a, b, c, d, e);
              }
            } else {
              var f__$1 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f__$1.cljs$core$IFn$_invoke$arity$6) {
                  return f__$1.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f__$1);
                } else {
                  return f__$1.call(null, a, b, c, d, e, f__$1);
                }
              } else {
                var g = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f__$1.cljs$core$IFn$_invoke$arity$7) {
                    return f__$1.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f__$1, g);
                  } else {
                    return f__$1.call(null, a, b, c, d, e, f__$1, g);
                  }
                } else {
                  var h = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f__$1.cljs$core$IFn$_invoke$arity$8) {
                      return f__$1.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f__$1, g, h);
                    } else {
                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h);
                    }
                  } else {
                    var i = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f__$1.cljs$core$IFn$_invoke$arity$9) {
                        return f__$1.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f__$1, g, h, i);
                      } else {
                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i);
                      }
                    } else {
                      var j = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f__$1.cljs$core$IFn$_invoke$arity$10) {
                          return f__$1.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f__$1, g, h, i, j);
                        } else {
                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j);
                        }
                      } else {
                        var k = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f__$1.cljs$core$IFn$_invoke$arity$11) {
                            return f__$1.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f__$1, g, h, i, j, k);
                          } else {
                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k);
                          }
                        } else {
                          var l = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f__$1.cljs$core$IFn$_invoke$arity$12) {
                              return f__$1.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            } else {
                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l);
                            }
                          } else {
                            var m = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f__$1.cljs$core$IFn$_invoke$arity$13) {
                                return f__$1.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              } else {
                                return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m);
                              }
                            } else {
                              var n = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f__$1.cljs$core$IFn$_invoke$arity$14) {
                                  return f__$1.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                } else {
                                  return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n);
                                }
                              } else {
                                var o = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f__$1.cljs$core$IFn$_invoke$arity$15) {
                                    return f__$1.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  } else {
                                    return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o);
                                  }
                                } else {
                                  var p = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f__$1.cljs$core$IFn$_invoke$arity$16) {
                                      return f__$1.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    } else {
                                      return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p);
                                    }
                                  } else {
                                    var q = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f__$1.cljs$core$IFn$_invoke$arity$17) {
                                        return f__$1.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      } else {
                                        return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q);
                                      }
                                    } else {
                                      var r = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f__$1.cljs$core$IFn$_invoke$arity$18) {
                                          return f__$1.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        } else {
                                          return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r);
                                        }
                                      } else {
                                        var s = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f__$1.cljs$core$IFn$_invoke$arity$19) {
                                            return f__$1.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          } else {
                                            return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s);
                                          }
                                        } else {
                                          var t = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f__$1.cljs$core$IFn$_invoke$arity$20) {
                                              return f__$1.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            } else {
                                              return f__$1.call(null, a, b, c, d, e, f__$1, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__12012__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__12012 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__12012__delegate.call(this, f, a, b, c, d, args);
    };
    G__12012.cljs$lang$maxFixedArity = 5;
    G__12012.cljs$lang$applyTo = function(arglist__12013) {
      var f = cljs.core.first(arglist__12013);
      arglist__12013 = cljs.core.next(arglist__12013);
      var a = cljs.core.first(arglist__12013);
      arglist__12013 = cljs.core.next(arglist__12013);
      var b = cljs.core.first(arglist__12013);
      arglist__12013 = cljs.core.next(arglist__12013);
      var c = cljs.core.first(arglist__12013);
      arglist__12013 = cljs.core.next(arglist__12013);
      var d = cljs.core.first(arglist__12013);
      var args = cljs.core.rest(arglist__12013);
      return G__12012__delegate(f, a, b, c, d, args);
    };
    G__12012.cljs$core$IFn$_invoke$arity$variadic = G__12012__delegate;
    return G__12012;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__12014__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__12014 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__12014__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__12014.cljs$lang$maxFixedArity = 6;
    G__12014.cljs$lang$applyTo = function(arglist__12015) {
      var obj = cljs.core.first(arglist__12015);
      arglist__12015 = cljs.core.next(arglist__12015);
      var f = cljs.core.first(arglist__12015);
      arglist__12015 = cljs.core.next(arglist__12015);
      var a = cljs.core.first(arglist__12015);
      arglist__12015 = cljs.core.next(arglist__12015);
      var b = cljs.core.first(arglist__12015);
      arglist__12015 = cljs.core.next(arglist__12015);
      var c = cljs.core.first(arglist__12015);
      arglist__12015 = cljs.core.next(arglist__12015);
      var d = cljs.core.first(arglist__12015);
      var args = cljs.core.rest(arglist__12015);
      return G__12014__delegate(obj, f, a, b, c, d, args);
    };
    G__12014.cljs$core$IFn$_invoke$arity$variadic = G__12014__delegate;
    return G__12014;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__12016__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__12016 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__12016__delegate.call(this, x, y, more);
    };
    G__12016.cljs$lang$maxFixedArity = 2;
    G__12016.cljs$lang$applyTo = function(arglist__12017) {
      var x = cljs.core.first(arglist__12017);
      arglist__12017 = cljs.core.next(arglist__12017);
      var y = cljs.core.first(arglist__12017);
      var more = cljs.core.rest(arglist__12017);
      return G__12016__delegate(x, y, more);
    };
    G__12016.cljs$core$IFn$_invoke$arity$variadic = G__12016__delegate;
    return G__12016;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__12018 = pred;
        var G__12019 = cljs.core.next.call(null, coll);
        pred = G__12018;
        coll = G__12019;
        continue;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return false;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__8294__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__8294__auto__)) {
        return or__8294__auto__;
      } else {
        var G__12020 = pred;
        var G__12021 = cljs.core.next.call(null, coll);
        pred = G__12020;
        coll = G__12021;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__12022 = null;
    var G__12022__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__12022__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__12022__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__12022__3 = function() {
      var G__12023__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__12023 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__12023__delegate.call(this, x, y, zs);
      };
      G__12023.cljs$lang$maxFixedArity = 2;
      G__12023.cljs$lang$applyTo = function(arglist__12024) {
        var x = cljs.core.first(arglist__12024);
        arglist__12024 = cljs.core.next(arglist__12024);
        var y = cljs.core.first(arglist__12024);
        var zs = cljs.core.rest(arglist__12024);
        return G__12023__delegate(x, y, zs);
      };
      G__12023.cljs$core$IFn$_invoke$arity$variadic = G__12023__delegate;
      return G__12023;
    }();
    G__12022 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__12022__0.call(this);
        case 1:
          return G__12022__1.call(this, x);
        case 2:
          return G__12022__2.call(this, x, y);
        default:
          return G__12022__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__12022.cljs$lang$maxFixedArity = 2;
    G__12022.cljs$lang$applyTo = G__12022__3.cljs$lang$applyTo;
    return G__12022;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__12025__delegate = function(args) {
      return x;
    };
    var G__12025 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__12025__delegate.call(this, args);
    };
    G__12025.cljs$lang$maxFixedArity = 0;
    G__12025.cljs$lang$applyTo = function(arglist__12026) {
      var args = cljs.core.seq(arglist__12026);
      return G__12025__delegate(args);
    };
    G__12025.cljs$core$IFn$_invoke$arity$variadic = G__12025__delegate;
    return G__12025;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__12027 = null;
      var G__12027__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__12027__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__12027__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__12027__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__12027__4 = function() {
        var G__12028__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__12028 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12028__delegate.call(this, x, y, z, args);
        };
        G__12028.cljs$lang$maxFixedArity = 3;
        G__12028.cljs$lang$applyTo = function(arglist__12029) {
          var x = cljs.core.first(arglist__12029);
          arglist__12029 = cljs.core.next(arglist__12029);
          var y = cljs.core.first(arglist__12029);
          arglist__12029 = cljs.core.next(arglist__12029);
          var z = cljs.core.first(arglist__12029);
          var args = cljs.core.rest(arglist__12029);
          return G__12028__delegate(x, y, z, args);
        };
        G__12028.cljs$core$IFn$_invoke$arity$variadic = G__12028__delegate;
        return G__12028;
      }();
      G__12027 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__12027__0.call(this);
          case 1:
            return G__12027__1.call(this, x);
          case 2:
            return G__12027__2.call(this, x, y);
          case 3:
            return G__12027__3.call(this, x, y, z);
          default:
            return G__12027__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__12027.cljs$lang$maxFixedArity = 3;
      G__12027.cljs$lang$applyTo = G__12027__4.cljs$lang$applyTo;
      return G__12027;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__12030 = null;
      var G__12030__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__12030__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__12030__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__12030__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__12030__4 = function() {
        var G__12031__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__12031 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12031__delegate.call(this, x, y, z, args);
        };
        G__12031.cljs$lang$maxFixedArity = 3;
        G__12031.cljs$lang$applyTo = function(arglist__12032) {
          var x = cljs.core.first(arglist__12032);
          arglist__12032 = cljs.core.next(arglist__12032);
          var y = cljs.core.first(arglist__12032);
          arglist__12032 = cljs.core.next(arglist__12032);
          var z = cljs.core.first(arglist__12032);
          var args = cljs.core.rest(arglist__12032);
          return G__12031__delegate(x, y, z, args);
        };
        G__12031.cljs$core$IFn$_invoke$arity$variadic = G__12031__delegate;
        return G__12031;
      }();
      G__12030 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__12030__0.call(this);
          case 1:
            return G__12030__1.call(this, x);
          case 2:
            return G__12030__2.call(this, x, y);
          case 3:
            return G__12030__3.call(this, x, y, z);
          default:
            return G__12030__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__12030.cljs$lang$maxFixedArity = 3;
      G__12030.cljs$lang$applyTo = G__12030__4.cljs$lang$applyTo;
      return G__12030;
    }();
  };
  var comp__4 = function() {
    var G__12033__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function() {
        var G__12034__delegate = function(args) {
          var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
          var fs__$2 = cljs.core.next.call(null, fs__$1);
          while (true) {
            if (fs__$2) {
              var G__12035 = cljs.core.first.call(null, fs__$2).call(null, ret);
              var G__12036 = cljs.core.next.call(null, fs__$2);
              ret = G__12035;
              fs__$2 = G__12036;
              continue;
            } else {
              return ret;
            }
            break;
          }
        };
        var G__12034 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__12034__delegate.call(this, args);
        };
        G__12034.cljs$lang$maxFixedArity = 0;
        G__12034.cljs$lang$applyTo = function(arglist__12037) {
          var args = cljs.core.seq(arglist__12037);
          return G__12034__delegate(args);
        };
        G__12034.cljs$core$IFn$_invoke$arity$variadic = G__12034__delegate;
        return G__12034;
      }();
    };
    var G__12033 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__12033__delegate.call(this, f1, f2, f3, fs);
    };
    G__12033.cljs$lang$maxFixedArity = 3;
    G__12033.cljs$lang$applyTo = function(arglist__12038) {
      var f1 = cljs.core.first(arglist__12038);
      arglist__12038 = cljs.core.next(arglist__12038);
      var f2 = cljs.core.first(arglist__12038);
      arglist__12038 = cljs.core.next(arglist__12038);
      var f3 = cljs.core.first(arglist__12038);
      var fs = cljs.core.rest(arglist__12038);
      return G__12033__delegate(f1, f2, f3, fs);
    };
    G__12033.cljs$core$IFn$_invoke$arity$variadic = G__12033__delegate;
    return G__12033;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__12039__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__12039 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__12039__delegate.call(this, args);
      };
      G__12039.cljs$lang$maxFixedArity = 0;
      G__12039.cljs$lang$applyTo = function(arglist__12040) {
        var args = cljs.core.seq(arglist__12040);
        return G__12039__delegate(args);
      };
      G__12039.cljs$core$IFn$_invoke$arity$variadic = G__12039__delegate;
      return G__12039;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__12041__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__12041 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__12041__delegate.call(this, args);
      };
      G__12041.cljs$lang$maxFixedArity = 0;
      G__12041.cljs$lang$applyTo = function(arglist__12042) {
        var args = cljs.core.seq(arglist__12042);
        return G__12041__delegate(args);
      };
      G__12041.cljs$core$IFn$_invoke$arity$variadic = G__12041__delegate;
      return G__12041;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__12043__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__12043 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__12043__delegate.call(this, args);
      };
      G__12043.cljs$lang$maxFixedArity = 0;
      G__12043.cljs$lang$applyTo = function(arglist__12044) {
        var args = cljs.core.seq(arglist__12044);
        return G__12043__delegate(args);
      };
      G__12043.cljs$core$IFn$_invoke$arity$variadic = G__12043__delegate;
      return G__12043;
    }();
  };
  var partial__5 = function() {
    var G__12045__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__12046__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__12046 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__12046__delegate.call(this, args);
        };
        G__12046.cljs$lang$maxFixedArity = 0;
        G__12046.cljs$lang$applyTo = function(arglist__12047) {
          var args = cljs.core.seq(arglist__12047);
          return G__12046__delegate(args);
        };
        G__12046.cljs$core$IFn$_invoke$arity$variadic = G__12046__delegate;
        return G__12046;
      }();
    };
    var G__12045 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__12045__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__12045.cljs$lang$maxFixedArity = 4;
    G__12045.cljs$lang$applyTo = function(arglist__12048) {
      var f = cljs.core.first(arglist__12048);
      arglist__12048 = cljs.core.next(arglist__12048);
      var arg1 = cljs.core.first(arglist__12048);
      arglist__12048 = cljs.core.next(arglist__12048);
      var arg2 = cljs.core.first(arglist__12048);
      arglist__12048 = cljs.core.next(arglist__12048);
      var arg3 = cljs.core.first(arglist__12048);
      var more = cljs.core.rest(arglist__12048);
      return G__12045__delegate(f, arg1, arg2, arg3, more);
    };
    G__12045.cljs$core$IFn$_invoke$arity$variadic = G__12045__delegate;
    return G__12045;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__12049 = null;
      var G__12049__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__12049__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__12049__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__12049__4 = function() {
        var G__12050__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__12050 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12050__delegate.call(this, a, b, c, ds);
        };
        G__12050.cljs$lang$maxFixedArity = 3;
        G__12050.cljs$lang$applyTo = function(arglist__12051) {
          var a = cljs.core.first(arglist__12051);
          arglist__12051 = cljs.core.next(arglist__12051);
          var b = cljs.core.first(arglist__12051);
          arglist__12051 = cljs.core.next(arglist__12051);
          var c = cljs.core.first(arglist__12051);
          var ds = cljs.core.rest(arglist__12051);
          return G__12050__delegate(a, b, c, ds);
        };
        G__12050.cljs$core$IFn$_invoke$arity$variadic = G__12050__delegate;
        return G__12050;
      }();
      G__12049 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__12049__1.call(this, a);
          case 2:
            return G__12049__2.call(this, a, b);
          case 3:
            return G__12049__3.call(this, a, b, c);
          default:
            return G__12049__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__12049.cljs$lang$maxFixedArity = 3;
      G__12049.cljs$lang$applyTo = G__12049__4.cljs$lang$applyTo;
      return G__12049;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__12052 = null;
      var G__12052__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__12052__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__12052__4 = function() {
        var G__12053__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__12053 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12053__delegate.call(this, a, b, c, ds);
        };
        G__12053.cljs$lang$maxFixedArity = 3;
        G__12053.cljs$lang$applyTo = function(arglist__12054) {
          var a = cljs.core.first(arglist__12054);
          arglist__12054 = cljs.core.next(arglist__12054);
          var b = cljs.core.first(arglist__12054);
          arglist__12054 = cljs.core.next(arglist__12054);
          var c = cljs.core.first(arglist__12054);
          var ds = cljs.core.rest(arglist__12054);
          return G__12053__delegate(a, b, c, ds);
        };
        G__12053.cljs$core$IFn$_invoke$arity$variadic = G__12053__delegate;
        return G__12053;
      }();
      G__12052 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__12052__2.call(this, a, b);
          case 3:
            return G__12052__3.call(this, a, b, c);
          default:
            return G__12052__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__12052.cljs$lang$maxFixedArity = 3;
      G__12052.cljs$lang$applyTo = G__12052__4.cljs$lang$applyTo;
      return G__12052;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__12055 = null;
      var G__12055__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__12055__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__12055__4 = function() {
        var G__12056__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__12056 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12056__delegate.call(this, a, b, c, ds);
        };
        G__12056.cljs$lang$maxFixedArity = 3;
        G__12056.cljs$lang$applyTo = function(arglist__12057) {
          var a = cljs.core.first(arglist__12057);
          arglist__12057 = cljs.core.next(arglist__12057);
          var b = cljs.core.first(arglist__12057);
          arglist__12057 = cljs.core.next(arglist__12057);
          var c = cljs.core.first(arglist__12057);
          var ds = cljs.core.rest(arglist__12057);
          return G__12056__delegate(a, b, c, ds);
        };
        G__12056.cljs$core$IFn$_invoke$arity$variadic = G__12056__delegate;
        return G__12056;
      }();
      G__12055 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__12055__2.call(this, a, b);
          case 3:
            return G__12055__3.call(this, a, b, c);
          default:
            return G__12055__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__12055.cljs$lang$maxFixedArity = 3;
      G__12055.cljs$lang$applyTo = G__12055__4.cljs$lang$applyTo;
      return G__12055;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__9136__auto___12058 = size;
          var i_12059 = 0;
          while (true) {
            if (i_12059 < n__9136__auto___12058) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_12059, cljs.core._nth.call(null, c, i_12059)));
              var G__12060 = i_12059 + 1;
              i_12059 = G__12060;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function keep(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__9136__auto___12061 = size;
        var i_12062 = 0;
        while (true) {
          if (i_12062 < n__9136__auto___12061) {
            var x_12063 = f.call(null, cljs.core._nth.call(null, c, i_12062));
            if (x_12063 == null) {
            } else {
              cljs.core.chunk_append.call(null, b, x_12063);
            }
            var G__12064 = i_12062 + 1;
            i_12062 = G__12064;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
      } else {
        var x = f.call(null, cljs.core.first.call(null, s));
        if (x == null) {
          return keep.call(null, f, cljs.core.rest.call(null, s));
        } else {
          return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep_indexed = function keep_indexed(f, coll) {
  var keepi = function keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__9136__auto___12065 = size;
          var i_12066 = 0;
          while (true) {
            if (i_12066 < n__9136__auto___12065) {
              var x_12067 = f.call(null, idx + i_12066, cljs.core._nth.call(null, c, i_12066));
              if (x_12067 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_12067);
              }
              var G__12068 = i_12066 + 1;
              i_12066 = G__12068;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, idx, cljs.core.first.call(null, s));
          if (x == null) {
            return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi.call(null, 0, coll);
};
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__8282__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__8282__auto__)) {
            return p.call(null, y);
          } else {
            return and__8282__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__8282__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__8282__auto__)) {
            var and__8282__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__8282__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__8282__auto____$1;
            }
          } else {
            return and__8282__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__12075__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__12075 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12075__delegate.call(this, x, y, z, args);
        };
        G__12075.cljs$lang$maxFixedArity = 3;
        G__12075.cljs$lang$applyTo = function(arglist__12076) {
          var x = cljs.core.first(arglist__12076);
          arglist__12076 = cljs.core.next(arglist__12076);
          var y = cljs.core.first(arglist__12076);
          arglist__12076 = cljs.core.next(arglist__12076);
          var z = cljs.core.first(arglist__12076);
          var args = cljs.core.rest(arglist__12076);
          return G__12075__delegate(x, y, z, args);
        };
        G__12075.cljs$core$IFn$_invoke$arity$variadic = G__12075__delegate;
        return G__12075;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__8282__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__8282__auto__)) {
            return p2.call(null, x);
          } else {
            return and__8282__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__8282__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__8282__auto__)) {
            var and__8282__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__8282__auto____$1)) {
              var and__8282__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__8282__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__8282__auto____$2;
              }
            } else {
              return and__8282__auto____$1;
            }
          } else {
            return and__8282__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__8282__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__8282__auto__)) {
            var and__8282__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__8282__auto____$1)) {
              var and__8282__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__8282__auto____$2)) {
                var and__8282__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__8282__auto____$3)) {
                  var and__8282__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__8282__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__8282__auto____$4;
                  }
                } else {
                  return and__8282__auto____$3;
                }
              } else {
                return and__8282__auto____$2;
              }
            } else {
              return and__8282__auto____$1;
            }
          } else {
            return and__8282__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__12077__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__12069_SHARP_) {
            var and__8282__auto__ = p1.call(null, p1__12069_SHARP_);
            if (cljs.core.truth_(and__8282__auto__)) {
              return p2.call(null, p1__12069_SHARP_);
            } else {
              return and__8282__auto__;
            }
          }, args));
        };
        var G__12077 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12077__delegate.call(this, x, y, z, args);
        };
        G__12077.cljs$lang$maxFixedArity = 3;
        G__12077.cljs$lang$applyTo = function(arglist__12078) {
          var x = cljs.core.first(arglist__12078);
          arglist__12078 = cljs.core.next(arglist__12078);
          var y = cljs.core.first(arglist__12078);
          arglist__12078 = cljs.core.next(arglist__12078);
          var z = cljs.core.first(arglist__12078);
          var args = cljs.core.rest(arglist__12078);
          return G__12077__delegate(x, y, z, args);
        };
        G__12077.cljs$core$IFn$_invoke$arity$variadic = G__12077__delegate;
        return G__12077;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__8282__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__8282__auto__)) {
            var and__8282__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__8282__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__8282__auto____$1;
            }
          } else {
            return and__8282__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__8282__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__8282__auto__)) {
            var and__8282__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__8282__auto____$1)) {
              var and__8282__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__8282__auto____$2)) {
                var and__8282__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__8282__auto____$3)) {
                  var and__8282__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__8282__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__8282__auto____$4;
                  }
                } else {
                  return and__8282__auto____$3;
                }
              } else {
                return and__8282__auto____$2;
              }
            } else {
              return and__8282__auto____$1;
            }
          } else {
            return and__8282__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__8282__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__8282__auto__)) {
            var and__8282__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__8282__auto____$1)) {
              var and__8282__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__8282__auto____$2)) {
                var and__8282__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__8282__auto____$3)) {
                  var and__8282__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__8282__auto____$4)) {
                    var and__8282__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__8282__auto____$5)) {
                      var and__8282__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__8282__auto____$6)) {
                        var and__8282__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__8282__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__8282__auto____$7;
                        }
                      } else {
                        return and__8282__auto____$6;
                      }
                    } else {
                      return and__8282__auto____$5;
                    }
                  } else {
                    return and__8282__auto____$4;
                  }
                } else {
                  return and__8282__auto____$3;
                }
              } else {
                return and__8282__auto____$2;
              }
            } else {
              return and__8282__auto____$1;
            }
          } else {
            return and__8282__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__12079__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__12070_SHARP_) {
            var and__8282__auto__ = p1.call(null, p1__12070_SHARP_);
            if (cljs.core.truth_(and__8282__auto__)) {
              var and__8282__auto____$1 = p2.call(null, p1__12070_SHARP_);
              if (cljs.core.truth_(and__8282__auto____$1)) {
                return p3.call(null, p1__12070_SHARP_);
              } else {
                return and__8282__auto____$1;
              }
            } else {
              return and__8282__auto__;
            }
          }, args));
        };
        var G__12079 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12079__delegate.call(this, x, y, z, args);
        };
        G__12079.cljs$lang$maxFixedArity = 3;
        G__12079.cljs$lang$applyTo = function(arglist__12080) {
          var x = cljs.core.first(arglist__12080);
          arglist__12080 = cljs.core.next(arglist__12080);
          var y = cljs.core.first(arglist__12080);
          arglist__12080 = cljs.core.next(arglist__12080);
          var z = cljs.core.first(arglist__12080);
          var args = cljs.core.rest(arglist__12080);
          return G__12079__delegate(x, y, z, args);
        };
        G__12079.cljs$core$IFn$_invoke$arity$variadic = G__12079__delegate;
        return G__12079;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__12081__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var epn = null;
        var epn__0 = function() {
          return true;
        };
        var epn__1 = function(x) {
          return cljs.core.every_QMARK_.call(null, function(p1__12071_SHARP_) {
            return p1__12071_SHARP_.call(null, x);
          }, ps__$1);
        };
        var epn__2 = function(x, y) {
          return cljs.core.every_QMARK_.call(null, function(p1__12072_SHARP_) {
            var and__8282__auto__ = p1__12072_SHARP_.call(null, x);
            if (cljs.core.truth_(and__8282__auto__)) {
              return p1__12072_SHARP_.call(null, y);
            } else {
              return and__8282__auto__;
            }
          }, ps__$1);
        };
        var epn__3 = function(x, y, z) {
          return cljs.core.every_QMARK_.call(null, function(p1__12073_SHARP_) {
            var and__8282__auto__ = p1__12073_SHARP_.call(null, x);
            if (cljs.core.truth_(and__8282__auto__)) {
              var and__8282__auto____$1 = p1__12073_SHARP_.call(null, y);
              if (cljs.core.truth_(and__8282__auto____$1)) {
                return p1__12073_SHARP_.call(null, z);
              } else {
                return and__8282__auto____$1;
              }
            } else {
              return and__8282__auto__;
            }
          }, ps__$1);
        };
        var epn__4 = function() {
          var G__12082__delegate = function(x, y, z, args) {
            return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__12074_SHARP_) {
              return cljs.core.every_QMARK_.call(null, p1__12074_SHARP_, args);
            }, ps__$1));
          };
          var G__12082 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__12082__delegate.call(this, x, y, z, args);
          };
          G__12082.cljs$lang$maxFixedArity = 3;
          G__12082.cljs$lang$applyTo = function(arglist__12083) {
            var x = cljs.core.first(arglist__12083);
            arglist__12083 = cljs.core.next(arglist__12083);
            var y = cljs.core.first(arglist__12083);
            arglist__12083 = cljs.core.next(arglist__12083);
            var z = cljs.core.first(arglist__12083);
            var args = cljs.core.rest(arglist__12083);
            return G__12082__delegate(x, y, z, args);
          };
          G__12082.cljs$core$IFn$_invoke$arity$variadic = G__12082__delegate;
          return G__12082;
        }();
        epn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return epn__0.call(this);
            case 1:
              return epn__1.call(this, x);
            case 2:
              return epn__2.call(this, x, y);
            case 3:
              return epn__3.call(this, x, y, z);
            default:
              return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        epn.cljs$lang$maxFixedArity = 3;
        epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
        epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
        epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
        epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
        epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
        epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
        return epn;
      }();
    };
    var G__12081 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__12081__delegate.call(this, p1, p2, p3, ps);
    };
    G__12081.cljs$lang$maxFixedArity = 3;
    G__12081.cljs$lang$applyTo = function(arglist__12084) {
      var p1 = cljs.core.first(arglist__12084);
      arglist__12084 = cljs.core.next(arglist__12084);
      var p2 = cljs.core.first(arglist__12084);
      arglist__12084 = cljs.core.next(arglist__12084);
      var p3 = cljs.core.first(arglist__12084);
      var ps = cljs.core.rest(arglist__12084);
      return G__12081__delegate(p1, p2, p3, ps);
    };
    G__12081.cljs$core$IFn$_invoke$arity$variadic = G__12081__delegate;
    return G__12081;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__8294__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__8294__auto__)) {
          return or__8294__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__8294__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__8294__auto__)) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__8294__auto____$1)) {
            return or__8294__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__12091__delegate = function(x, y, z, args) {
          var or__8294__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__8294__auto__)) {
            return or__8294__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__12091 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12091__delegate.call(this, x, y, z, args);
        };
        G__12091.cljs$lang$maxFixedArity = 3;
        G__12091.cljs$lang$applyTo = function(arglist__12092) {
          var x = cljs.core.first(arglist__12092);
          arglist__12092 = cljs.core.next(arglist__12092);
          var y = cljs.core.first(arglist__12092);
          arglist__12092 = cljs.core.next(arglist__12092);
          var z = cljs.core.first(arglist__12092);
          var args = cljs.core.rest(arglist__12092);
          return G__12091__delegate(x, y, z, args);
        };
        G__12091.cljs$core$IFn$_invoke$arity$variadic = G__12091__delegate;
        return G__12091;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__8294__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__8294__auto__)) {
          return or__8294__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__8294__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__8294__auto__)) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__8294__auto____$1)) {
            return or__8294__auto____$1;
          } else {
            var or__8294__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__8294__auto____$2)) {
              return or__8294__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__8294__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__8294__auto__)) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__8294__auto____$1)) {
            return or__8294__auto____$1;
          } else {
            var or__8294__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__8294__auto____$2)) {
              return or__8294__auto____$2;
            } else {
              var or__8294__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__8294__auto____$3)) {
                return or__8294__auto____$3;
              } else {
                var or__8294__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__8294__auto____$4)) {
                  return or__8294__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__12093__delegate = function(x, y, z, args) {
          var or__8294__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__8294__auto__)) {
            return or__8294__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__12085_SHARP_) {
              var or__8294__auto____$1 = p1.call(null, p1__12085_SHARP_);
              if (cljs.core.truth_(or__8294__auto____$1)) {
                return or__8294__auto____$1;
              } else {
                return p2.call(null, p1__12085_SHARP_);
              }
            }, args);
          }
        };
        var G__12093 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12093__delegate.call(this, x, y, z, args);
        };
        G__12093.cljs$lang$maxFixedArity = 3;
        G__12093.cljs$lang$applyTo = function(arglist__12094) {
          var x = cljs.core.first(arglist__12094);
          arglist__12094 = cljs.core.next(arglist__12094);
          var y = cljs.core.first(arglist__12094);
          arglist__12094 = cljs.core.next(arglist__12094);
          var z = cljs.core.first(arglist__12094);
          var args = cljs.core.rest(arglist__12094);
          return G__12093__delegate(x, y, z, args);
        };
        G__12093.cljs$core$IFn$_invoke$arity$variadic = G__12093__delegate;
        return G__12093;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__8294__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__8294__auto__)) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__8294__auto____$1)) {
            return or__8294__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__8294__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__8294__auto__)) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__8294__auto____$1)) {
            return or__8294__auto____$1;
          } else {
            var or__8294__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__8294__auto____$2)) {
              return or__8294__auto____$2;
            } else {
              var or__8294__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__8294__auto____$3)) {
                return or__8294__auto____$3;
              } else {
                var or__8294__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__8294__auto____$4)) {
                  return or__8294__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__8294__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__8294__auto__)) {
          return or__8294__auto__;
        } else {
          var or__8294__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__8294__auto____$1)) {
            return or__8294__auto____$1;
          } else {
            var or__8294__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__8294__auto____$2)) {
              return or__8294__auto____$2;
            } else {
              var or__8294__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__8294__auto____$3)) {
                return or__8294__auto____$3;
              } else {
                var or__8294__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__8294__auto____$4)) {
                  return or__8294__auto____$4;
                } else {
                  var or__8294__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__8294__auto____$5)) {
                    return or__8294__auto____$5;
                  } else {
                    var or__8294__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__8294__auto____$6)) {
                      return or__8294__auto____$6;
                    } else {
                      var or__8294__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__8294__auto____$7)) {
                        return or__8294__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__12095__delegate = function(x, y, z, args) {
          var or__8294__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__8294__auto__)) {
            return or__8294__auto__;
          } else {
            return cljs.core.some.call(null, function(p1__12086_SHARP_) {
              var or__8294__auto____$1 = p1.call(null, p1__12086_SHARP_);
              if (cljs.core.truth_(or__8294__auto____$1)) {
                return or__8294__auto____$1;
              } else {
                var or__8294__auto____$2 = p2.call(null, p1__12086_SHARP_);
                if (cljs.core.truth_(or__8294__auto____$2)) {
                  return or__8294__auto____$2;
                } else {
                  return p3.call(null, p1__12086_SHARP_);
                }
              }
            }, args);
          }
        };
        var G__12095 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12095__delegate.call(this, x, y, z, args);
        };
        G__12095.cljs$lang$maxFixedArity = 3;
        G__12095.cljs$lang$applyTo = function(arglist__12096) {
          var x = cljs.core.first(arglist__12096);
          arglist__12096 = cljs.core.next(arglist__12096);
          var y = cljs.core.first(arglist__12096);
          arglist__12096 = cljs.core.next(arglist__12096);
          var z = cljs.core.first(arglist__12096);
          var args = cljs.core.rest(arglist__12096);
          return G__12095__delegate(x, y, z, args);
        };
        G__12095.cljs$core$IFn$_invoke$arity$variadic = G__12095__delegate;
        return G__12095;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__12097__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function() {
        var spn = null;
        var spn__0 = function() {
          return null;
        };
        var spn__1 = function(x) {
          return cljs.core.some.call(null, function(p1__12087_SHARP_) {
            return p1__12087_SHARP_.call(null, x);
          }, ps__$1);
        };
        var spn__2 = function(x, y) {
          return cljs.core.some.call(null, function(p1__12088_SHARP_) {
            var or__8294__auto__ = p1__12088_SHARP_.call(null, x);
            if (cljs.core.truth_(or__8294__auto__)) {
              return or__8294__auto__;
            } else {
              return p1__12088_SHARP_.call(null, y);
            }
          }, ps__$1);
        };
        var spn__3 = function(x, y, z) {
          return cljs.core.some.call(null, function(p1__12089_SHARP_) {
            var or__8294__auto__ = p1__12089_SHARP_.call(null, x);
            if (cljs.core.truth_(or__8294__auto__)) {
              return or__8294__auto__;
            } else {
              var or__8294__auto____$1 = p1__12089_SHARP_.call(null, y);
              if (cljs.core.truth_(or__8294__auto____$1)) {
                return or__8294__auto____$1;
              } else {
                return p1__12089_SHARP_.call(null, z);
              }
            }
          }, ps__$1);
        };
        var spn__4 = function() {
          var G__12098__delegate = function(x, y, z, args) {
            var or__8294__auto__ = spn.call(null, x, y, z);
            if (cljs.core.truth_(or__8294__auto__)) {
              return or__8294__auto__;
            } else {
              return cljs.core.some.call(null, function(p1__12090_SHARP_) {
                return cljs.core.some.call(null, p1__12090_SHARP_, args);
              }, ps__$1);
            }
          };
          var G__12098 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__12098__delegate.call(this, x, y, z, args);
          };
          G__12098.cljs$lang$maxFixedArity = 3;
          G__12098.cljs$lang$applyTo = function(arglist__12099) {
            var x = cljs.core.first(arglist__12099);
            arglist__12099 = cljs.core.next(arglist__12099);
            var y = cljs.core.first(arglist__12099);
            arglist__12099 = cljs.core.next(arglist__12099);
            var z = cljs.core.first(arglist__12099);
            var args = cljs.core.rest(arglist__12099);
            return G__12098__delegate(x, y, z, args);
          };
          G__12098.cljs$core$IFn$_invoke$arity$variadic = G__12098__delegate;
          return G__12098;
        }();
        spn = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return spn__0.call(this);
            case 1:
              return spn__1.call(this, x);
            case 2:
              return spn__2.call(this, x, y);
            case 3:
              return spn__3.call(this, x, y, z);
            default:
              return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        spn.cljs$lang$maxFixedArity = 3;
        spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
        spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
        spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
        spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
        spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
        spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
        return spn;
      }();
    };
    var G__12097 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__12097__delegate.call(this, p1, p2, p3, ps);
    };
    G__12097.cljs$lang$maxFixedArity = 3;
    G__12097.cljs$lang$applyTo = function(arglist__12100) {
      var p1 = cljs.core.first(arglist__12100);
      arglist__12100 = cljs.core.next(arglist__12100);
      var p2 = cljs.core.first(arglist__12100);
      arglist__12100 = cljs.core.next(arglist__12100);
      var p3 = cljs.core.first(arglist__12100);
      var ps = cljs.core.rest(arglist__12100);
      return G__12097__delegate(p1, p2, p3, ps);
    };
    G__12097.cljs$core$IFn$_invoke$arity$variadic = G__12097__delegate;
    return G__12097;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__9136__auto___12102 = size;
          var i_12103 = 0;
          while (true) {
            if (i_12103 < n__9136__auto___12102) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_12103)));
              var G__12104 = i_12103 + 1;
              i_12103 = G__12104;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && (s2 && s3)) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__12105__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(p1__12101_SHARP_) {
        return cljs.core.apply.call(null, f, p1__12101_SHARP_);
      }, step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__12105 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__12105__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__12105.cljs$lang$maxFixedArity = 4;
    G__12105.cljs$lang$applyTo = function(arglist__12106) {
      var f = cljs.core.first(arglist__12106);
      arglist__12106 = cljs.core.next(arglist__12106);
      var c1 = cljs.core.first(arglist__12106);
      arglist__12106 = cljs.core.next(arglist__12106);
      var c2 = cljs.core.first(arglist__12106);
      arglist__12106 = cljs.core.next(arglist__12106);
      var c3 = cljs.core.first(arglist__12106);
      var colls = cljs.core.rest(arglist__12106);
      return G__12105__delegate(f, c1, c2, c3, colls);
    };
    G__12105.cljs$core$IFn$_invoke$arity$variadic = G__12105__delegate;
    return G__12105;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function take(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.drop = function drop(n, coll) {
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (n__$1 > 0 && s) {
        var G__12107 = n__$1 - 1;
        var G__12108 = cljs.core.rest.call(null, s);
        n__$1 = G__12107;
        coll__$1 = G__12108;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, n, coll);
  }, null, null);
};
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__12109 = cljs.core.next.call(null, s);
      var G__12110 = cljs.core.next.call(null, lead);
      s = G__12109;
      lead = G__12110;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function drop_while(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq.call(null, coll__$1);
      if (cljs.core.truth_(function() {
        var and__8282__auto__ = s;
        if (and__8282__auto__) {
          return pred__$1.call(null, cljs.core.first.call(null, s));
        } else {
          return and__8282__auto__;
        }
      }())) {
        var G__12111 = pred__$1;
        var G__12112 = cljs.core.rest.call(null, s);
        pred__$1 = G__12111;
        coll__$1 = G__12112;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function() {
    return step.call(null, pred, coll);
  }, null, null);
};
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__12113__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__12113 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__12113__delegate.call(this, c1, c2, colls);
    };
    G__12113.cljs$lang$maxFixedArity = 2;
    G__12113.cljs$lang$applyTo = function(arglist__12114) {
      var c1 = cljs.core.first(arglist__12114);
      arglist__12114 = cljs.core.next(arglist__12114);
      var c2 = cljs.core.first(arglist__12114);
      var colls = cljs.core.rest(arglist__12114);
      return G__12113__delegate(c1, c2, colls);
    };
    G__12113.cljs$core$IFn$_invoke$arity$variadic = G__12113__delegate;
    return G__12113;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var coll__$1 = temp__4090__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__2 = function(f, coll) {
    return cljs.core.flatten1.call(null, cljs.core.map.call(null, f, coll));
  };
  var mapcat__3 = function() {
    var G__12115__delegate = function(f, coll, colls) {
      return cljs.core.flatten1.call(null, cljs.core.apply.call(null, cljs.core.map, f, coll, colls));
    };
    var G__12115 = function(f, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__12115__delegate.call(this, f, coll, colls);
    };
    G__12115.cljs$lang$maxFixedArity = 2;
    G__12115.cljs$lang$applyTo = function(arglist__12116) {
      var f = cljs.core.first(arglist__12116);
      arglist__12116 = cljs.core.next(arglist__12116);
      var coll = cljs.core.first(arglist__12116);
      var colls = cljs.core.rest(arglist__12116);
      return G__12115__delegate(f, coll, colls);
    };
    G__12115.cljs$core$IFn$_invoke$arity$variadic = G__12115__delegate;
    return G__12115;
  }();
  mapcat = function(f, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapcat__2.call(this, f, coll);
      default:
        return mapcat__3.cljs$core$IFn$_invoke$arity$variadic(f, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 2;
  mapcat.cljs$lang$applyTo = mapcat__3.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$2 = mapcat__2;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__3.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function filter(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
        var c = cljs.core.chunk_first.call(null, s);
        var size = cljs.core.count.call(null, c);
        var b = cljs.core.chunk_buffer.call(null, size);
        var n__9136__auto___12117 = size;
        var i_12118 = 0;
        while (true) {
          if (i_12118 < n__9136__auto___12117) {
            if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_12118)))) {
              cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_12118));
            } else {
            }
            var G__12119 = i_12118 + 1;
            i_12118 = G__12119;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
      } else {
        var f = cljs.core.first.call(null, s);
        var r = cljs.core.rest.call(null, s);
        if (cljs.core.truth_(pred.call(null, f))) {
          return cljs.core.cons.call(null, f, filter.call(null, pred, r));
        } else {
          return filter.call(null, pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.remove = function remove(pred, coll) {
  return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
};
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__12120_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__12120_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function into(to, from) {
  if (!(to == null)) {
    if (function() {
      var G__12122 = to;
      if (G__12122) {
        var bit__8931__auto__ = G__12122.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__8931__auto__ || G__12122.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from));
    } else {
      return cljs.core.reduce.call(null, cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__12123__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__12123 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__12123__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__12123.cljs$lang$maxFixedArity = 4;
    G__12123.cljs$lang$applyTo = function(arglist__12124) {
      var f = cljs.core.first(arglist__12124);
      arglist__12124 = cljs.core.next(arglist__12124);
      var c1 = cljs.core.first(arglist__12124);
      arglist__12124 = cljs.core.next(arglist__12124);
      var c2 = cljs.core.first(arglist__12124);
      arglist__12124 = cljs.core.next(arglist__12124);
      var c3 = cljs.core.first(arglist__12124);
      var colls = cljs.core.rest(arglist__12124);
      return G__12123__delegate(f, c1, c2, c3, colls);
    };
    G__12123.cljs$core$IFn$_invoke$arity$variadic = G__12123__delegate;
    return G__12123;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__12126 = m__$1;
          if (G__12126) {
            var bit__8938__auto__ = G__12126.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__8938__auto__ || G__12126.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__12126.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__12126);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__12126);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__12127 = sentinel;
            var G__12128 = m__$2;
            var G__12129 = cljs.core.next.call(null, ks__$1);
            sentinel = G__12127;
            m__$1 = G__12128;
            ks__$1 = G__12129;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__12130, v) {
  var vec__12132 = p__12130;
  var k = cljs.core.nth.call(null, vec__12132, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__12132, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__12133, f) {
    var vec__12143 = p__12133;
    var k = cljs.core.nth.call(null, vec__12143, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__12143, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__12134, f, a) {
    var vec__12144 = p__12134;
    var k = cljs.core.nth.call(null, vec__12144, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__12144, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__12135, f, a, b) {
    var vec__12145 = p__12135;
    var k = cljs.core.nth.call(null, vec__12145, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__12145, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__12136, f, a, b, c) {
    var vec__12146 = p__12136;
    var k = cljs.core.nth.call(null, vec__12146, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__12146, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__12148__delegate = function(m, p__12137, f, a, b, c, args) {
      var vec__12147 = p__12137;
      var k = cljs.core.nth.call(null, vec__12147, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__12147, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__12148 = function(m, p__12137, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__12148__delegate.call(this, m, p__12137, f, a, b, c, args);
    };
    G__12148.cljs$lang$maxFixedArity = 6;
    G__12148.cljs$lang$applyTo = function(arglist__12149) {
      var m = cljs.core.first(arglist__12149);
      arglist__12149 = cljs.core.next(arglist__12149);
      var p__12137 = cljs.core.first(arglist__12149);
      arglist__12149 = cljs.core.next(arglist__12149);
      var f = cljs.core.first(arglist__12149);
      arglist__12149 = cljs.core.next(arglist__12149);
      var a = cljs.core.first(arglist__12149);
      arglist__12149 = cljs.core.next(arglist__12149);
      var b = cljs.core.first(arglist__12149);
      arglist__12149 = cljs.core.next(arglist__12149);
      var c = cljs.core.first(arglist__12149);
      var args = cljs.core.rest(arglist__12149);
      return G__12148__delegate(m, p__12137, f, a, b, c, args);
    };
    G__12148.cljs$core$IFn$_invoke$arity$variadic = G__12148__delegate;
    return G__12148;
  }();
  update_in = function(m, p__12137, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__12137, f);
      case 4:
        return update_in__4.call(this, m, p__12137, f, a);
      case 5:
        return update_in__5.call(this, m, p__12137, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__12137, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__12137, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__8859__auto__, writer__8860__auto__, opts__8861__auto__) {
  return cljs.core._write.call(null, writer__8860__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__12150 = ll - 5;
      var G__12151 = r;
      ll = G__12150;
      ret = G__12151;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    if (i >= cljs.core.tail_off.call(null, pv)) {
      return pv.tail;
    } else {
      var node = pv.root;
      var level = pv.shift;
      while (true) {
        if (level > 0) {
          var G__12152 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
          var G__12153 = level - 5;
          node = G__12152;
          level = G__12153;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var ret = cljs.core.pv_clone_node.call(null, node);
        cljs.core.pv_aset.call(null, ret, subidx, null);
        return ret;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__8705__auto__ = self__.__hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= k && k < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= k) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[k & 31] = v;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, k, v), self__.tail, null);
    }
  } else {
    if (k === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, v);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw new Error([cljs.core.str("Index "), cljs.core.str(k), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__12155 = null;
  var G__12155__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__12155__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__12155 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12155__2.call(this, self__, k);
      case 3:
        return G__12155__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__12155;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args12154) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12154)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var step_init = [0, init];
  var i = 0;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$1 = function() {
        var j = 0;
        var init__$1 = step_init[1];
        while (true) {
          if (j < len) {
            var init__$2 = f.call(null, init__$1, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
              return init__$2;
            } else {
              var G__12156 = j + 1;
              var G__12157 = init__$2;
              j = G__12156;
              init__$1 = G__12157;
              continue;
            }
          } else {
            step_init[0] = len;
            step_init[1] = init__$1;
            return init__$1;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
        return cljs.core.deref.call(null, init__$1);
      } else {
        var G__12158 = i + step_init[0];
        i = G__12158;
        continue;
      }
    } else {
      return step_init[1];
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__9136__auto___12159 = len;
    var i_12160 = 0;
    while (true) {
      if (i_12160 < n__9136__auto___12159) {
        new_tail[i_12160] = self__.tail[i_12160];
        var G__12161 = i_12160 + 1;
        i_12160 = G__12161;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, start) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f, start);
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt < 32) {
      return cljs.core.array_seq.call(null, self__.tail);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.chunked_seq.call(null, coll__$1, 0, 0);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_tail = cljs.core.array_for.call(null, coll__$1, self__.cnt - 2);
          var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
          var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
          var cnt_1 = self__.cnt - 1;
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
          } else {
            return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._assoc.call(null, coll__$1, n, val);
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__12162 = i + 1;
        var G__12163 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__12162;
        out = G__12163;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray.call(null, args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__12164) {
    var args = cljs.core.seq(arglist__12164);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32243948;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__8705__auto__ = self__.__hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return null;
  } else {
    return s;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var l = self__.node.length;
  var s = self__.i + l < cljs.core._count.call(null, self__.vec) ? cljs.core.chunked_seq.call(null, self__.vec, self__.i + l, 0) : null;
  if (s == null) {
    return cljs.core.List.EMPTY;
  } else {
    return s;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32400159;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__8705__auto__ = self__.__hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + key;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__8601__auto__ = self__.end;
    var y__8602__auto__ = v_pos + 1;
    return x__8601__auto__ > y__8602__auto__ ? x__8601__auto__ : y__8602__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__12166 = null;
  var G__12166__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__12166__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__12166 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12166__2.call(this, self__, k);
      case 3:
        return G__12166__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__12166;
}();
cljs.core.Subvec.prototype.apply = function(self__, args12165) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12165)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function subvec_seq(i) {
    if (i === self__.end) {
      return null;
    } else {
      return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function() {
        return subvec_seq.call(null, i + 1);
      }, null, null));
    }
  };
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._assoc.call(null, coll__$1, n, val);
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$ = true;
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__12167 = meta;
      var G__12168 = v.v;
      var G__12169 = v.start + start;
      var G__12170 = v.start + end;
      var G__12171 = __hash;
      meta = G__12167;
      v = G__12168;
      start = G__12169;
      end = G__12170;
      __hash = G__12171;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || (end < 0 || (start > c || end > c))) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj12175 = {};
    return obj12175;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        cljs.core.pv_aset.call(null, node__$1, subidx, null);
        return node__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.editable_array_for = function editable_array_for(tv, i) {
  if (0 <= i && i < tv.cnt) {
    if (i >= cljs.core.tail_off.call(null, tv)) {
      return tv.tail;
    } else {
      var root = tv.root;
      var node = root;
      var level = tv.shift;
      while (true) {
        if (level > 0) {
          var G__12176 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
          var G__12177 = level - 5;
          node = G__12176;
          level = G__12177;
          continue;
        } else {
          return node.arr;
        }
        break;
      }
    }
  } else {
    throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in transient vector of length "), cljs.core.str(tv.cnt)].join(""));
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__12179 = null;
  var G__12179__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12179__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12179 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12179__2.call(this, self__, k);
      case 3:
        return G__12179__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__12179;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args12178) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12178)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function go(level, node) {
          var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
          if (level === 0) {
            cljs.core.pv_aset.call(null, node__$1, n & 31, val);
            return node__$1;
          } else {
            var subidx = n >>> level & 31;
            cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
            return node__$1;
          }
        }.call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
        } else {
          return null;
        }
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var new_tail = cljs.core.editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
            var new_root = function() {
              var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
              if (!(nr == null)) {
                return nr;
              } else {
                return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
              }
            }();
            if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
              var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
              self__.root = new_root__$1;
              self__.shift = self__.shift - 5;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            } else {
              self__.root = new_root;
              self__.cnt = self__.cnt - 1;
              self__.tail = new_tail;
              return tcoll__$1;
            }
          } else {
            return null;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__8705__auto__ = self__.__hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4090__auto__) {
    var f1 = temp__4090__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__8705__auto__ = self__.__hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__8294__auto__ = self__.rear;
      if (cljs.core.truth_(or__8294__auto__)) {
        return or__8294__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__8294__auto__ = self__.front;
    if (cljs.core.truth_(or__8294__auto__)) {
      return or__8294__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4090__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4090__auto__) {
      var f1 = temp__4090__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__12180 = i + incr;
        i = G__12180;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return 0;
      } else {
        return null;
      }
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__12181 = i + 1;
      var G__12182 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__12181;
      out = G__12182;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj12186 = {};
    return obj12186;
  }();
  var l = ks.length;
  var i_12187 = 0;
  while (true) {
    if (i_12187 < l) {
      var k_12188 = ks[i_12187];
      new_obj[k_12188] = obj[k_12188];
      var G__12189 = i_12187 + 1;
      i_12187 = G__12189;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__8705__auto__ = self__.__hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__12192 = null;
  var G__12192__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12192__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12192 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12192__2.call(this, self__, k);
      case 3:
        return G__12192__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__12192;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args12191) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12191)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__12193 = cljs.core.rest.call(null, keys__$1);
        var G__12194 = init__$2;
        keys__$1 = G__12193;
        init__$1 = G__12194;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(p1__12190_SHARP_) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__12190_SHARP_, self__.strobj[p1__12190_SHARP_]], null);
    }, self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj12196 = {};
  return obj12196;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__12197 = i + 2;
          i = G__12197;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__12198 = i + 2;
          i = G__12198;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__12199 = i + 2;
          i = G__12199;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__12200 = i + 2;
          i = G__12200;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var G__12201 = i + 2;
          i = G__12201;
          continue;
        } else {
          return null;
        }
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_12202 = 0;
  while (true) {
    if (i_12202 < l) {
      narr[i_12202] = arr[i_12202];
      var G__12203 = i_12202 + 1;
      i_12202 = G__12203;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj12206 = {};
    return obj12206;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__8705__auto__ = self__.__hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var arr__$1 = function() {
          var G__12207 = cljs.core.aclone.call(null, self__.arr);
          G__12207[idx + 1] = v;
          return G__12207;
        }();
        return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__12208 = null;
  var G__12208__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12208__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12208 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12208__2.call(this, self__, k);
      case 3:
        return G__12208__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__12208;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args12204) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12204)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__12209 = i + 2;
        var G__12210 = init__$2;
        i = G__12209;
        init__$1 = G__12210;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__12211 = s + 2;
            var G__12212 = d;
            s = G__12211;
            d = G__12212;
            continue;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              new_arr[d] = self__.arr[s];
              new_arr[d + 1] = self__.arr[s + 1];
              var G__12213 = s + 2;
              var G__12214 = d + 2;
              s = G__12213;
              d = G__12214;
              continue;
            } else {
              return null;
            }
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__12215 = i + 2;
        var G__12216 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__12215;
        ret = G__12216;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__12217_12219 = self__.arr;
      G__12217_12219.pop();
      G__12217_12219.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__12218 = o;
      if (G__12218) {
        var bit__8938__auto__ = G__12218.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__8938__auto__ || G__12218.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__12218.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__12218);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__12218);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__12220 = cljs.core.next.call(null, es);
          var G__12221 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__12220;
          tcoll__$2 = G__12221;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__12222 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__12223 = i + 2;
      out = G__12222;
      i = G__12223;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__8859__auto__, writer__8860__auto__, opts__8861__auto__) {
  return cljs.core._write.call(null, writer__8860__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core._EQ_.call(null, key, other);
      } else {
        return null;
      }
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__12226 = cljs.core.aclone.call(null, arr);
    G__12226[i] = a;
    return G__12226;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__12227 = cljs.core.aclone.call(null, arr);
    G__12227[i] = a;
    G__12227[j] = b;
    return G__12227;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__12228 = i + 2;
        var G__12229 = init__$2;
        i = G__12228;
        init__$1 = G__12229;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_12230 = 0;
        var j_12231 = 0;
        while (true) {
          if (i_12230 < 32) {
            if ((self__.bitmap >>> i_12230 & 1) === 0) {
              var G__12232 = i_12230 + 1;
              var G__12233 = j_12231;
              i_12230 = G__12232;
              j_12231 = G__12233;
              continue;
            } else {
              nodes[i_12230] = !(self__.arr[j_12231] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_12231]), self__.arr[j_12231], self__.arr[j_12231 + 1], added_leaf_QMARK_) : self__.arr[j_12231 + 1];
              var G__12234 = i_12230 + 1;
              var G__12235 = j_12231 + 2;
              i_12230 = G__12234;
              j_12231 = G__12235;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var new_arr = new Array(2 * (n + 4));
          cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
          new_arr[2 * idx] = key;
          new_arr[2 * idx + 1] = val;
          cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
          added_leaf_QMARK_.val = true;
          var editable = inode.ensure_editable(edit__$1);
          editable.arr = new_arr;
          editable.bitmap = editable.bitmap | bit;
          return editable;
        } else {
          return null;
        }
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return inode.edit_and_remove_pair(edit__$1, bit, idx);
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
            } else {
              return null;
            }
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return inode;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_12236 = 0;
      var j_12237 = 0;
      while (true) {
        if (i_12236 < 32) {
          if ((self__.bitmap >>> i_12236 & 1) === 0) {
            var G__12238 = i_12236 + 1;
            var G__12239 = j_12237;
            i_12236 = G__12238;
            j_12237 = G__12239;
            continue;
          } else {
            nodes[i_12236] = !(self__.arr[j_12237] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_12237]), self__.arr[j_12237], self__.arr[j_12237 + 1], added_leaf_QMARK_) : self__.arr[j_12237 + 1];
            var G__12240 = i_12236 + 1;
            var G__12241 = j_12237 + 2;
            i_12236 = G__12240;
            j_12237 = G__12241;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          added_leaf_QMARK_.val = true;
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = 2 * (array_node.cnt - 1);
  var new_arr = new Array(len);
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__12242 = i + 1;
        var G__12243 = j + 2;
        var G__12244 = bitmap | 1 << i;
        i = G__12242;
        j = G__12243;
        bitmap = G__12244;
        continue;
      } else {
        var G__12245 = i + 1;
        var G__12246 = j;
        var G__12247 = bitmap;
        i = G__12245;
        j = G__12246;
        bitmap = G__12247;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__12248 = i + 1;
          var G__12249 = init__$2;
          i = G__12248;
          init__$1 = G__12249;
          continue;
        }
      } else {
        var G__12250 = i + 1;
        var G__12251 = init__$1;
        i = G__12250;
        init__$1 = G__12251;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        } else {
          return null;
        }
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__12252 = i + 2;
        i = G__12252;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__8705__auto__ = self__.__hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4090__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4090__auto__)) {
              var node = temp__4090__auto__;
              var temp__4090__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4090__auto____$1)) {
                var node_seq = temp__4090__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__12253 = j + 2;
                j = G__12253;
                continue;
              }
            } else {
              var G__12254 = j + 2;
              j = G__12254;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__8705__auto__ = self__.__hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4090__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4090__auto__)) {
            var nj = temp__4090__auto__;
            var temp__4090__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4090__auto____$1)) {
              var ns = temp__4090__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__12255 = j + 1;
              j = G__12255;
              continue;
            }
          } else {
            var G__12256 = j + 1;
            j = G__12256;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj12259 = {};
    return obj12259;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__8705__auto__ = self__.__hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__12260 = null;
  var G__12260__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12260__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12260 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12260__2.call(this, self__, k);
      case 3:
        return G__12260__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__12260;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args12257) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12257)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return init__$1;
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
        if (new_root === self__.root) {
          return coll__$1;
        } else {
          return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__12261 = i + 1;
      var G__12262 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__12261;
      out = G__12262;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__12263 = o;
      if (G__12263) {
        var bit__8938__auto__ = G__12263.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__8938__auto__ || G__12263.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__12263.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__12263);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__12263);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4090__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4090__auto__)) {
          var e = temp__4090__auto__;
          var G__12264 = cljs.core.next.call(null, es);
          var G__12265 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__12264;
          tcoll__$1 = G__12265;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__12266 = ascending_QMARK_ ? t.left : t.right;
      var G__12267 = cljs.core.conj.call(null, stack__$1, t);
      t = G__12266;
      stack__$1 = G__12267;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__8705__auto__ = self__.__hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, ins, right, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return new cljs.core.BlackNode(key, val, left, ins, null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw new Error("red-black tree invariant violation");
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__8705__auto__ = self__.__hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__12269 = null;
  var G__12269__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12269__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12269 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12269__2.call(this, self__, k);
      case 3:
        return G__12269__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__12269;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args12268) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12268)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__8705__auto__ = self__.__hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_coll.call(null, coll__$1);
    self__.__hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.call = function() {
  var G__12271 = null;
  var G__12271__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12271__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12271 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12271__2.call(this, self__, k);
      case 3:
        return G__12271__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__12271;
}();
cljs.core.RedNode.prototype.apply = function(self__, args12270) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12270)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return null;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return not_found;
      } else {
        return null;
      }
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
          if (!(ins == null)) {
            return tree.add_right(ins);
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var app = tree_map_append.call(null, left.right, right.left);
            if (app instanceof cljs.core.RedNode) {
              return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
            } else {
              return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
            }
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          var del = tree_map_remove.call(null, comp, tree.right, k, found);
          if (!(del == null) || !(found[0] == null)) {
            if (tree.right instanceof cljs.core.BlackNode) {
              return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
            } else {
              return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
      } else {
        return null;
      }
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__8705__auto__ = self__.__hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_imap.call(null, coll__$1);
    self__.__hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__12273 = null;
  var G__12273__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12273__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12273 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12273__2.call(this, self__, k);
      case 3:
        return G__12273__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__12273;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args12272) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12272)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__12274 = t.left;
          t = G__12274;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var G__12275 = t.right;
            t = G__12275;
            continue;
          } else {
            return null;
          }
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__12276 = cljs.core.conj.call(null, stack, t);
              var G__12277 = t.left;
              stack = G__12276;
              t = G__12277;
              continue;
            } else {
              var G__12278 = stack;
              var G__12279 = t.right;
              stack = G__12278;
              t = G__12279;
              continue;
            }
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              if (c > 0) {
                var G__12280 = cljs.core.conj.call(null, stack, t);
                var G__12281 = t.right;
                stack = G__12280;
                t = G__12281;
                continue;
              } else {
                var G__12282 = stack;
                var G__12283 = t.left;
                stack = G__12282;
                t = G__12283;
                continue;
              }
            } else {
              return null;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__12284 = cljs.core.nnext.call(null, in$);
        var G__12285 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__12284;
        out = G__12285;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__12286) {
    var keyvals = cljs.core.seq(arglist__12286);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__12287) {
    var keyvals = cljs.core.seq(arglist__12287);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj12291 = {};
      return obj12291;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__12292 = cljs.core.nnext.call(null, kvs);
        kvs = G__12292;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject.call(null, ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__12293) {
    var keyvals = cljs.core.seq(arglist__12293);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__12294 = cljs.core.nnext.call(null, in$);
        var G__12295 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__12294;
        out = G__12295;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__12296) {
    var keyvals = cljs.core.seq(arglist__12296);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__12297 = cljs.core.nnext.call(null, in$);
        var G__12298 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__12297;
        out = G__12298;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__12299) {
    var comparator = cljs.core.first(arglist__12299);
    var keyvals = cljs.core.rest(arglist__12299);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__12300 = self__.mseq;
    if (G__12300) {
      var bit__8938__auto__ = G__12300.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__8938__auto__ || G__12300.cljs$core$INext$) {
        return true;
      } else {
        if (!G__12300.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12300);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12300);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__12301 = self__.mseq;
    if (G__12301) {
      var bit__8938__auto__ = G__12301.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__8938__auto__ || G__12301.cljs$core$INext$) {
        return true;
      } else {
        if (!G__12301.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12301);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12301);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__12302 = self__.mseq;
    if (G__12302) {
      var bit__8938__auto__ = G__12302.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__8938__auto__ || G__12302.cljs$core$INext$) {
        return true;
      } else {
        if (!G__12302.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12302);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12302);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__12303 = self__.mseq;
    if (G__12303) {
      var bit__8938__auto__ = G__12303.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__8938__auto__ || G__12303.cljs$core$INext$) {
        return true;
      } else {
        if (!G__12303.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12303);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__12303);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4092__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4092__auto__) {
    var mseq = temp__4092__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__12304_SHARP_, p2__12305_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__8294__auto__ = p1__12304_SHARP_;
          if (cljs.core.truth_(or__8294__auto__)) {
            return or__8294__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__12305_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__12306) {
    var maps = cljs.core.seq(arglist__12306);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__8294__auto__ = m1;
            if (cljs.core.truth_(or__8294__auto__)) {
              return or__8294__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__12307) {
    var f = cljs.core.first(arglist__12307);
    var maps = cljs.core.rest(arglist__12307);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789));
      var G__12308 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", 4155500789)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__12309 = cljs.core.next.call(null, keys);
      ret = G__12308;
      keys = G__12309;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 4;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__8705__auto__ = self__.__hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__12312 = null;
  var G__12312__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12312__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12312 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12312__2.call(this, self__, k);
      case 3:
        return G__12312__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__12312;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args12311) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12311)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__12310_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__12310_SHARP_);
  }, other));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__12313 = i + 1;
        var G__12314 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__12313;
        out = G__12314;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__12315 = i + 1;
        var G__12316 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__12315;
        out = G__12316;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__12318 = null;
  var G__12318__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__12318__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__12318 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12318__2.call(this, self__, k);
      case 3:
        return G__12318__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__12318;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args12317) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12317)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__8705__auto__ = self__.__hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_iset.call(null, coll__$1);
    self__.__hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__12321 = null;
  var G__12321__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__12321__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__12321 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__12321__2.call(this, self__, k);
      case 3:
        return G__12321__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__12321;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args12320) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12320)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && (cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(p1__12319_SHARP_) {
    return cljs.core.contains_QMARK_.call(null, coll__$1, p1__12319_SHARP_);
  }, other));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__9130__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__9130__auto__.length) {
        var G__12322 = i + 1;
        var G__12323 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__12322;
        res = G__12323;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var in$__$1 = in$;
        var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
        while (true) {
          if (!(in$__$1 == null)) {
            var G__12324 = cljs.core._next.call(null, in$__$1);
            var G__12325 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
            in$__$1 = G__12324;
            out = G__12325;
            continue;
          } else {
            return cljs.core._persistent_BANG_.call(null, out);
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__12326__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__12326 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__12326__delegate.call(this, keys);
    };
    G__12326.cljs$lang$maxFixedArity = 0;
    G__12326.cljs$lang$applyTo = function(arglist__12327) {
      var keys = cljs.core.seq(arglist__12327);
      return G__12326__delegate(keys);
    };
    G__12326.cljs$core$IFn$_invoke$arity$variadic = G__12326__delegate;
    return G__12326;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__12328) {
    var keys = cljs.core.seq(arglist__12328);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__12329) {
    var comparator = cljs.core.first(arglist__12329);
    var keys = cljs.core.rest(arglist__12329);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function replace(smap, coll) {
  if (cljs.core.vector_QMARK_.call(null, coll)) {
    var n = cljs.core.count.call(null, coll);
    return cljs.core.reduce.call(null, function(v, i) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
      } else {
        return v;
      }
    }, coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
  } else {
    return cljs.core.map.call(null, function(p1__12330_SHARP_) {
      var temp__4090__auto__ = cljs.core.find.call(null, smap, p1__12330_SHARP_);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var e = temp__4090__auto__;
        return cljs.core.second.call(null, e);
      } else {
        return p1__12330_SHARP_;
      }
    }, coll);
  }
};
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__12337, seen__$1) {
        while (true) {
          var vec__12338 = p__12337;
          var f = cljs.core.nth.call(null, vec__12338, 0, null);
          var xs__$1 = vec__12338;
          var temp__4092__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4092__auto__) {
            var s = temp__4092__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__12339 = cljs.core.rest.call(null, s);
              var G__12340 = seen__$1;
              p__12337 = G__12339;
              seen__$1 = G__12340;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__12341 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__12342 = cljs.core.next.call(null, s__$1);
      ret = G__12341;
      s__$1 = G__12342;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__12344 = x;
    if (G__12344) {
      var bit__8931__auto__ = G__12344.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__8931__auto__ || G__12344.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__12345 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__12346 = cljs.core.next.call(null, ks);
      var G__12347 = cljs.core.next.call(null, vs);
      map = G__12345;
      ks = G__12346;
      vs = G__12347;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__12350__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__12348_SHARP_, p2__12349_SHARP_) {
        return max_key.call(null, k, p1__12348_SHARP_, p2__12349_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__12350 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__12350__delegate.call(this, k, x, y, more);
    };
    G__12350.cljs$lang$maxFixedArity = 3;
    G__12350.cljs$lang$applyTo = function(arglist__12351) {
      var k = cljs.core.first(arglist__12351);
      arglist__12351 = cljs.core.next(arglist__12351);
      var x = cljs.core.first(arglist__12351);
      arglist__12351 = cljs.core.next(arglist__12351);
      var y = cljs.core.first(arglist__12351);
      var more = cljs.core.rest(arglist__12351);
      return G__12350__delegate(k, x, y, more);
    };
    G__12350.cljs$core$IFn$_invoke$arity$variadic = G__12350__delegate;
    return G__12350;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__12354__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__12352_SHARP_, p2__12353_SHARP_) {
        return min_key.call(null, k, p1__12352_SHARP_, p2__12353_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__12354 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__12354__delegate.call(this, k, x, y, more);
    };
    G__12354.cljs$lang$maxFixedArity = 3;
    G__12354.cljs$lang$applyTo = function(arglist__12355) {
      var k = cljs.core.first(arglist__12355);
      arglist__12355 = cljs.core.next(arglist__12355);
      var x = cljs.core.first(arglist__12355);
      arglist__12355 = cljs.core.next(arglist__12355);
      var y = cljs.core.first(arglist__12355);
      var more = cljs.core.rest(arglist__12355);
      return G__12354__delegate(k, x, y, more);
    };
    G__12354.cljs$core$IFn$_invoke$arity$variadic = G__12354__delegate;
    return G__12354;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function take_while(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__12358 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__12358, 0, null);
        var s = vec__12358;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__12359 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__12359, 0, null);
      var s = vec__12359;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4092__auto__)) {
        var vec__12362 = temp__4092__auto__;
        var e = cljs.core.nth.call(null, vec__12362, 0, null);
        var s = vec__12362;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4092__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var vec__12363 = temp__4092__auto__;
      var e = cljs.core.nth.call(null, vec__12363, 0, null);
      var s = vec__12363;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__8705__auto__ = self__.__hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_coll.call(null, rng__$1);
    self__.__hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil((self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICloneable$ = true;
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function take_nth(n, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function partition_by(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4092__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4092__auto__) {
      var s = temp__4092__auto__;
      var fst = cljs.core.first.call(null, s);
      var fv = f.call(null, fst);
      var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv) {
        return function(p1__12364_SHARP_) {
          return cljs.core._EQ_.call(null, fv, f.call(null, p1__12364_SHARP_));
        };
      }(fst, fv), cljs.core.next.call(null, s)));
      return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4090__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4090__auto__) {
        var s = temp__4090__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4092__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4092__auto__) {
        var s = temp__4092__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__12375 = null;
      var G__12375__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__12375__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__12375__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__12375__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__12375__4 = function() {
        var G__12376__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__12376 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12376__delegate.call(this, x, y, z, args);
        };
        G__12376.cljs$lang$maxFixedArity = 3;
        G__12376.cljs$lang$applyTo = function(arglist__12377) {
          var x = cljs.core.first(arglist__12377);
          arglist__12377 = cljs.core.next(arglist__12377);
          var y = cljs.core.first(arglist__12377);
          arglist__12377 = cljs.core.next(arglist__12377);
          var z = cljs.core.first(arglist__12377);
          var args = cljs.core.rest(arglist__12377);
          return G__12376__delegate(x, y, z, args);
        };
        G__12376.cljs$core$IFn$_invoke$arity$variadic = G__12376__delegate;
        return G__12376;
      }();
      G__12375 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__12375__0.call(this);
          case 1:
            return G__12375__1.call(this, x);
          case 2:
            return G__12375__2.call(this, x, y);
          case 3:
            return G__12375__3.call(this, x, y, z);
          default:
            return G__12375__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__12375.cljs$lang$maxFixedArity = 3;
      G__12375.cljs$lang$applyTo = G__12375__4.cljs$lang$applyTo;
      return G__12375;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__12378 = null;
      var G__12378__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__12378__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__12378__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__12378__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__12378__4 = function() {
        var G__12379__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__12379 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12379__delegate.call(this, x, y, z, args);
        };
        G__12379.cljs$lang$maxFixedArity = 3;
        G__12379.cljs$lang$applyTo = function(arglist__12380) {
          var x = cljs.core.first(arglist__12380);
          arglist__12380 = cljs.core.next(arglist__12380);
          var y = cljs.core.first(arglist__12380);
          arglist__12380 = cljs.core.next(arglist__12380);
          var z = cljs.core.first(arglist__12380);
          var args = cljs.core.rest(arglist__12380);
          return G__12379__delegate(x, y, z, args);
        };
        G__12379.cljs$core$IFn$_invoke$arity$variadic = G__12379__delegate;
        return G__12379;
      }();
      G__12378 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__12378__0.call(this);
          case 1:
            return G__12378__1.call(this, x);
          case 2:
            return G__12378__2.call(this, x, y);
          case 3:
            return G__12378__3.call(this, x, y, z);
          default:
            return G__12378__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__12378.cljs$lang$maxFixedArity = 3;
      G__12378.cljs$lang$applyTo = G__12378__4.cljs$lang$applyTo;
      return G__12378;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__12381 = null;
      var G__12381__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__12381__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__12381__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__12381__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__12381__4 = function() {
        var G__12382__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__12382 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__12382__delegate.call(this, x, y, z, args);
        };
        G__12382.cljs$lang$maxFixedArity = 3;
        G__12382.cljs$lang$applyTo = function(arglist__12383) {
          var x = cljs.core.first(arglist__12383);
          arglist__12383 = cljs.core.next(arglist__12383);
          var y = cljs.core.first(arglist__12383);
          arglist__12383 = cljs.core.next(arglist__12383);
          var z = cljs.core.first(arglist__12383);
          var args = cljs.core.rest(arglist__12383);
          return G__12382__delegate(x, y, z, args);
        };
        G__12382.cljs$core$IFn$_invoke$arity$variadic = G__12382__delegate;
        return G__12382;
      }();
      G__12381 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__12381__0.call(this);
          case 1:
            return G__12381__1.call(this, x);
          case 2:
            return G__12381__2.call(this, x, y);
          case 3:
            return G__12381__3.call(this, x, y, z);
          default:
            return G__12381__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__12381.cljs$lang$maxFixedArity = 3;
      G__12381.cljs$lang$applyTo = G__12381__4.cljs$lang$applyTo;
      return G__12381;
    }();
  };
  var juxt__4 = function() {
    var G__12384__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function() {
        var G__12385 = null;
        var G__12385__0 = function() {
          return cljs.core.reduce.call(null, function(p1__12365_SHARP_, p2__12366_SHARP_) {
            return cljs.core.conj.call(null, p1__12365_SHARP_, p2__12366_SHARP_.call(null));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__12385__1 = function(x) {
          return cljs.core.reduce.call(null, function(p1__12367_SHARP_, p2__12368_SHARP_) {
            return cljs.core.conj.call(null, p1__12367_SHARP_, p2__12368_SHARP_.call(null, x));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__12385__2 = function(x, y) {
          return cljs.core.reduce.call(null, function(p1__12369_SHARP_, p2__12370_SHARP_) {
            return cljs.core.conj.call(null, p1__12369_SHARP_, p2__12370_SHARP_.call(null, x, y));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__12385__3 = function(x, y, z) {
          return cljs.core.reduce.call(null, function(p1__12371_SHARP_, p2__12372_SHARP_) {
            return cljs.core.conj.call(null, p1__12371_SHARP_, p2__12372_SHARP_.call(null, x, y, z));
          }, cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__12385__4 = function() {
          var G__12386__delegate = function(x, y, z, args) {
            return cljs.core.reduce.call(null, function(p1__12373_SHARP_, p2__12374_SHARP_) {
              return cljs.core.conj.call(null, p1__12373_SHARP_, cljs.core.apply.call(null, p2__12374_SHARP_, x, y, z, args));
            }, cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__12386 = function(x, y, z, var_args) {
            var args = null;
            if (arguments.length > 3) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
            }
            return G__12386__delegate.call(this, x, y, z, args);
          };
          G__12386.cljs$lang$maxFixedArity = 3;
          G__12386.cljs$lang$applyTo = function(arglist__12387) {
            var x = cljs.core.first(arglist__12387);
            arglist__12387 = cljs.core.next(arglist__12387);
            var y = cljs.core.first(arglist__12387);
            arglist__12387 = cljs.core.next(arglist__12387);
            var z = cljs.core.first(arglist__12387);
            var args = cljs.core.rest(arglist__12387);
            return G__12386__delegate(x, y, z, args);
          };
          G__12386.cljs$core$IFn$_invoke$arity$variadic = G__12386__delegate;
          return G__12386;
        }();
        G__12385 = function(x, y, z, var_args) {
          var args = var_args;
          switch(arguments.length) {
            case 0:
              return G__12385__0.call(this);
            case 1:
              return G__12385__1.call(this, x);
            case 2:
              return G__12385__2.call(this, x, y);
            case 3:
              return G__12385__3.call(this, x, y, z);
            default:
              return G__12385__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__12385.cljs$lang$maxFixedArity = 3;
        G__12385.cljs$lang$applyTo = G__12385__4.cljs$lang$applyTo;
        return G__12385;
      }();
    };
    var G__12384 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__12384__delegate.call(this, f, g, h, fs);
    };
    G__12384.cljs$lang$maxFixedArity = 3;
    G__12384.cljs$lang$applyTo = function(arglist__12388) {
      var f = cljs.core.first(arglist__12388);
      arglist__12388 = cljs.core.next(arglist__12388);
      var g = cljs.core.first(arglist__12388);
      arglist__12388 = cljs.core.next(arglist__12388);
      var h = cljs.core.first(arglist__12388);
      var fs = cljs.core.rest(arglist__12388);
      return G__12384__delegate(f, g, h, fs);
    };
    G__12384.cljs$core$IFn$_invoke$arity$variadic = G__12384__delegate;
    return G__12384;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__12389 = cljs.core.next.call(null, coll);
        coll = G__12389;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__12390 = n - 1;
        var G__12391 = cljs.core.next.call(null, coll);
        n = G__12390;
        coll = G__12391;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  var matches = re.exec(s);
  if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  } else {
    return null;
  }
};
cljs.core.re_find = function re_find(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (cljs.core.count.call(null, matches) === 1) {
      return cljs.core.first.call(null, matches);
    } else {
      return cljs.core.vec.call(null, matches);
    }
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
    }, null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__12393 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__12393, 0, null);
  var flags = cljs.core.nth.call(null, vec__12393, 1, null);
  var pattern = cljs.core.nth.call(null, vec__12393, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_12395 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_12396__$1 = cljs.core.next.call(null, coll);
      var n_12397 = (new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts);
      while (true) {
        if (coll_12396__$1 && (n_12397 == null || !(n_12397 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_12396__$1), writer, opts);
          var G__12398 = cljs.core.next.call(null, coll_12396__$1);
          var G__12399 = n_12397 - 1;
          coll_12396__$1 = G__12398;
          n_12397 = G__12399;
          continue;
        } else {
        }
        break;
      }
      if (cljs.core.truth_((new cljs.core.Keyword(null, "print-length", "print-length", 3960797560)).cljs$core$IFn$_invoke$arity$1(opts))) {
        cljs.core._write.call(null, writer, sep);
        print_one.call(null, "...", writer, opts);
      } else {
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_12395;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__12404 = cljs.core.seq.call(null, ss);
    var chunk__12405 = null;
    var count__12406 = 0;
    var i__12407 = 0;
    while (true) {
      if (i__12407 < count__12406) {
        var s = cljs.core._nth.call(null, chunk__12405, i__12407);
        cljs.core._write.call(null, writer, s);
        var G__12408 = seq__12404;
        var G__12409 = chunk__12405;
        var G__12410 = count__12406;
        var G__12411 = i__12407 + 1;
        seq__12404 = G__12408;
        chunk__12405 = G__12409;
        count__12406 = G__12410;
        i__12407 = G__12411;
        continue;
      } else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__12404);
        if (temp__4092__auto__) {
          var seq__12404__$1 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__12404__$1)) {
            var c__9036__auto__ = cljs.core.chunk_first.call(null, seq__12404__$1);
            var G__12412 = cljs.core.chunk_rest.call(null, seq__12404__$1);
            var G__12413 = c__9036__auto__;
            var G__12414 = cljs.core.count.call(null, c__9036__auto__);
            var G__12415 = 0;
            seq__12404 = G__12412;
            chunk__12405 = G__12413;
            count__12406 = G__12414;
            i__12407 = G__12415;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__12404__$1);
            cljs.core._write.call(null, writer, s);
            var G__12416 = cljs.core.next.call(null, seq__12404__$1);
            var G__12417 = null;
            var G__12418 = 0;
            var G__12419 = 0;
            seq__12404 = G__12416;
            chunk__12405 = G__12417;
            count__12406 = G__12418;
            i__12407 = G__12419;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__12420) {
    var writer = cljs.core.first(arglist__12420);
    var ss = cljs.core.rest(arglist__12420);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj12422 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj12422;
}();
cljs.core.quote_string = function quote_string(s) {
  return[cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        if (cljs.core.truth_(function() {
          var and__8282__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
          if (cljs.core.truth_(and__8282__auto__)) {
            var and__8282__auto____$1 = function() {
              var G__12428 = obj;
              if (G__12428) {
                var bit__8938__auto__ = G__12428.cljs$lang$protocol_mask$partition0$ & 131072;
                if (bit__8938__auto__ || G__12428.cljs$core$IMeta$) {
                  return true;
                } else {
                  if (!G__12428.cljs$lang$protocol_mask$partition0$) {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__12428);
                  } else {
                    return false;
                  }
                }
              } else {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__12428);
              }
            }();
            if (and__8282__auto____$1) {
              return cljs.core.meta.call(null, obj);
            } else {
              return and__8282__auto____$1;
            }
          } else {
            return and__8282__auto__;
          }
        }())) {
          cljs.core._write.call(null, writer, "^");
          pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
          cljs.core._write.call(null, writer, " ");
        } else {
        }
        if (obj == null) {
          return cljs.core._write.call(null, writer, "nil");
        } else {
          if (obj.cljs$lang$type) {
            return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
          } else {
            if (function() {
              var G__12429 = obj;
              if (G__12429) {
                var bit__8931__auto__ = G__12429.cljs$lang$protocol_mask$partition0$ & 2147483648;
                if (bit__8931__auto__ || G__12429.cljs$core$IPrintWithWriter$) {
                  return true;
                } else {
                  return false;
                }
              } else {
                return false;
              }
            }()) {
              return cljs.core._pr_writer.call(null, obj, writer, opts);
            } else {
              if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
                return cljs.core._write.call(null, writer, [cljs.core.str(obj)].join(""));
              } else {
                if (cljs.core.object_QMARK_.call(null, obj)) {
                  cljs.core._write.call(null, writer, "#js ");
                  return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                  }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
                } else {
                  if (obj instanceof Array) {
                    return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                  } else {
                    if (goog.isString(obj)) {
                      if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 4441712502)).cljs$core$IFn$_invoke$arity$1(opts))) {
                        return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                      } else {
                        return cljs.core._write.call(null, writer, obj);
                      }
                    } else {
                      if (cljs.core.fn_QMARK_.call(null, obj)) {
                        return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                      } else {
                        if (obj instanceof Date) {
                          var normalize = function(n, len) {
                            var ns = [cljs.core.str(n)].join("");
                            while (true) {
                              if (cljs.core.count.call(null, ns) < len) {
                                var G__12431 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                                ns = G__12431;
                                continue;
                              } else {
                                return ns;
                              }
                              break;
                            }
                          };
                          return cljs.core.write_all.call(null, writer, '#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                        } else {
                          if (cljs.core.regexp_QMARK_.call(null, obj)) {
                            return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                          } else {
                            if (function() {
                              var G__12430 = obj;
                              if (G__12430) {
                                var bit__8938__auto__ = G__12430.cljs$lang$protocol_mask$partition0$ & 2147483648;
                                if (bit__8938__auto__ || G__12430.cljs$core$IPrintWithWriter$) {
                                  return true;
                                } else {
                                  if (!G__12430.cljs$lang$protocol_mask$partition0$) {
                                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__12430);
                                  } else {
                                    return false;
                                  }
                                }
                              } else {
                                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__12430);
                              }
                            }()) {
                              return cljs.core._pr_writer.call(null, obj, writer, opts);
                            } else {
                              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                return cljs.core.write_all.call(null, writer, "#\x3c", [cljs.core.str(obj)].join(""), "\x3e");
                              } else {
                                return null;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__12436 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__12437 = null;
  var count__12438 = 0;
  var i__12439 = 0;
  while (true) {
    if (i__12439 < count__12438) {
      var obj = cljs.core._nth.call(null, chunk__12437, i__12439);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__12440 = seq__12436;
      var G__12441 = chunk__12437;
      var G__12442 = count__12438;
      var G__12443 = i__12439 + 1;
      seq__12436 = G__12440;
      chunk__12437 = G__12441;
      count__12438 = G__12442;
      i__12439 = G__12443;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__12436);
      if (temp__4092__auto__) {
        var seq__12436__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12436__$1)) {
          var c__9036__auto__ = cljs.core.chunk_first.call(null, seq__12436__$1);
          var G__12444 = cljs.core.chunk_rest.call(null, seq__12436__$1);
          var G__12445 = c__9036__auto__;
          var G__12446 = cljs.core.count.call(null, c__9036__auto__);
          var G__12447 = 0;
          seq__12436 = G__12444;
          chunk__12437 = G__12445;
          count__12438 = G__12446;
          i__12439 = G__12447;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__12436__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__12448 = cljs.core.next.call(null, seq__12436__$1);
          var G__12449 = null;
          var G__12450 = 0;
          var G__12451 = 0;
          seq__12436 = G__12448;
          chunk__12437 = G__12449;
          count__12438 = G__12450;
          i__12439 = G__12451;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return[cljs.core.str(cljs.core.pr_sb_with_opts.call(null, objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return[cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", 4338025857)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__12452) {
    var objs = cljs.core.seq(arglist__12452);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__12453) {
    var objs = cljs.core.seq(arglist__12453);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__12454) {
    var objs = cljs.core.seq(arglist__12454);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__12455) {
    var objs = cljs.core.seq(arglist__12455);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__12456) {
    var objs = cljs.core.seq(arglist__12456);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__12457) {
    var objs = cljs.core.seq(arglist__12457);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 4441712502), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__12458) {
    var objs = cljs.core.seq(arglist__12458);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__12459) {
    var objs = cljs.core.seq(arglist__12459);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 2153938944;
  this.cljs$lang$protocol_mask$partition1$ = 2;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__12460 = cljs.core.seq.call(null, self__.watches);
  var chunk__12461 = null;
  var count__12462 = 0;
  var i__12463 = 0;
  while (true) {
    if (i__12463 < count__12462) {
      var vec__12464 = cljs.core._nth.call(null, chunk__12461, i__12463);
      var key = cljs.core.nth.call(null, vec__12464, 0, null);
      var f = cljs.core.nth.call(null, vec__12464, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__12466 = seq__12460;
      var G__12467 = chunk__12461;
      var G__12468 = count__12462;
      var G__12469 = i__12463 + 1;
      seq__12460 = G__12466;
      chunk__12461 = G__12467;
      count__12462 = G__12468;
      i__12463 = G__12469;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__12460);
      if (temp__4092__auto__) {
        var seq__12460__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12460__$1)) {
          var c__9036__auto__ = cljs.core.chunk_first.call(null, seq__12460__$1);
          var G__12470 = cljs.core.chunk_rest.call(null, seq__12460__$1);
          var G__12471 = c__9036__auto__;
          var G__12472 = cljs.core.count.call(null, c__9036__auto__);
          var G__12473 = 0;
          seq__12460 = G__12470;
          chunk__12461 = G__12471;
          count__12462 = G__12472;
          i__12463 = G__12473;
          continue;
        } else {
          var vec__12465 = cljs.core.first.call(null, seq__12460__$1);
          var key = cljs.core.nth.call(null, vec__12465, 0, null);
          var f = cljs.core.nth.call(null, vec__12465, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__12474 = cljs.core.next.call(null, seq__12460__$1);
          var G__12475 = null;
          var G__12476 = 0;
          var G__12477 = 0;
          seq__12460 = G__12474;
          chunk__12461 = G__12475;
          count__12462 = G__12476;
          i__12463 = G__12477;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var self__ = this;
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, self__.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__12481__delegate = function(x, p__12478) {
      var map__12480 = p__12478;
      var map__12480__$1 = cljs.core.seq_QMARK_.call(null, map__12480) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12480) : map__12480;
      var validator = cljs.core.get.call(null, map__12480__$1, new cljs.core.Keyword(null, "validator", "validator", 4199087812));
      var meta = cljs.core.get.call(null, map__12480__$1, new cljs.core.Keyword(null, "meta", "meta", 1017252215));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__12481 = function(x, var_args) {
      var p__12478 = null;
      if (arguments.length > 1) {
        p__12478 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__12481__delegate.call(this, x, p__12478);
    };
    G__12481.cljs$lang$maxFixedArity = 1;
    G__12481.cljs$lang$applyTo = function(arglist__12482) {
      var x = cljs.core.first(arglist__12482);
      var p__12478 = cljs.core.rest(arglist__12482);
      return G__12481__delegate(x, p__12478);
    };
    G__12481.cljs$core$IFn$_invoke$arity$variadic = G__12481__delegate;
    return G__12481;
  }();
  atom = function(x, var_args) {
    var p__12478 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  var validate_12483 = a.validator;
  if (validate_12483 == null) {
  } else {
    if (cljs.core.truth_(validate_12483.call(null, new_value))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1233162959, null), new cljs.core.Symbol(null, "new-value", "new-value", 972165309, null))))].join(""));
    }
  }
  var old_value_12484 = a.state;
  a.state = new_value;
  if (a.watches == null) {
  } else {
    cljs.core._notify_watches.call(null, a, old_value_12484, new_value);
  }
  return new_value;
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
  };
  var swap_BANG___3 = function(a, f, x) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
  };
  var swap_BANG___4 = function(a, f, x, y) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
  };
  var swap_BANG___5 = function(a, f, x, y, z) {
    return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y, z));
  };
  var swap_BANG___6 = function() {
    var G__12485__delegate = function(a, f, x, y, z, more) {
      return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, z, more));
    };
    var G__12485 = function(a, f, x, y, z, var_args) {
      var more = null;
      if (arguments.length > 5) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__12485__delegate.call(this, a, f, x, y, z, more);
    };
    G__12485.cljs$lang$maxFixedArity = 5;
    G__12485.cljs$lang$applyTo = function(arglist__12486) {
      var a = cljs.core.first(arglist__12486);
      arglist__12486 = cljs.core.next(arglist__12486);
      var f = cljs.core.first(arglist__12486);
      arglist__12486 = cljs.core.next(arglist__12486);
      var x = cljs.core.first(arglist__12486);
      arglist__12486 = cljs.core.next(arglist__12486);
      var y = cljs.core.first(arglist__12486);
      arglist__12486 = cljs.core.next(arglist__12486);
      var z = cljs.core.first(arglist__12486);
      var more = cljs.core.rest(arglist__12486);
      return G__12485__delegate(a, f, x, y, z, more);
    };
    G__12485.cljs$core$IFn$_invoke$arity$variadic = G__12485__delegate;
    return G__12485;
  }();
  swap_BANG_ = function(a, f, x, y, z, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      case 5:
        return swap_BANG___5.call(this, a, f, x, y, z);
      default:
        return swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, z, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 5;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___6.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$5 = swap_BANG___5;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___6.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__12487) {
    var iref = cljs.core.first(arglist__12487);
    arglist__12487 = cljs.core.next(arglist__12487);
    var f = cljs.core.first(arglist__12487);
    var args = cljs.core.rest(arglist__12487);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, [cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc))].join(""));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(state, f) {
  this.state = state;
  this.f = f;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return(new cljs.core.Keyword(null, "done", "done", 1016993524)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, self__.state));
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return(new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, self__.state, function(p__12488) {
    var map__12489 = p__12488;
    var map__12489__$1 = cljs.core.seq_QMARK_.call(null, map__12489) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12489) : map__12489;
    var curr_state = map__12489__$1;
    var done = cljs.core.get.call(null, map__12489__$1, new cljs.core.Keyword(null, "done", "done", 1016993524));
    if (cljs.core.truth_(done)) {
      return curr_state;
    } else {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "done", "done", 1016993524), true, new cljs.core.Keyword(null, "value", "value", 1125876963), self__.f.call(null)], null);
    }
  }));
};
cljs.core.__GT_Delay = function __GT_Delay(state, f) {
  return new cljs.core.Delay(state, f);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.IEncodeJS = function() {
  var obj12491 = {};
  return obj12491;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__8282__auto__ = x;
    if (and__8282__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__8915__auto__ = x == null ? null : x;
    return function() {
      var or__8294__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__8282__auto__ = x;
    if (and__8282__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__8915__auto__ = x == null ? null : x;
    return function() {
      var or__8294__auto__ = cljs.core._key__GT_js[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__12493 = k;
    if (G__12493) {
      var bit__8938__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__8294__auto__ = bit__8938__auto__;
        if (cljs.core.truth_(or__8294__auto__)) {
          return or__8294__auto__;
        } else {
          return G__12493.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__12493.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__12493);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__12493);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || (typeof k === "number" || (k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol))) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__12507 = x;
      if (G__12507) {
        var bit__8938__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__8294__auto__ = bit__8938__auto__;
          if (cljs.core.truth_(or__8294__auto__)) {
            return or__8294__auto__;
          } else {
            return G__12507.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__12507.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__12507);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__12507);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return[cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj12509 = {};
              return obj12509;
            }();
            var seq__12510_12520 = cljs.core.seq.call(null, x);
            var chunk__12511_12521 = null;
            var count__12512_12522 = 0;
            var i__12513_12523 = 0;
            while (true) {
              if (i__12513_12523 < count__12512_12522) {
                var vec__12514_12524 = cljs.core._nth.call(null, chunk__12511_12521, i__12513_12523);
                var k_12525 = cljs.core.nth.call(null, vec__12514_12524, 0, null);
                var v_12526 = cljs.core.nth.call(null, vec__12514_12524, 1, null);
                m[cljs.core.key__GT_js.call(null, k_12525)] = clj__GT_js.call(null, v_12526);
                var G__12527 = seq__12510_12520;
                var G__12528 = chunk__12511_12521;
                var G__12529 = count__12512_12522;
                var G__12530 = i__12513_12523 + 1;
                seq__12510_12520 = G__12527;
                chunk__12511_12521 = G__12528;
                count__12512_12522 = G__12529;
                i__12513_12523 = G__12530;
                continue;
              } else {
                var temp__4092__auto___12531 = cljs.core.seq.call(null, seq__12510_12520);
                if (temp__4092__auto___12531) {
                  var seq__12510_12532__$1 = temp__4092__auto___12531;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__12510_12532__$1)) {
                    var c__9036__auto___12533 = cljs.core.chunk_first.call(null, seq__12510_12532__$1);
                    var G__12534 = cljs.core.chunk_rest.call(null, seq__12510_12532__$1);
                    var G__12535 = c__9036__auto___12533;
                    var G__12536 = cljs.core.count.call(null, c__9036__auto___12533);
                    var G__12537 = 0;
                    seq__12510_12520 = G__12534;
                    chunk__12511_12521 = G__12535;
                    count__12512_12522 = G__12536;
                    i__12513_12523 = G__12537;
                    continue;
                  } else {
                    var vec__12515_12538 = cljs.core.first.call(null, seq__12510_12532__$1);
                    var k_12539 = cljs.core.nth.call(null, vec__12515_12538, 0, null);
                    var v_12540 = cljs.core.nth.call(null, vec__12515_12538, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_12539)] = clj__GT_js.call(null, v_12540);
                    var G__12541 = cljs.core.next.call(null, seq__12510_12532__$1);
                    var G__12542 = null;
                    var G__12543 = 0;
                    var G__12544 = 0;
                    seq__12510_12520 = G__12541;
                    chunk__12511_12521 = G__12542;
                    count__12512_12522 = G__12543;
                    i__12513_12523 = G__12544;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__12516_12545 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__12517_12546 = null;
              var count__12518_12547 = 0;
              var i__12519_12548 = 0;
              while (true) {
                if (i__12519_12548 < count__12518_12547) {
                  var x_12549__$1 = cljs.core._nth.call(null, chunk__12517_12546, i__12519_12548);
                  arr.push(x_12549__$1);
                  var G__12550 = seq__12516_12545;
                  var G__12551 = chunk__12517_12546;
                  var G__12552 = count__12518_12547;
                  var G__12553 = i__12519_12548 + 1;
                  seq__12516_12545 = G__12550;
                  chunk__12517_12546 = G__12551;
                  count__12518_12547 = G__12552;
                  i__12519_12548 = G__12553;
                  continue;
                } else {
                  var temp__4092__auto___12554 = cljs.core.seq.call(null, seq__12516_12545);
                  if (temp__4092__auto___12554) {
                    var seq__12516_12555__$1 = temp__4092__auto___12554;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__12516_12555__$1)) {
                      var c__9036__auto___12556 = cljs.core.chunk_first.call(null, seq__12516_12555__$1);
                      var G__12557 = cljs.core.chunk_rest.call(null, seq__12516_12555__$1);
                      var G__12558 = c__9036__auto___12556;
                      var G__12559 = cljs.core.count.call(null, c__9036__auto___12556);
                      var G__12560 = 0;
                      seq__12516_12545 = G__12557;
                      chunk__12517_12546 = G__12558;
                      count__12518_12547 = G__12559;
                      i__12519_12548 = G__12560;
                      continue;
                    } else {
                      var x_12561__$1 = cljs.core.first.call(null, seq__12516_12555__$1);
                      arr.push(x_12561__$1);
                      var G__12562 = cljs.core.next.call(null, seq__12516_12555__$1);
                      var G__12563 = null;
                      var G__12564 = 0;
                      var G__12565 = 0;
                      seq__12516_12545 = G__12562;
                      chunk__12517_12546 = G__12563;
                      count__12518_12547 = G__12564;
                      i__12519_12548 = G__12565;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                return x;
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj12567 = {};
  return obj12567;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__8282__auto__ = x;
    if (and__8282__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__8915__auto__ = x == null ? null : x;
    return function() {
      var or__8294__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__12588__delegate = function(x, opts) {
      if (function() {
        var G__12578 = x;
        if (G__12578) {
          var bit__8938__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__8294__auto__ = bit__8938__auto__;
            if (cljs.core.truth_(or__8294__auto__)) {
              return or__8294__auto__;
            } else {
              return G__12578.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__12578.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__12578);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__12578);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__12579 = opts;
          var map__12579__$1 = cljs.core.seq_QMARK_.call(null, map__12579) ? cljs.core.apply.call(null, cljs.core.hash_map, map__12579) : map__12579;
          var keywordize_keys = cljs.core.get.call(null, map__12579__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 4191781672));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__12579, map__12579__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__9005__auto__ = function(map__12579, map__12579__$1, keywordize_keys, keyfn) {
                          return function iter__12584(s__12585) {
                            return new cljs.core.LazySeq(null, function(map__12579, map__12579__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__12585__$1 = s__12585;
                                while (true) {
                                  var temp__4092__auto__ = cljs.core.seq.call(null, s__12585__$1);
                                  if (temp__4092__auto__) {
                                    var s__12585__$2 = temp__4092__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__12585__$2)) {
                                      var c__9003__auto__ = cljs.core.chunk_first.call(null, s__12585__$2);
                                      var size__9004__auto__ = cljs.core.count.call(null, c__9003__auto__);
                                      var b__12587 = cljs.core.chunk_buffer.call(null, size__9004__auto__);
                                      if (function() {
                                        var i__12586 = 0;
                                        while (true) {
                                          if (i__12586 < size__9004__auto__) {
                                            var k = cljs.core._nth.call(null, c__9003__auto__, i__12586);
                                            cljs.core.chunk_append.call(null, b__12587, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__12589 = i__12586 + 1;
                                            i__12586 = G__12589;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__12587), iter__12584.call(null, cljs.core.chunk_rest.call(null, s__12585__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__12587), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__12585__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__12584.call(null, cljs.core.rest.call(null, s__12585__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__12579, map__12579__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__12579, map__12579__$1, keywordize_keys, keyfn);
                        return iter__9005__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        return x__$1;
                      } else {
                        return null;
                      }
                    }
                  }
                }
              }
            };
          }(map__12579, map__12579__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__12588 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__12588__delegate.call(this, x, opts);
    };
    G__12588.cljs$lang$maxFixedArity = 1;
    G__12588.cljs$lang$applyTo = function(arglist__12590) {
      var x = cljs.core.first(arglist__12590);
      var opts = cljs.core.rest(arglist__12590);
      return G__12588__delegate(x, opts);
    };
    G__12588.cljs$core$IFn$_invoke$arity$variadic = G__12588__delegate;
    return G__12588;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function() {
    var G__12591__delegate = function(args) {
      var temp__4090__auto__ = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var v = temp__4090__auto__;
        return v;
      } else {
        var ret = cljs.core.apply.call(null, f, args);
        cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
        return ret;
      }
    };
    var G__12591 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__12591__delegate.call(this, args);
    };
    G__12591.cljs$lang$maxFixedArity = 0;
    G__12591.cljs$lang$applyTo = function(arglist__12592) {
      var args = cljs.core.seq(arglist__12592);
      return G__12591__delegate(args);
    };
    G__12591.cljs$core$IFn$_invoke$arity$variadic = G__12591__delegate;
    return G__12591;
  }();
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__12593 = ret;
        f = G__12593;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__12594__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__12594 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__12594__delegate.call(this, f, args);
    };
    G__12594.cljs$lang$maxFixedArity = 1;
    G__12594.cljs$lang$applyTo = function(arglist__12595) {
      var f = cljs.core.first(arglist__12595);
      var args = cljs.core.rest(arglist__12595);
      return G__12594__delegate(f, args);
    };
    G__12594.cljs$core$IFn$_invoke$arity$variadic = G__12594__delegate;
    return G__12594;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.PersistentArrayMap.EMPTY, coll);
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 768214664), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__12596) {
    var f = cljs.core.first(arglist__12596);
    var args = cljs.core.rest(arglist__12596);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__8294__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__8294__auto__) {
      return or__8294__auto__;
    } else {
      var or__8294__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__8294__auto____$1) {
        return or__8294__auto____$1;
      } else {
        var and__8282__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__8282__auto__) {
          var and__8282__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__8282__auto____$1) {
            var and__8282__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__8282__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__12597 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__12598 = i + 1;
                  ret = G__12597;
                  i = G__12598;
                  continue;
                }
                break;
              }
            } else {
              return and__8282__auto____$2;
            }
          } else {
            return and__8282__auto____$1;
          }
        } else {
          return and__8282__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", -388313324, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", -1637144189, null), new cljs.core.Symbol(null, "tag", "tag", -1640416941, null), new cljs.core.Symbol(null, "parent", "parent", 1659011683, null))))].join(""));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__8294__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", 4515496059), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", 889955442)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 768214664), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 768214664)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__8294__auto__)) {
      return or__8294__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", 4515496059)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__12599_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__12599_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__12599_SHARP_), cljs.core.second.call(null, p1__12599_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(p1__12600_SHARP_, p2__12601_SHARP_) {
        return cljs.core.apply.call(null, cljs.core.derive, p1__12600_SHARP_, p2__12601_SHARP_);
      }, cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__8294__auto__ = cljs.core.truth_(function() {
    var and__8282__auto__ = xprefs;
    if (cljs.core.truth_(and__8282__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__8282__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__8294__auto__)) {
    return or__8294__auto__;
  } else {
    var or__8294__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__12602 = cljs.core.rest.call(null, ps);
          ps = G__12602;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__8294__auto____$1)) {
      return or__8294__auto____$1;
    } else {
      var or__8294__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__12603 = cljs.core.rest.call(null, ps);
            ps = G__12603;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__8294__auto____$2)) {
        return or__8294__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__8294__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__8294__auto__)) {
    return or__8294__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__12606) {
    var vec__12607 = p__12606;
    var k = cljs.core.nth.call(null, vec__12607, 0, null);
    var _ = cljs.core.nth.call(null, vec__12607, 1, null);
    var e = vec__12607;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__8294__auto__ = be == null;
        if (or__8294__auto__) {
          return or__8294__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first.call(null, be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj12609 = {};
  return obj12609;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__8282__auto__ = mf;
    if (and__8282__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__8915__auto__ = mf == null ? null : mf;
    return function() {
      var or__8294__auto__ = cljs.core._reset[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._reset["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__8282__auto__ = mf;
    if (and__8282__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__8915__auto__ = mf == null ? null : mf;
    return function() {
      var or__8294__auto__ = cljs.core._add_method[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._add_method["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__8282__auto__ = mf;
    if (and__8282__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__8915__auto__ = mf == null ? null : mf;
    return function() {
      var or__8294__auto__ = cljs.core._remove_method[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._remove_method["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__8282__auto__ = mf;
    if (and__8282__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__8915__auto__ = mf == null ? null : mf;
    return function() {
      var or__8294__auto__ = cljs.core._prefer_method[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._prefer_method["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__8282__auto__ = mf;
    if (and__8282__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__8915__auto__ = mf == null ? null : mf;
    return function() {
      var or__8294__auto__ = cljs.core._get_method[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._get_method["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__8282__auto__ = mf;
    if (and__8282__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__8915__auto__ = mf == null ? null : mf;
    return function() {
      var or__8294__auto__ = cljs.core._methods[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._methods["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__8282__auto__ = mf;
    if (and__8282__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__8915__auto__ = mf == null ? null : mf;
    return function() {
      var or__8294__auto__ = cljs.core._prefers[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._prefers["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._dispatch = function _dispatch(mf, args) {
  if (function() {
    var and__8282__auto__ = mf;
    if (and__8282__auto__) {
      return mf.cljs$core$IMultiFn$_dispatch$arity$2;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_dispatch$arity$2(mf, args);
  } else {
    var x__8915__auto__ = mf == null ? null : mf;
    return function() {
      var or__8294__auto__ = cljs.core._dispatch[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.core._dispatch["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-dispatch", mf);
        }
      }
    }().call(null, mf, args);
  }
};
cljs.core.do_dispatch = function do_dispatch(mf, name, dispatch_fn, args) {
  var dispatch_val = cljs.core.apply.call(null, dispatch_fn, args);
  var target_fn = cljs.core._get_method.call(null, mf, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
  }
  return cljs.core.apply.call(null, target_fn, args);
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194304;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$2) {
    return cljs.core.PersistentArrayMap.EMPTY;
  });
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$2) {
    return null;
  });
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4090__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var target_fn = temp__4090__auto__;
    return target_fn;
  } else {
    var temp__4090__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4090__auto____$1)) {
      var target_fn = temp__4090__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(old) {
    return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
  });
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch$arity$2 = function(mf, args) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.do_dispatch.call(null, mf__$1, self__.name, self__.dispatch_fn, args);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__12610__delegate = function(_, args) {
    var self = this;
    return cljs.core._dispatch.call(null, self, args);
  };
  var G__12610 = function(_, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__12610__delegate.call(this, _, args);
  };
  G__12610.cljs$lang$maxFixedArity = 1;
  G__12610.cljs$lang$applyTo = function(arglist__12611) {
    var _ = cljs.core.first(arglist__12611);
    var args = cljs.core.rest(arglist__12611);
    return G__12610__delegate(_, args);
  };
  G__12610.cljs$core$IFn$_invoke$arity$variadic = G__12610__delegate;
  return G__12610;
}();
cljs.core.MultiFn.prototype.apply = function(_, args) {
  var self = this;
  return cljs.core._dispatch.call(null, self, args);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.cljs$core$ICloneable$ = true;
cljs.core.UUID.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.UUID(self__.uuid);
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__8859__auto__, writer__8860__auto__, opts__8861__auto__) {
  return cljs.core._write.call(null, writer__8860__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return 0;
        } else {
          return null;
        }
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "deftype*", "deftype*", -978581244, null), null, new cljs.core.Symbol(null, "new", "new", -1640422567, null), null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null), null, new cljs.core.Symbol(null, "\x26", "\x26", -1640531489, null), null, new cljs.core.Symbol(null, "set!", "set!", -1637004872, null), null, new cljs.core.Symbol(null, 
  "recur", "recur", -1532142362, null), null, new cljs.core.Symbol(null, ".", ".", -1640531481, null), null, new cljs.core.Symbol(null, "ns", "ns", -1640528002, null), null, new cljs.core.Symbol(null, "do", "do", -1640528316, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -1640430053, null), null, new cljs.core.Symbol(null, "throw", "throw", -1530191713, null), null, new cljs.core.Symbol(null, "letfn*", "letfn*", 1548249632, null), null, new cljs.core.Symbol(null, "js*", "js*", -1640426054, 
  null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", 774272013, null), null, new cljs.core.Symbol(null, "let*", "let*", -1637213400, null), null, new cljs.core.Symbol(null, "loop*", "loop*", -1537374273, null), null, new cljs.core.Symbol(null, "try", "try", -1640416396, null), null, new cljs.core.Symbol(null, "if", "if", -1640528170, null), null, new cljs.core.Symbol(null, "def", "def", -1640432194, null), null], null), null), x);
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj11492 = {};
  return obj11492;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__8282__auto__ = reader;
    if (and__8282__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__8915__auto__ = reader == null ? null : reader;
    return function() {
      var or__8294__auto__ = cljs.reader.read_char[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.reader.read_char["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__8282__auto__ = reader;
    if (and__8282__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__8915__auto__ = reader == null ? null : reader;
    return function() {
      var or__8294__auto__ = cljs.reader.unread[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.reader.unread["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__8294__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__8294__auto__)) {
    return or__8294__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__11493) {
    var rdr = cljs.core.first(arglist__11493);
    var msg = cljs.core.rest(arglist__11493);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__8282__auto__ = !(ch === "#");
  if (and__8282__auto__) {
    var and__8282__auto____$1 = !(ch === "'");
    if (and__8282__auto____$1) {
      var and__8282__auto____$2 = !(ch === ":");
      if (and__8282__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__8282__auto____$2;
      }
    } else {
      return and__8282__auto____$1;
    }
  } else {
    return and__8282__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || (cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch))) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__11494 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__11495 = cljs.reader.read_char.call(null, rdr);
      sb = G__11494;
      ch = G__11495;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || (ch === "\r" || ch == null)) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+)/([0-9]+)");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "[:]?([^0-9/].*/)?([^0-9/][^/]*)");
cljs.reader.re_find_STAR_ = function re_find_STAR_(re, s) {
  var matches = re.exec(s);
  if (matches == null) {
    return null;
  } else {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.int_pattern, s);
  var group3 = groups[2];
  if (!(group3 == null || group3.length < 1)) {
    return 0;
  } else {
    var negate = "-" === groups[1] ? -1 : 1;
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[7]) ? [groups[7], parseInt(groups[7])] : new cljs.core.Keyword(null, "default", "default", 2558708147) ? [null, null] : null;
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      return negate * parseInt(n, radix);
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_find_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator) / parseInt(denominator);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return null;
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{2}");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "[0-9A-Fa-f]{4}");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__11496 = cljs.reader.read_char.call(null, rdr);
      ch = G__11496;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4090__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4090__auto__)) {
        var macrofn = temp__4090__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__11497 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__11497;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__11498 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__11498;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4090__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var obj = temp__4090__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__8294__auto__ = ch == null;
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__8294__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__8294__auto__)) {
        return or__8294__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__11499 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__11500 = cljs.reader.read_char.call(null, reader);
      buffer = G__11499;
      ch = G__11500;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__11501 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__11502 = cljs.reader.read_char.call(null, reader);
        buffer = G__11501;
        ch = G__11502;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          if (new cljs.core.Keyword(null, "default", "default", 2558708147)) {
            var G__11503 = function() {
              buffer.append(ch);
              return buffer;
            }();
            var G__11504 = cljs.reader.read_char.call(null, reader);
            buffer = G__11503;
            ch = G__11504;
            continue;
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return not_found;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || (name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1))) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return f;
        } else {
          return null;
        }
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__11506 = o;
    if (G__11506) {
      var bit__8938__auto__ = G__11506.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__8938__auto__ || G__11506.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__11506.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__11506);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__11506);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", -1532577739, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", -1545057749, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                                    return null;
                                  } else {
                                    return null;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
              return null;
            } else {
              return null;
            }
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__11507 = reader;
        var G__11508 = eof_is_error;
        var G__11509 = sentinel;
        var G__11510 = is_recursive;
        reader = G__11507;
        eof_is_error = G__11508;
        sentinel = G__11509;
        is_recursive = G__11510;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__11511 = cljs.reader.read_comment.call(null, reader, ch);
          var G__11512 = eof_is_error;
          var G__11513 = sentinel;
          var G__11514 = is_recursive;
          reader = G__11511;
          eof_is_error = G__11512;
          sentinel = G__11513;
          is_recursive = G__11514;
          continue;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            var f = cljs.reader.macros.call(null, ch);
            var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : new cljs.core.Keyword(null, "else", "else", 1017020587) ? cljs.reader.read_symbol.call(null, reader, ch) : null;
            if (res === reader) {
              var G__11515 = reader;
              var G__11516 = eof_is_error;
              var G__11517 = sentinel;
              var G__11518 = is_recursive;
              reader = G__11515;
              eof_is_error = G__11516;
              sentinel = G__11517;
              is_recursive = G__11518;
              continue;
            } else {
              return res;
            }
          } else {
            return null;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, true, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        var b = new goog.string.StringBuffer(s);
        while (true) {
          if (b.getLength() < width) {
            var G__11519 = b.append("0");
            b = G__11519;
            continue;
          } else {
            return b.toString();
          }
          break;
        }
      } else {
        return null;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(month, leap_year_QMARK_) {
    return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
  };
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, [cljs.core.str(msg), cljs.core.str(" Failed:  "), cljs.core.str(low), cljs.core.str("\x3c\x3d"), cljs.core.str(n), cljs.core.str("\x3c\x3d"), cljs.core.str(high)].join(""));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__11521 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__11521, 0, null);
  var years = cljs.core.nth.call(null, vec__11521, 1, null);
  var months = cljs.core.nth.call(null, vec__11521, 2, null);
  var days = cljs.core.nth.call(null, vec__11521, 3, null);
  var hours = cljs.core.nth.call(null, vec__11521, 4, null);
  var minutes = cljs.core.nth.call(null, vec__11521, 5, null);
  var seconds = cljs.core.nth.call(null, vec__11521, 6, null);
  var fraction = cljs.core.nth.call(null, vec__11521, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__11521, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__11521, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__11521, 10, null);
  var v = vec__11521;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(s)].join(""));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__8294__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__8294__auto__)) {
        return or__8294__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__8294__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__8294__auto__)) {
        return or__8294__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__8294__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__8294__auto__)) {
        return or__8294__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__8294__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__8294__auto__)) {
        return or__8294__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__8294__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__8294__auto__)) {
        return or__8294__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__8294__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__8294__auto__)) {
        return or__8294__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__8294__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__8294__auto__)) {
        return or__8294__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__8294__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__8294__auto__)) {
        return or__8294__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4090__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var vec__11523 = temp__4090__auto__;
    var years = cljs.core.nth.call(null, vec__11523, 0, null);
    var months = cljs.core.nth.call(null, vec__11523, 1, null);
    var days = cljs.core.nth.call(null, vec__11523, 2, null);
    var hours = cljs.core.nth.call(null, vec__11523, 3, null);
    var minutes = cljs.core.nth.call(null, vec__11523, 4, null);
    var seconds = cljs.core.nth.call(null, vec__11523, 5, null);
    var ms = cljs.core.nth.call(null, vec__11523, 6, null);
    var offset = cljs.core.nth.call(null, vec__11523, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, [cljs.core.str("Unrecognized date/time syntax: "), cljs.core.str(ts)].join(""));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__11536_11548 = cljs.core.seq.call(null, form);
    var chunk__11537_11549 = null;
    var count__11538_11550 = 0;
    var i__11539_11551 = 0;
    while (true) {
      if (i__11539_11551 < count__11538_11550) {
        var x_11552 = cljs.core._nth.call(null, chunk__11537_11549, i__11539_11551);
        arr.push(x_11552);
        var G__11553 = seq__11536_11548;
        var G__11554 = chunk__11537_11549;
        var G__11555 = count__11538_11550;
        var G__11556 = i__11539_11551 + 1;
        seq__11536_11548 = G__11553;
        chunk__11537_11549 = G__11554;
        count__11538_11550 = G__11555;
        i__11539_11551 = G__11556;
        continue;
      } else {
        var temp__4092__auto___11557 = cljs.core.seq.call(null, seq__11536_11548);
        if (temp__4092__auto___11557) {
          var seq__11536_11558__$1 = temp__4092__auto___11557;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__11536_11558__$1)) {
            var c__9036__auto___11559 = cljs.core.chunk_first.call(null, seq__11536_11558__$1);
            var G__11560 = cljs.core.chunk_rest.call(null, seq__11536_11558__$1);
            var G__11561 = c__9036__auto___11559;
            var G__11562 = cljs.core.count.call(null, c__9036__auto___11559);
            var G__11563 = 0;
            seq__11536_11548 = G__11560;
            chunk__11537_11549 = G__11561;
            count__11538_11550 = G__11562;
            i__11539_11551 = G__11563;
            continue;
          } else {
            var x_11564 = cljs.core.first.call(null, seq__11536_11558__$1);
            arr.push(x_11564);
            var G__11565 = cljs.core.next.call(null, seq__11536_11558__$1);
            var G__11566 = null;
            var G__11567 = 0;
            var G__11568 = 0;
            seq__11536_11548 = G__11565;
            chunk__11537_11549 = G__11566;
            count__11538_11550 = G__11567;
            i__11539_11551 = G__11568;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj11541 = {};
        return obj11541;
      }();
      var seq__11542_11569 = cljs.core.seq.call(null, form);
      var chunk__11543_11570 = null;
      var count__11544_11571 = 0;
      var i__11545_11572 = 0;
      while (true) {
        if (i__11545_11572 < count__11544_11571) {
          var vec__11546_11573 = cljs.core._nth.call(null, chunk__11543_11570, i__11545_11572);
          var k_11574 = cljs.core.nth.call(null, vec__11546_11573, 0, null);
          var v_11575 = cljs.core.nth.call(null, vec__11546_11573, 1, null);
          obj[cljs.core.name.call(null, k_11574)] = v_11575;
          var G__11576 = seq__11542_11569;
          var G__11577 = chunk__11543_11570;
          var G__11578 = count__11544_11571;
          var G__11579 = i__11545_11572 + 1;
          seq__11542_11569 = G__11576;
          chunk__11543_11570 = G__11577;
          count__11544_11571 = G__11578;
          i__11545_11572 = G__11579;
          continue;
        } else {
          var temp__4092__auto___11580 = cljs.core.seq.call(null, seq__11542_11569);
          if (temp__4092__auto___11580) {
            var seq__11542_11581__$1 = temp__4092__auto___11580;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__11542_11581__$1)) {
              var c__9036__auto___11582 = cljs.core.chunk_first.call(null, seq__11542_11581__$1);
              var G__11583 = cljs.core.chunk_rest.call(null, seq__11542_11581__$1);
              var G__11584 = c__9036__auto___11582;
              var G__11585 = cljs.core.count.call(null, c__9036__auto___11582);
              var G__11586 = 0;
              seq__11542_11569 = G__11583;
              chunk__11543_11570 = G__11584;
              count__11544_11571 = G__11585;
              i__11545_11572 = G__11586;
              continue;
            } else {
              var vec__11547_11587 = cljs.core.first.call(null, seq__11542_11581__$1);
              var k_11588 = cljs.core.nth.call(null, vec__11547_11587, 0, null);
              var v_11589 = cljs.core.nth.call(null, vec__11547_11587, 1, null);
              obj[cljs.core.name.call(null, k_11588)] = v_11589;
              var G__11590 = cljs.core.next.call(null, seq__11542_11581__$1);
              var G__11591 = null;
              var G__11592 = 0;
              var G__11593 = 0;
              seq__11542_11569 = G__11590;
              chunk__11543_11570 = G__11591;
              count__11544_11571 = G__11592;
              i__11545_11572 = G__11593;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, null, [cljs.core.str("JS literal expects a vector or map containing "), cljs.core.str("only string or unqualified keyword keys")].join(""));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), [cljs.core.str(tag)].join(""));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", [cljs.core.str(tag)].join(""), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
      } else {
        return null;
      }
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = [cljs.core.str(tag)].join("");
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return f;
  });
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(_) {
    return null;
  });
  return old_parser;
};
goog.provide("tailrecursion.priority_map");
goog.require("cljs.core");
goog.require("cljs.reader");
goog.require("cljs.reader");
goog.require("cljs.core");
goog.require("cljs.core");
tailrecursion.priority_map.PersistentPriorityMap = function(priority__GT_set_of_items, item__GT_priority, meta, __hash) {
  this.priority__GT_set_of_items = priority__GT_set_of_items;
  this.item__GT_priority = item__GT_priority;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2565220111;
};
tailrecursion.priority_map.PersistentPriorityMap.cljs$lang$type = true;
tailrecursion.priority_map.PersistentPriorityMap.cljs$lang$ctorStr = "tailrecursion.priority-map/PersistentPriorityMap";
tailrecursion.priority_map.PersistentPriorityMap.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "tailrecursion.priority-map/PersistentPriorityMap");
};
tailrecursion.priority_map.PersistentPriorityMap.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__8705__auto__ = self__.__hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_imap.call(null, this$__$1);
    self__.__hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
tailrecursion.priority_map.PersistentPriorityMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, item) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.get.call(null, self__.item__GT_priority, item);
};
tailrecursion.priority_map.PersistentPriorityMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, item, not_found) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.get.call(null, self__.item__GT_priority, item, not_found);
};
tailrecursion.priority_map.PersistentPriorityMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this$, item, priority) {
  var self__ = this;
  var this$__$1 = this;
  var temp__4090__auto__ = cljs.core.get.call(null, self__.item__GT_priority, item, null);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var current_priority = temp__4090__auto__;
    if (cljs.core._EQ_.call(null, current_priority, priority)) {
      return this$__$1;
    } else {
      var item_set = cljs.core.get.call(null, self__.priority__GT_set_of_items, current_priority);
      if (cljs.core._EQ_.call(null, cljs.core.count.call(null, item_set), 1)) {
        return new tailrecursion.priority_map.PersistentPriorityMap(cljs.core.assoc.call(null, cljs.core.dissoc.call(null, self__.priority__GT_set_of_items, current_priority), priority, cljs.core.conj.call(null, cljs.core.get.call(null, self__.priority__GT_set_of_items, priority, cljs.core.PersistentHashSet.EMPTY), item)), cljs.core.assoc.call(null, self__.item__GT_priority, item, priority), self__.meta, null);
      } else {
        return new tailrecursion.priority_map.PersistentPriorityMap(cljs.core.assoc.call(null, self__.priority__GT_set_of_items, current_priority, cljs.core.disj.call(null, cljs.core.get.call(null, self__.priority__GT_set_of_items, current_priority), item), priority, cljs.core.conj.call(null, cljs.core.get.call(null, self__.priority__GT_set_of_items, priority, cljs.core.PersistentHashSet.EMPTY), item)), cljs.core.assoc.call(null, self__.item__GT_priority, item, priority), self__.meta, null);
      }
    }
  } else {
    return new tailrecursion.priority_map.PersistentPriorityMap(cljs.core.assoc.call(null, self__.priority__GT_set_of_items, priority, cljs.core.conj.call(null, cljs.core.get.call(null, self__.priority__GT_set_of_items, priority, cljs.core.PersistentHashSet.EMPTY), item)), cljs.core.assoc.call(null, self__.item__GT_priority, item, priority), self__.meta, null);
  }
};
tailrecursion.priority_map.PersistentPriorityMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(this$, item) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.contains_QMARK_.call(null, self__.item__GT_priority, item);
};
tailrecursion.priority_map.PersistentPriorityMap.prototype.call = function() {
  var G__11478 = null;
  var G__11478__2 = function(self__, item) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return this$.cljs$core$ILookup$_lookup$arity$2(null, item);
  };
  var G__11478__3 = function(self__, item, not_found) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return this$.cljs$core$ILookup$_lookup$arity$3(null, item, not_found);
  };
  G__11478 = function(self__, item, not_found) {
    switch(arguments.length) {
      case 2:
        return G__11478__2.call(this, self__, item);
      case 3:
        return G__11478__3.call(this, self__, item, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__11478;
}();
tailrecursion.priority_map.PersistentPriorityMap.prototype.apply = function(self__, args11453) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args11453)));
};
tailrecursion.priority_map.PersistentPriorityMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(item) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$ILookup$_lookup$arity$2(null, item);
};
tailrecursion.priority_map.PersistentPriorityMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(item, not_found) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$ILookup$_lookup$arity$3(null, item, not_found);
};
tailrecursion.priority_map.PersistentPriorityMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var self__ = this;
  var coll__$1 = this;
  var pr_pair = function(keyval) {
    return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "", " ", "", opts, keyval);
  };
  return cljs.core.pr_sequential_writer.call(null, writer, pr_pair, "#tailrecursion.priority-map {", ", ", "}", opts, coll__$1);
};
tailrecursion.priority_map.PersistentPriorityMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, entry) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, this$__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this$__$1, entry);
  }
};
tailrecursion.priority_map.PersistentPriorityMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq.call(null, function() {
    var iter__9005__auto__ = function iter__11454(s__11455) {
      return new cljs.core.LazySeq(null, function() {
        var s__11455__$1 = s__11455;
        while (true) {
          var temp__4092__auto__ = cljs.core.seq.call(null, s__11455__$1);
          if (temp__4092__auto__) {
            var xs__4579__auto__ = temp__4092__auto__;
            var vec__11461 = cljs.core.first.call(null, xs__4579__auto__);
            var priority = cljs.core.nth.call(null, vec__11461, 0, null);
            var item_set = cljs.core.nth.call(null, vec__11461, 1, null);
            var iterys__9001__auto__ = function(s__11455__$1, vec__11461, priority, item_set, xs__4579__auto__, temp__4092__auto__) {
              return function iter__11456(s__11457) {
                return new cljs.core.LazySeq(null, function(s__11455__$1, vec__11461, priority, item_set, xs__4579__auto__, temp__4092__auto__) {
                  return function() {
                    var s__11457__$1 = s__11457;
                    while (true) {
                      var temp__4092__auto____$1 = cljs.core.seq.call(null, s__11457__$1);
                      if (temp__4092__auto____$1) {
                        var s__11457__$2 = temp__4092__auto____$1;
                        if (cljs.core.chunked_seq_QMARK_.call(null, s__11457__$2)) {
                          var c__9003__auto__ = cljs.core.chunk_first.call(null, s__11457__$2);
                          var size__9004__auto__ = cljs.core.count.call(null, c__9003__auto__);
                          var b__11459 = cljs.core.chunk_buffer.call(null, size__9004__auto__);
                          if (function() {
                            var i__11458 = 0;
                            while (true) {
                              if (i__11458 < size__9004__auto__) {
                                var item = cljs.core._nth.call(null, c__9003__auto__, i__11458);
                                cljs.core.chunk_append.call(null, b__11459, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [item, priority], null));
                                var G__11479 = i__11458 + 1;
                                i__11458 = G__11479;
                                continue;
                              } else {
                                return true;
                              }
                              break;
                            }
                          }()) {
                            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11459), iter__11456.call(null, cljs.core.chunk_rest.call(null, s__11457__$2)));
                          } else {
                            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11459), null);
                          }
                        } else {
                          var item = cljs.core.first.call(null, s__11457__$2);
                          return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [item, priority], null), iter__11456.call(null, cljs.core.rest.call(null, s__11457__$2)));
                        }
                      } else {
                        return null;
                      }
                      break;
                    }
                  };
                }(s__11455__$1, vec__11461, priority, item_set, xs__4579__auto__, temp__4092__auto__), null, null);
              };
            }(s__11455__$1, vec__11461, priority, item_set, xs__4579__auto__, temp__4092__auto__);
            var fs__9002__auto__ = cljs.core.seq.call(null, iterys__9001__auto__.call(null, item_set));
            if (fs__9002__auto__) {
              return cljs.core.concat.call(null, fs__9002__auto__, iter__11454.call(null, cljs.core.rest.call(null, s__11455__$1)));
            } else {
              var G__11480 = cljs.core.rest.call(null, s__11455__$1);
              s__11455__$1 = G__11480;
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__9005__auto__.call(null, cljs.core.rseq.call(null, self__.priority__GT_set_of_items));
  }());
};
tailrecursion.priority_map.PersistentPriorityMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(this$, ascending_QMARK_) {
  var self__ = this;
  var this$__$1 = this;
  return(cljs.core.truth_(ascending_QMARK_) ? cljs.core.seq : cljs.core.rseq).call(null, this$__$1);
};
tailrecursion.priority_map.PersistentPriorityMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(this$, k, ascending_QMARK_) {
  var self__ = this;
  var this$__$1 = this;
  var sets = cljs.core.truth_(ascending_QMARK_) ? cljs.core.subseq.call(null, self__.priority__GT_set_of_items, cljs.core._GT__EQ_, k) : cljs.core.rsubseq.call(null, self__.priority__GT_set_of_items, cljs.core._LT__EQ_, k);
  return cljs.core.seq.call(null, function() {
    var iter__9005__auto__ = function iter__11462(s__11463) {
      return new cljs.core.LazySeq(null, function() {
        var s__11463__$1 = s__11463;
        while (true) {
          var temp__4092__auto__ = cljs.core.seq.call(null, s__11463__$1);
          if (temp__4092__auto__) {
            var xs__4579__auto__ = temp__4092__auto__;
            var vec__11469 = cljs.core.first.call(null, xs__4579__auto__);
            var priority = cljs.core.nth.call(null, vec__11469, 0, null);
            var item_set = cljs.core.nth.call(null, vec__11469, 1, null);
            var iterys__9001__auto__ = function(s__11463__$1, vec__11469, priority, item_set, xs__4579__auto__, temp__4092__auto__) {
              return function iter__11464(s__11465) {
                return new cljs.core.LazySeq(null, function(s__11463__$1, vec__11469, priority, item_set, xs__4579__auto__, temp__4092__auto__) {
                  return function() {
                    var s__11465__$1 = s__11465;
                    while (true) {
                      var temp__4092__auto____$1 = cljs.core.seq.call(null, s__11465__$1);
                      if (temp__4092__auto____$1) {
                        var s__11465__$2 = temp__4092__auto____$1;
                        if (cljs.core.chunked_seq_QMARK_.call(null, s__11465__$2)) {
                          var c__9003__auto__ = cljs.core.chunk_first.call(null, s__11465__$2);
                          var size__9004__auto__ = cljs.core.count.call(null, c__9003__auto__);
                          var b__11467 = cljs.core.chunk_buffer.call(null, size__9004__auto__);
                          if (function() {
                            var i__11466 = 0;
                            while (true) {
                              if (i__11466 < size__9004__auto__) {
                                var item = cljs.core._nth.call(null, c__9003__auto__, i__11466);
                                cljs.core.chunk_append.call(null, b__11467, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [item, priority], null));
                                var G__11481 = i__11466 + 1;
                                i__11466 = G__11481;
                                continue;
                              } else {
                                return true;
                              }
                              break;
                            }
                          }()) {
                            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11467), iter__11464.call(null, cljs.core.chunk_rest.call(null, s__11465__$2)));
                          } else {
                            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11467), null);
                          }
                        } else {
                          var item = cljs.core.first.call(null, s__11465__$2);
                          return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [item, priority], null), iter__11464.call(null, cljs.core.rest.call(null, s__11465__$2)));
                        }
                      } else {
                        return null;
                      }
                      break;
                    }
                  };
                }(s__11463__$1, vec__11469, priority, item_set, xs__4579__auto__, temp__4092__auto__), null, null);
              };
            }(s__11463__$1, vec__11469, priority, item_set, xs__4579__auto__, temp__4092__auto__);
            var fs__9002__auto__ = cljs.core.seq.call(null, iterys__9001__auto__.call(null, item_set));
            if (fs__9002__auto__) {
              return cljs.core.concat.call(null, fs__9002__auto__, iter__11462.call(null, cljs.core.rest.call(null, s__11463__$1)));
            } else {
              var G__11482 = cljs.core.rest.call(null, s__11463__$1);
              s__11463__$1 = G__11482;
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__9005__auto__.call(null, sets);
  }());
};
tailrecursion.priority_map.PersistentPriorityMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(this$, entry) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.val.call(null, entry);
};
tailrecursion.priority_map.PersistentPriorityMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.compare;
};
tailrecursion.priority_map.PersistentPriorityMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.seq.call(null, function() {
    var iter__9005__auto__ = function iter__11470(s__11471) {
      return new cljs.core.LazySeq(null, function() {
        var s__11471__$1 = s__11471;
        while (true) {
          var temp__4092__auto__ = cljs.core.seq.call(null, s__11471__$1);
          if (temp__4092__auto__) {
            var xs__4579__auto__ = temp__4092__auto__;
            var vec__11477 = cljs.core.first.call(null, xs__4579__auto__);
            var priority = cljs.core.nth.call(null, vec__11477, 0, null);
            var item_set = cljs.core.nth.call(null, vec__11477, 1, null);
            var iterys__9001__auto__ = function(s__11471__$1, vec__11477, priority, item_set, xs__4579__auto__, temp__4092__auto__) {
              return function iter__11472(s__11473) {
                return new cljs.core.LazySeq(null, function(s__11471__$1, vec__11477, priority, item_set, xs__4579__auto__, temp__4092__auto__) {
                  return function() {
                    var s__11473__$1 = s__11473;
                    while (true) {
                      var temp__4092__auto____$1 = cljs.core.seq.call(null, s__11473__$1);
                      if (temp__4092__auto____$1) {
                        var s__11473__$2 = temp__4092__auto____$1;
                        if (cljs.core.chunked_seq_QMARK_.call(null, s__11473__$2)) {
                          var c__9003__auto__ = cljs.core.chunk_first.call(null, s__11473__$2);
                          var size__9004__auto__ = cljs.core.count.call(null, c__9003__auto__);
                          var b__11475 = cljs.core.chunk_buffer.call(null, size__9004__auto__);
                          if (function() {
                            var i__11474 = 0;
                            while (true) {
                              if (i__11474 < size__9004__auto__) {
                                var item = cljs.core._nth.call(null, c__9003__auto__, i__11474);
                                cljs.core.chunk_append.call(null, b__11475, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [item, priority], null));
                                var G__11483 = i__11474 + 1;
                                i__11474 = G__11483;
                                continue;
                              } else {
                                return true;
                              }
                              break;
                            }
                          }()) {
                            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11475), iter__11472.call(null, cljs.core.chunk_rest.call(null, s__11473__$2)));
                          } else {
                            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11475), null);
                          }
                        } else {
                          var item = cljs.core.first.call(null, s__11473__$2);
                          return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [item, priority], null), iter__11472.call(null, cljs.core.rest.call(null, s__11473__$2)));
                        }
                      } else {
                        return null;
                      }
                      break;
                    }
                  };
                }(s__11471__$1, vec__11477, priority, item_set, xs__4579__auto__, temp__4092__auto__), null, null);
              };
            }(s__11471__$1, vec__11477, priority, item_set, xs__4579__auto__, temp__4092__auto__);
            var fs__9002__auto__ = cljs.core.seq.call(null, iterys__9001__auto__.call(null, item_set));
            if (fs__9002__auto__) {
              return cljs.core.concat.call(null, fs__9002__auto__, iter__11470.call(null, cljs.core.rest.call(null, s__11471__$1)));
            } else {
              var G__11484 = cljs.core.rest.call(null, s__11471__$1);
              s__11471__$1 = G__11484;
              continue;
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__9005__auto__.call(null, self__.priority__GT_set_of_items);
  }());
};
tailrecursion.priority_map.PersistentPriorityMap.prototype.cljs$core$ICounted$_count$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.count.call(null, self__.item__GT_priority);
};
tailrecursion.priority_map.PersistentPriorityMap.prototype.cljs$core$IStack$_peek$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.count.call(null, self__.item__GT_priority) === 0) {
    return null;
  } else {
    var f = cljs.core.first.call(null, self__.priority__GT_set_of_items);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first.call(null, cljs.core.val.call(null, f)), cljs.core.key.call(null, f)], null);
  }
};
tailrecursion.priority_map.PersistentPriorityMap.prototype.cljs$core$IStack$_pop$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (cljs.core.count.call(null, self__.item__GT_priority) === 0) {
    throw new Error("Can't pop empty priority map");
  } else {
    var f = cljs.core.first.call(null, self__.priority__GT_set_of_items);
    var item_set = cljs.core.val.call(null, f);
    var item = cljs.core.first.call(null, item_set);
    var priority = cljs.core.key.call(null, f);
    if (cljs.core._EQ_.call(null, cljs.core.count.call(null, item_set), 1)) {
      return new tailrecursion.priority_map.PersistentPriorityMap(cljs.core.dissoc.call(null, self__.priority__GT_set_of_items, priority), cljs.core.dissoc.call(null, self__.item__GT_priority, item), self__.meta, null);
    } else {
      return new tailrecursion.priority_map.PersistentPriorityMap(cljs.core.assoc.call(null, self__.priority__GT_set_of_items, priority, cljs.core.disj.call(null, item_set, item)), cljs.core.dissoc.call(null, self__.item__GT_priority, item), self__.meta, null);
    }
  }
};
tailrecursion.priority_map.PersistentPriorityMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._equiv.call(null, self__.item__GT_priority, other);
};
tailrecursion.priority_map.PersistentPriorityMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, meta__$1) {
  var self__ = this;
  var this$__$1 = this;
  return new tailrecursion.priority_map.PersistentPriorityMap(self__.priority__GT_set_of_items, self__.item__GT_priority, meta__$1, self__.__hash);
};
tailrecursion.priority_map.PersistentPriorityMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.meta;
};
tailrecursion.priority_map.PersistentPriorityMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.with_meta.call(null, tailrecursion.priority_map.PersistentPriorityMap.EMPTY, self__.meta);
};
tailrecursion.priority_map.PersistentPriorityMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this$, item) {
  var self__ = this;
  var this$__$1 = this;
  var priority = self__.item__GT_priority.call(null, item, new cljs.core.Keyword("tailrecursion.priority-map", "not-found", "tailrecursion.priority-map/not-found", 3913856644));
  if (cljs.core._EQ_.call(null, priority, new cljs.core.Keyword("tailrecursion.priority-map", "not-found", "tailrecursion.priority-map/not-found", 3913856644))) {
    return this$__$1;
  } else {
    var item_set = self__.priority__GT_set_of_items.call(null, priority);
    if (cljs.core._EQ_.call(null, cljs.core.count.call(null, item_set), 1)) {
      return new tailrecursion.priority_map.PersistentPriorityMap(cljs.core.dissoc.call(null, self__.priority__GT_set_of_items, priority), cljs.core.dissoc.call(null, self__.item__GT_priority, item), self__.meta, null);
    } else {
      return new tailrecursion.priority_map.PersistentPriorityMap(cljs.core.assoc.call(null, self__.priority__GT_set_of_items, priority, cljs.core.disj.call(null, item_set, item)), cljs.core.dissoc.call(null, self__.item__GT_priority, item), self__.meta, null);
    }
  }
};
tailrecursion.priority_map.__GT_PersistentPriorityMap = function __GT_PersistentPriorityMap(priority__GT_set_of_items, item__GT_priority, meta, __hash) {
  return new tailrecursion.priority_map.PersistentPriorityMap(priority__GT_set_of_items, item__GT_priority, meta, __hash);
};
tailrecursion.priority_map.PersistentPriorityMap.EMPTY = new tailrecursion.priority_map.PersistentPriorityMap(cljs.core.sorted_map.call(null), cljs.core.PersistentArrayMap.EMPTY, cljs.core.PersistentArrayMap.EMPTY, null);
tailrecursion.priority_map.pm_empty_by = function pm_empty_by(comparator) {
  return new tailrecursion.priority_map.PersistentPriorityMap(cljs.core.sorted_map_by.call(null, comparator), cljs.core.PersistentArrayMap.EMPTY, cljs.core.PersistentArrayMap.EMPTY, null);
};
tailrecursion.priority_map.read_priority_map = function read_priority_map(elems) {
  if (cljs.core.map_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, tailrecursion.priority_map.PersistentPriorityMap.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Priority map literal expects a map for its elements.");
  }
};
cljs.reader.register_tag_parser_BANG_.call(null, "tailrecursion.priority-map", tailrecursion.priority_map.read_priority_map);
tailrecursion.priority_map.priority_map = function() {
  var priority_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = tailrecursion.priority_map.PersistentPriorityMap.EMPTY;
    while (true) {
      if (in$) {
        var G__11485 = cljs.core.nnext.call(null, in$);
        var G__11486 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__11485;
        out = G__11486;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var priority_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return priority_map__delegate.call(this, keyvals);
  };
  priority_map.cljs$lang$maxFixedArity = 0;
  priority_map.cljs$lang$applyTo = function(arglist__11487) {
    var keyvals = cljs.core.seq(arglist__11487);
    return priority_map__delegate(keyvals);
  };
  priority_map.cljs$core$IFn$_invoke$arity$variadic = priority_map__delegate;
  return priority_map;
}();
tailrecursion.priority_map.priority_map_by = function() {
  var priority_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = tailrecursion.priority_map.pm_empty_by.call(null, comparator);
    while (true) {
      if (in$) {
        var G__11488 = cljs.core.nnext.call(null, in$);
        var G__11489 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__11488;
        out = G__11489;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var priority_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return priority_map_by__delegate.call(this, comparator, keyvals);
  };
  priority_map_by.cljs$lang$maxFixedArity = 1;
  priority_map_by.cljs$lang$applyTo = function(arglist__11490) {
    var comparator = cljs.core.first(arglist__11490);
    var keyvals = cljs.core.rest(arglist__11490);
    return priority_map_by__delegate(comparator, keyvals);
  };
  priority_map_by.cljs$core$IFn$_invoke$arity$variadic = priority_map_by__delegate;
  return priority_map_by;
}();
goog.provide("tailrecursion.javelin");
goog.require("cljs.core");
goog.require("tailrecursion.priority_map");
goog.require("tailrecursion.priority_map");
tailrecursion.javelin.bf_seq = function bf_seq(branch_QMARK_, children, root) {
  var walk = function walk(queue) {
    var temp__4092__auto__ = cljs.core.peek.call(null, queue);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var node = temp__4092__auto__;
      return new cljs.core.LazySeq(null, function() {
        return cljs.core.cons.call(null, node, walk.call(null, cljs.core.into.call(null, cljs.core.pop.call(null, queue), cljs.core.truth_(branch_QMARK_.call(null, node)) ? children.call(null, node) : null)));
      }, null, null);
    } else {
      return null;
    }
  };
  return walk.call(null, cljs.core.conj.call(null, cljs.core.PersistentQueue.EMPTY, root));
};
tailrecursion.javelin.last_rank = cljs.core.atom.call(null, 0);
tailrecursion.javelin.next_rank = function next_rank() {
  return cljs.core.swap_BANG_.call(null, tailrecursion.javelin.last_rank, cljs.core.inc);
};
tailrecursion.javelin.deref_STAR_ = function deref_STAR_(x) {
  if (cljs.core.truth_(tailrecursion.javelin.cell_QMARK_.call(null, x))) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
tailrecursion.javelin.propagate_BANG_ = function propagate_BANG_(cell) {
  var queue = tailrecursion.priority_map.priority_map.call(null, cell, cell.rank);
  while (true) {
    if (cljs.core.seq.call(null, queue)) {
      var next = cljs.core.key.call(null, cljs.core.peek.call(null, queue));
      var value = next.thunk.call(null);
      var continue_QMARK_ = cljs.core.not_EQ_.call(null, value, next.prev);
      var reducer = function(queue, next, value, continue_QMARK_) {
        return function(p1__11263_SHARP_, p2__11264_SHARP_) {
          return cljs.core.assoc.call(null, p1__11263_SHARP_, p2__11264_SHARP_, p2__11264_SHARP_.rank);
        };
      }(queue, next, value, continue_QMARK_);
      var siblings = cljs.core.pop.call(null, queue);
      var children = next.sinks;
      if (continue_QMARK_) {
        next.prev = value;
      } else {
      }
      var G__11265 = continue_QMARK_ ? cljs.core.reduce.call(null, reducer, siblings, children) : siblings;
      queue = G__11265;
      continue;
    } else {
      return null;
    }
    break;
  }
};
tailrecursion.javelin.destroy_cell_BANG_ = function destroy_cell_BANG_(this$) {
  var srcs = this$.sources;
  this$.sources = cljs.core.PersistentVector.EMPTY;
  this$.watches = cljs.core.PersistentArrayMap.EMPTY;
  var seq__11270 = cljs.core.seq.call(null, cljs.core.filter.call(null, tailrecursion.javelin.cell_QMARK_, srcs));
  var chunk__11271 = null;
  var count__11272 = 0;
  var i__11273 = 0;
  while (true) {
    if (i__11273 < count__11272) {
      var src = cljs.core._nth.call(null, chunk__11271, i__11273);
      src.sinks = cljs.core.disj.call(null, src.sinks, this$);
      var G__11274 = seq__11270;
      var G__11275 = chunk__11271;
      var G__11276 = count__11272;
      var G__11277 = i__11273 + 1;
      seq__11270 = G__11274;
      chunk__11271 = G__11275;
      count__11272 = G__11276;
      i__11273 = G__11277;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__11270);
      if (temp__4092__auto__) {
        var seq__11270__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11270__$1)) {
          var c__9036__auto__ = cljs.core.chunk_first.call(null, seq__11270__$1);
          var G__11278 = cljs.core.chunk_rest.call(null, seq__11270__$1);
          var G__11279 = c__9036__auto__;
          var G__11280 = cljs.core.count.call(null, c__9036__auto__);
          var G__11281 = 0;
          seq__11270 = G__11278;
          chunk__11271 = G__11279;
          count__11272 = G__11280;
          i__11273 = G__11281;
          continue;
        } else {
          var src = cljs.core.first.call(null, seq__11270__$1);
          src.sinks = cljs.core.disj.call(null, src.sinks, this$);
          var G__11282 = cljs.core.next.call(null, seq__11270__$1);
          var G__11283 = null;
          var G__11284 = 0;
          var G__11285 = 0;
          seq__11270 = G__11282;
          chunk__11271 = G__11283;
          count__11272 = G__11284;
          i__11273 = G__11285;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
tailrecursion.javelin.set_formula_BANG_ = function() {
  var set_formula_BANG___delegate = function(this$, p__11290) {
    var vec__11311 = p__11290;
    var f = cljs.core.nth.call(null, vec__11311, 0, null);
    var sources = cljs.core.nth.call(null, vec__11311, 1, null);
    tailrecursion.javelin.destroy_cell_BANG_.call(null, this$);
    this$.sources = cljs.core.truth_(f) ? cljs.core.conj.call(null, cljs.core.vec.call(null, sources), f) : cljs.core.vec.call(null, sources);
    var seq__11312_11331 = cljs.core.seq.call(null, cljs.core.filter.call(null, tailrecursion.javelin.cell_QMARK_, this$.sources));
    var chunk__11313_11332 = null;
    var count__11314_11333 = 0;
    var i__11315_11334 = 0;
    while (true) {
      if (i__11315_11334 < count__11314_11333) {
        var source_11335 = cljs.core._nth.call(null, chunk__11313_11332, i__11315_11334);
        source_11335.sinks = cljs.core.conj.call(null, source_11335.sinks, this$);
        if (source_11335.rank > this$.rank) {
          var seq__11316_11336 = cljs.core.seq.call(null, tailrecursion.javelin.bf_seq.call(null, cljs.core.identity, function(seq__11312_11331, chunk__11313_11332, count__11314_11333, i__11315_11334, source_11335) {
            return function(p1__11286_SHARP_) {
              return p1__11286_SHARP_.sinks;
            };
          }(seq__11312_11331, chunk__11313_11332, count__11314_11333, i__11315_11334, source_11335), source_11335));
          var chunk__11317_11337 = null;
          var count__11318_11338 = 0;
          var i__11319_11339 = 0;
          while (true) {
            if (i__11319_11339 < count__11318_11338) {
              var dep_11340 = cljs.core._nth.call(null, chunk__11317_11337, i__11319_11339);
              dep_11340.rank = tailrecursion.javelin.next_rank.call(null);
              var G__11341 = seq__11316_11336;
              var G__11342 = chunk__11317_11337;
              var G__11343 = count__11318_11338;
              var G__11344 = i__11319_11339 + 1;
              seq__11316_11336 = G__11341;
              chunk__11317_11337 = G__11342;
              count__11318_11338 = G__11343;
              i__11319_11339 = G__11344;
              continue;
            } else {
              var temp__4092__auto___11345 = cljs.core.seq.call(null, seq__11316_11336);
              if (temp__4092__auto___11345) {
                var seq__11316_11346__$1 = temp__4092__auto___11345;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__11316_11346__$1)) {
                  var c__9036__auto___11347 = cljs.core.chunk_first.call(null, seq__11316_11346__$1);
                  var G__11348 = cljs.core.chunk_rest.call(null, seq__11316_11346__$1);
                  var G__11349 = c__9036__auto___11347;
                  var G__11350 = cljs.core.count.call(null, c__9036__auto___11347);
                  var G__11351 = 0;
                  seq__11316_11336 = G__11348;
                  chunk__11317_11337 = G__11349;
                  count__11318_11338 = G__11350;
                  i__11319_11339 = G__11351;
                  continue;
                } else {
                  var dep_11352 = cljs.core.first.call(null, seq__11316_11346__$1);
                  dep_11352.rank = tailrecursion.javelin.next_rank.call(null);
                  var G__11353 = cljs.core.next.call(null, seq__11316_11346__$1);
                  var G__11354 = null;
                  var G__11355 = 0;
                  var G__11356 = 0;
                  seq__11316_11336 = G__11353;
                  chunk__11317_11337 = G__11354;
                  count__11318_11338 = G__11355;
                  i__11319_11339 = G__11356;
                  continue;
                }
              } else {
              }
            }
            break;
          }
        } else {
        }
        var G__11357 = seq__11312_11331;
        var G__11358 = chunk__11313_11332;
        var G__11359 = count__11314_11333;
        var G__11360 = i__11315_11334 + 1;
        seq__11312_11331 = G__11357;
        chunk__11313_11332 = G__11358;
        count__11314_11333 = G__11359;
        i__11315_11334 = G__11360;
        continue;
      } else {
        var temp__4092__auto___11361 = cljs.core.seq.call(null, seq__11312_11331);
        if (temp__4092__auto___11361) {
          var seq__11312_11362__$1 = temp__4092__auto___11361;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__11312_11362__$1)) {
            var c__9036__auto___11363 = cljs.core.chunk_first.call(null, seq__11312_11362__$1);
            var G__11364 = cljs.core.chunk_rest.call(null, seq__11312_11362__$1);
            var G__11365 = c__9036__auto___11363;
            var G__11366 = cljs.core.count.call(null, c__9036__auto___11363);
            var G__11367 = 0;
            seq__11312_11331 = G__11364;
            chunk__11313_11332 = G__11365;
            count__11314_11333 = G__11366;
            i__11315_11334 = G__11367;
            continue;
          } else {
            var source_11368 = cljs.core.first.call(null, seq__11312_11362__$1);
            source_11368.sinks = cljs.core.conj.call(null, source_11368.sinks, this$);
            if (source_11368.rank > this$.rank) {
              var seq__11320_11369 = cljs.core.seq.call(null, tailrecursion.javelin.bf_seq.call(null, cljs.core.identity, function(seq__11312_11331, chunk__11313_11332, count__11314_11333, i__11315_11334, source_11368, seq__11312_11362__$1, temp__4092__auto___11361) {
                return function(p1__11286_SHARP_) {
                  return p1__11286_SHARP_.sinks;
                };
              }(seq__11312_11331, chunk__11313_11332, count__11314_11333, i__11315_11334, source_11368, seq__11312_11362__$1, temp__4092__auto___11361), source_11368));
              var chunk__11321_11370 = null;
              var count__11322_11371 = 0;
              var i__11323_11372 = 0;
              while (true) {
                if (i__11323_11372 < count__11322_11371) {
                  var dep_11373 = cljs.core._nth.call(null, chunk__11321_11370, i__11323_11372);
                  dep_11373.rank = tailrecursion.javelin.next_rank.call(null);
                  var G__11374 = seq__11320_11369;
                  var G__11375 = chunk__11321_11370;
                  var G__11376 = count__11322_11371;
                  var G__11377 = i__11323_11372 + 1;
                  seq__11320_11369 = G__11374;
                  chunk__11321_11370 = G__11375;
                  count__11322_11371 = G__11376;
                  i__11323_11372 = G__11377;
                  continue;
                } else {
                  var temp__4092__auto___11378__$1 = cljs.core.seq.call(null, seq__11320_11369);
                  if (temp__4092__auto___11378__$1) {
                    var seq__11320_11379__$1 = temp__4092__auto___11378__$1;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__11320_11379__$1)) {
                      var c__9036__auto___11380 = cljs.core.chunk_first.call(null, seq__11320_11379__$1);
                      var G__11381 = cljs.core.chunk_rest.call(null, seq__11320_11379__$1);
                      var G__11382 = c__9036__auto___11380;
                      var G__11383 = cljs.core.count.call(null, c__9036__auto___11380);
                      var G__11384 = 0;
                      seq__11320_11369 = G__11381;
                      chunk__11321_11370 = G__11382;
                      count__11322_11371 = G__11383;
                      i__11323_11372 = G__11384;
                      continue;
                    } else {
                      var dep_11385 = cljs.core.first.call(null, seq__11320_11379__$1);
                      dep_11385.rank = tailrecursion.javelin.next_rank.call(null);
                      var G__11386 = cljs.core.next.call(null, seq__11320_11379__$1);
                      var G__11387 = null;
                      var G__11388 = 0;
                      var G__11389 = 0;
                      seq__11320_11369 = G__11386;
                      chunk__11321_11370 = G__11387;
                      count__11322_11371 = G__11388;
                      i__11323_11372 = G__11389;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
            } else {
            }
            var G__11390 = cljs.core.next.call(null, seq__11312_11362__$1);
            var G__11391 = null;
            var G__11392 = 0;
            var G__11393 = 0;
            seq__11312_11331 = G__11390;
            chunk__11313_11332 = G__11391;
            count__11314_11333 = G__11392;
            i__11315_11334 = G__11393;
            continue;
          }
        } else {
        }
      }
      break;
    }
    var compute = function(p1__11287_SHARP_) {
      return cljs.core.apply.call(null, tailrecursion.javelin.deref_STAR_.call(null, cljs.core.peek.call(null, p1__11287_SHARP_)), cljs.core.map.call(null, tailrecursion.javelin.deref_STAR_, cljs.core.pop.call(null, p1__11287_SHARP_)));
    };
    var thunk = function(compute) {
      return function() {
        var x = this$.state;
        var y = compute.call(null, this$.sources);
        var seq__11324_11394 = cljs.core.seq.call(null, cljs.core.dissoc.call(null, this$.watches, new cljs.core.Keyword("tailrecursion.javelin", "cell", "tailrecursion.javelin/cell", 3109523258)));
        var chunk__11325_11395 = null;
        var count__11326_11396 = 0;
        var i__11327_11397 = 0;
        while (true) {
          if (i__11327_11397 < count__11326_11396) {
            var vec__11328_11398 = cljs.core._nth.call(null, chunk__11325_11395, i__11327_11397);
            var k_11399 = cljs.core.nth.call(null, vec__11328_11398, 0, null);
            var f_11400__$1 = cljs.core.nth.call(null, vec__11328_11398, 1, null);
            f_11400__$1.call(null, k_11399, this$, x, y);
            var G__11401 = seq__11324_11394;
            var G__11402 = chunk__11325_11395;
            var G__11403 = count__11326_11396;
            var G__11404 = i__11327_11397 + 1;
            seq__11324_11394 = G__11401;
            chunk__11325_11395 = G__11402;
            count__11326_11396 = G__11403;
            i__11327_11397 = G__11404;
            continue;
          } else {
            var temp__4092__auto___11405 = cljs.core.seq.call(null, seq__11324_11394);
            if (temp__4092__auto___11405) {
              var seq__11324_11406__$1 = temp__4092__auto___11405;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__11324_11406__$1)) {
                var c__9036__auto___11407 = cljs.core.chunk_first.call(null, seq__11324_11406__$1);
                var G__11408 = cljs.core.chunk_rest.call(null, seq__11324_11406__$1);
                var G__11409 = c__9036__auto___11407;
                var G__11410 = cljs.core.count.call(null, c__9036__auto___11407);
                var G__11411 = 0;
                seq__11324_11394 = G__11408;
                chunk__11325_11395 = G__11409;
                count__11326_11396 = G__11410;
                i__11327_11397 = G__11411;
                continue;
              } else {
                var vec__11329_11412 = cljs.core.first.call(null, seq__11324_11406__$1);
                var k_11413 = cljs.core.nth.call(null, vec__11329_11412, 0, null);
                var f_11414__$1 = cljs.core.nth.call(null, vec__11329_11412, 1, null);
                f_11414__$1.call(null, k_11413, this$, x, y);
                var G__11415 = cljs.core.next.call(null, seq__11324_11406__$1);
                var G__11416 = null;
                var G__11417 = 0;
                var G__11418 = 0;
                seq__11324_11394 = G__11415;
                chunk__11325_11395 = G__11416;
                count__11326_11396 = G__11417;
                i__11327_11397 = G__11418;
                continue;
              }
            } else {
            }
          }
          break;
        }
        return this$.state = y;
      };
    }(compute);
    var err_mesg = "formula cell can't be updated via swap! or reset!";
    cljs.core._add_watch.call(null, this$, new cljs.core.Keyword("tailrecursion.javelin", "cell", "tailrecursion.javelin/cell", 3109523258), cljs.core.truth_(f) ? function() {
      throw new Error(err_mesg);
    } : function(p1__11289_SHARP_, p2__11288_SHARP_) {
      return tailrecursion.javelin.propagate_BANG_.call(null, p2__11288_SHARP_);
    });
    this$.input_QMARK_ = cljs.core.truth_(f) ? false : true;
    this$.thunk = cljs.core.truth_(f) ? thunk : function() {
      return cljs.core.deref.call(null, this$);
    };
    var G__11330 = this$;
    tailrecursion.javelin.propagate_BANG_.call(null, G__11330);
    return G__11330;
  };
  var set_formula_BANG_ = function(this$, var_args) {
    var p__11290 = null;
    if (arguments.length > 1) {
      p__11290 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return set_formula_BANG___delegate.call(this, this$, p__11290);
  };
  set_formula_BANG_.cljs$lang$maxFixedArity = 1;
  set_formula_BANG_.cljs$lang$applyTo = function(arglist__11419) {
    var this$ = cljs.core.first(arglist__11419);
    var p__11290 = cljs.core.rest(arglist__11419);
    return set_formula_BANG___delegate(this$, p__11290);
  };
  set_formula_BANG_.cljs$core$IFn$_invoke$arity$variadic = set_formula_BANG___delegate;
  return set_formula_BANG_;
}();
tailrecursion.javelin.Cell = function(meta, state, rank, prev, sources, sinks, thunk, watches, input_QMARK_) {
  this.meta = meta;
  this.state = state;
  this.rank = rank;
  this.prev = prev;
  this.sources = sources;
  this.sinks = sinks;
  this.thunk = thunk;
  this.watches = watches;
  this.input_QMARK_ = input_QMARK_;
  this.cljs$lang$protocol_mask$partition1$ = 2;
  this.cljs$lang$protocol_mask$partition0$ = 2147647488;
};
tailrecursion.javelin.Cell.cljs$lang$type = true;
tailrecursion.javelin.Cell.cljs$lang$ctorStr = "tailrecursion.javelin/Cell";
tailrecursion.javelin.Cell.cljs$lang$ctorPrWriter = function(this__8856__auto__, writer__8857__auto__, opt__8858__auto__) {
  return cljs.core._write.call(null, writer__8857__auto__, "tailrecursion.javelin/Cell");
};
tailrecursion.javelin.Cell.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__11420 = cljs.core.seq.call(null, self__.watches);
  var chunk__11421 = null;
  var count__11422 = 0;
  var i__11423 = 0;
  while (true) {
    if (i__11423 < count__11422) {
      var vec__11424 = cljs.core._nth.call(null, chunk__11421, i__11423);
      var key = cljs.core.nth.call(null, vec__11424, 0, null);
      var f = cljs.core.nth.call(null, vec__11424, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__11426 = seq__11420;
      var G__11427 = chunk__11421;
      var G__11428 = count__11422;
      var G__11429 = i__11423 + 1;
      seq__11420 = G__11426;
      chunk__11421 = G__11427;
      count__11422 = G__11428;
      i__11423 = G__11429;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__11420);
      if (temp__4092__auto__) {
        var seq__11420__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__11420__$1)) {
          var c__9036__auto__ = cljs.core.chunk_first.call(null, seq__11420__$1);
          var G__11430 = cljs.core.chunk_rest.call(null, seq__11420__$1);
          var G__11431 = c__9036__auto__;
          var G__11432 = cljs.core.count.call(null, c__9036__auto__);
          var G__11433 = 0;
          seq__11420 = G__11430;
          chunk__11421 = G__11431;
          count__11422 = G__11432;
          i__11423 = G__11433;
          continue;
        } else {
          var vec__11425 = cljs.core.first.call(null, seq__11420__$1);
          var key = cljs.core.nth.call(null, vec__11425, 0, null);
          var f = cljs.core.nth.call(null, vec__11425, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__11434 = cljs.core.next.call(null, seq__11420__$1);
          var G__11435 = null;
          var G__11436 = 0;
          var G__11437 = 0;
          seq__11420 = G__11434;
          chunk__11421 = G__11435;
          count__11422 = G__11436;
          i__11423 = G__11437;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
tailrecursion.javelin.Cell.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
};
tailrecursion.javelin.Cell.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
tailrecursion.javelin.Cell.prototype.cljs$core$IDeref$_deref$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.state;
};
tailrecursion.javelin.Cell.prototype.cljs$core$IMeta$_meta$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return self__.meta;
};
tailrecursion.javelin.Cell.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this$, writer, opts) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.write_all.call(null, writer, "#\x3cCell: ", cljs.core.pr_str.call(null, self__.state), "\x3e");
};
tailrecursion.javelin.__GT_Cell = function __GT_Cell(meta, state, rank, prev, sources, sinks, thunk, watches, input_QMARK_) {
  return new tailrecursion.javelin.Cell(meta, state, rank, prev, sources, sinks, thunk, watches, input_QMARK_);
};
tailrecursion.javelin.lift = function lift(f) {
  return function() {
    var G__11438__delegate = function(sources) {
      return tailrecursion.javelin.set_formula_BANG_.call(null, tailrecursion.javelin.cell.call(null, new cljs.core.Keyword("tailrecursion.javelin", "none", "tailrecursion.javelin/none", 3109973412)), f, sources);
    };
    var G__11438 = function(var_args) {
      var sources = null;
      if (arguments.length > 0) {
        sources = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__11438__delegate.call(this, sources);
    };
    G__11438.cljs$lang$maxFixedArity = 0;
    G__11438.cljs$lang$applyTo = function(arglist__11439) {
      var sources = cljs.core.seq(arglist__11439);
      return G__11438__delegate(sources);
    };
    G__11438.cljs$core$IFn$_invoke$arity$variadic = G__11438__delegate;
    return G__11438;
  }();
};
tailrecursion.javelin.cell = function cell(x) {
  return tailrecursion.javelin.set_formula_BANG_.call(null, new tailrecursion.javelin.Cell(cljs.core.PersistentArrayMap.EMPTY, x, tailrecursion.javelin.next_rank.call(null), x, cljs.core.PersistentVector.EMPTY, cljs.core.PersistentHashSet.EMPTY, null, cljs.core.PersistentArrayMap.EMPTY, null));
};
tailrecursion.javelin.cell_QMARK_ = function cell_QMARK_(c) {
  if (cljs.core._EQ_.call(null, cljs.core.type.call(null, c), tailrecursion.javelin.Cell)) {
    return c;
  } else {
    return null;
  }
};
tailrecursion.javelin.input_QMARK_ = function input_QMARK_(c) {
  if (cljs.core.truth_(function() {
    var and__8282__auto__ = tailrecursion.javelin.cell_QMARK_.call(null, c);
    if (cljs.core.truth_(and__8282__auto__)) {
      return c.input_QMARK_;
    } else {
      return and__8282__auto__;
    }
  }())) {
    return c;
  } else {
    return null;
  }
};
tailrecursion.javelin.set_cell_BANG_ = function set_cell_BANG_(c, x) {
  c.state = x;
  return tailrecursion.javelin.set_formula_BANG_.call(null, c);
};
tailrecursion.javelin.alts_BANG_ = function() {
  var alts_BANG___delegate = function(cells) {
    var olds = cljs.core.atom.call(null, cljs.core.repeat.call(null, cljs.core.count.call(null, cells), new cljs.core.Keyword("tailrecursion.javelin", "none", "tailrecursion.javelin/none", 3109973412)));
    var tag_neq = function(olds) {
      return function(p1__11440_SHARP_, p2__11441_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.not_EQ_.call(null, p1__11440_SHARP_, p2__11441_SHARP_), p2__11441_SHARP_], null);
      };
    }(olds);
    var diff = function(olds, tag_neq) {
      return function(p1__11443_SHARP_, p2__11442_SHARP_) {
        return cljs.core.distinct.call(null, cljs.core.map.call(null, cljs.core.second, cljs.core.filter.call(null, cljs.core.first, cljs.core.map.call(null, tag_neq, p1__11443_SHARP_, p2__11442_SHARP_))));
      };
    }(olds, tag_neq);
    var proc = function(olds, tag_neq, diff) {
      return function() {
        var G__11445__delegate = function(rest__11444_SHARP_) {
          var news = diff.call(null, cljs.core.deref.call(null, olds), rest__11444_SHARP_);
          cljs.core.reset_BANG_.call(null, olds, rest__11444_SHARP_);
          return news;
        };
        var G__11445 = function(var_args) {
          var rest__11444_SHARP_ = null;
          if (arguments.length > 0) {
            rest__11444_SHARP_ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__11445__delegate.call(this, rest__11444_SHARP_);
        };
        G__11445.cljs$lang$maxFixedArity = 0;
        G__11445.cljs$lang$applyTo = function(arglist__11446) {
          var rest__11444_SHARP_ = cljs.core.seq(arglist__11446);
          return G__11445__delegate(rest__11444_SHARP_);
        };
        G__11445.cljs$core$IFn$_invoke$arity$variadic = G__11445__delegate;
        return G__11445;
      }();
    }(olds, tag_neq, diff);
    return cljs.core.apply.call(null, tailrecursion.javelin.lift.call(null, proc), cells);
  };
  var alts_BANG_ = function(var_args) {
    var cells = null;
    if (arguments.length > 0) {
      cells = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return alts_BANG___delegate.call(this, cells);
  };
  alts_BANG_.cljs$lang$maxFixedArity = 0;
  alts_BANG_.cljs$lang$applyTo = function(arglist__11447) {
    var cells = cljs.core.seq(arglist__11447);
    return alts_BANG___delegate(cells);
  };
  alts_BANG_.cljs$core$IFn$_invoke$arity$variadic = alts_BANG___delegate;
  return alts_BANG_;
}();
tailrecursion.javelin.cell_map = function cell_map(f, c) {
  var cseq = tailrecursion.javelin.lift.call(null, cljs.core.seq).call(null, c);
  var safe_nth = function(cseq) {
    return function(p1__11448_SHARP_, p2__11449_SHARP_) {
      try {
        return cljs.core.nth.call(null, p1__11448_SHARP_, p2__11449_SHARP_);
      } catch (e11452) {
        if (e11452 instanceof Error) {
          var _ = e11452;
          return null;
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw e11452;
          } else {
            return null;
          }
        }
      }
    };
  }(cseq);
  return cljs.core.map.call(null, function(p1__11450_SHARP_) {
    return tailrecursion.javelin.lift.call(null, cljs.core.comp.call(null, f, safe_nth)).call(null, cseq, p1__11450_SHARP_);
  }, cljs.core.range.call(null, 0, cljs.core.count.call(null, cljs.core.deref.call(null, cseq))));
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw[cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
      } else {
        return null;
      }
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return[cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__12998 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__12998;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__13002 = cljs.core._EQ_;
    var expr__13003 = limit;
    if (cljs.core.truth_(pred__13002.call(null, 1, expr__13003))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__13002.call(null, 2, expr__13003))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, [cljs.core.str(re)].join(""), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4090__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4090__auto__)) {
            var m = temp__4090__auto__;
            var index = s__$1.indexOf(m);
            var G__13005 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__13006 = limit__$1 - 1;
            var G__13007 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__13005;
            limit__$1 = G__13006;
            parts = G__13007;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__13008 = index - 1;
        index = G__13008;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4090__auto___13009 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4090__auto___13009)) {
        var replacement_13010 = temp__4090__auto___13009;
        buffer.append([cljs.core.str(replacement_13010)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__13011 = index + 1;
      index = G__13011;
      continue;
    }
    break;
  }
};
goog.provide("tailrecursion.hoplon");
goog.require("cljs.core");
goog.require("tailrecursion.javelin");
goog.require("cljs.reader");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("cljs.reader");
goog.require("tailrecursion.javelin");
tailrecursion.hoplon.is_ie8 = cljs.core.not.call(null, window["Node"]);
tailrecursion.hoplon.node_QMARK_ = cljs.core.not.call(null, tailrecursion.hoplon.is_ie8) ? function(p1__12612_SHARP_) {
  return p1__12612_SHARP_ instanceof Node;
} : function(p1__12613_SHARP_) {
  try {
    return p1__12613_SHARP_.nodeType;
  } catch (e12614) {
    if (e12614 instanceof Error) {
      var _ = e12614;
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e12614;
      } else {
        return null;
      }
    }
  }
};
tailrecursion.hoplon.vector_QMARK__STAR_ = cljs.core.not.call(null, tailrecursion.hoplon.is_ie8) ? cljs.core.vector_QMARK_ : function(p1__12615_SHARP_) {
  try {
    return cljs.core.vector_QMARK_.call(null, p1__12615_SHARP_);
  } catch (e12616) {
    if (e12616 instanceof Error) {
      var _ = e12616;
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e12616;
      } else {
        return null;
      }
    }
  }
};
tailrecursion.hoplon.seq_QMARK__STAR_ = cljs.core.not.call(null, tailrecursion.hoplon.is_ie8) ? cljs.core.seq_QMARK_ : function(p1__12617_SHARP_) {
  try {
    return cljs.core.seq_QMARK_.call(null, p1__12617_SHARP_);
  } catch (e12618) {
    if (e12618 instanceof Error) {
      var _ = e12618;
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e12618;
      } else {
        return null;
      }
    }
  }
};
cljs.core.set_print_fn_BANG_.call(null, function(p1__12619_SHARP_) {
  if (cljs.core.truth_(function() {
    var and__8282__auto__ = console;
    if (cljs.core.truth_(and__8282__auto__)) {
      return console.log;
    } else {
      return and__8282__auto__;
    }
  }())) {
    return console.log(p1__12619_SHARP_);
  } else {
    return null;
  }
});
tailrecursion.hoplon.safe_nth = function() {
  var safe_nth = null;
  var safe_nth__2 = function(coll, index) {
    return safe_nth.call(null, coll, index, null);
  };
  var safe_nth__3 = function(coll, index, not_found) {
    try {
      return cljs.core.nth.call(null, coll, index, not_found);
    } catch (e12621) {
      if (e12621 instanceof Error) {
        var _ = e12621;
        return not_found;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw e12621;
        } else {
          return null;
        }
      }
    }
  };
  safe_nth = function(coll, index, not_found) {
    switch(arguments.length) {
      case 2:
        return safe_nth__2.call(this, coll, index);
      case 3:
        return safe_nth__3.call(this, coll, index, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  safe_nth.cljs$core$IFn$_invoke$arity$2 = safe_nth__2;
  safe_nth.cljs$core$IFn$_invoke$arity$3 = safe_nth__3;
  return safe_nth;
}();
tailrecursion.hoplon.timeout = function() {
  var timeout = null;
  var timeout__1 = function(f) {
    return timeout.call(null, f, 0);
  };
  var timeout__2 = function(f, t) {
    return window.setTimeout(f, t);
  };
  timeout = function(f, t) {
    switch(arguments.length) {
      case 1:
        return timeout__1.call(this, f);
      case 2:
        return timeout__2.call(this, f, t);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  timeout.cljs$core$IFn$_invoke$arity$1 = timeout__1;
  timeout.cljs$core$IFn$_invoke$arity$2 = timeout__2;
  return timeout;
}();
tailrecursion.hoplon.unsplice = function unsplice(forms) {
  return cljs.core.mapcat.call(null, function(p1__12622_SHARP_) {
    if (cljs.core.truth_(function() {
      var or__8294__auto__ = tailrecursion.hoplon.seq_QMARK__STAR_.call(null, p1__12622_SHARP_);
      if (cljs.core.truth_(or__8294__auto__)) {
        return or__8294__auto__;
      } else {
        return tailrecursion.hoplon.vector_QMARK__STAR_.call(null, p1__12622_SHARP_);
      }
    }())) {
      return unsplice.call(null, p1__12622_SHARP_);
    } else {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__12622_SHARP_], null);
    }
  }, forms);
};
tailrecursion.hoplon.when_dom = function when_dom(this$, f) {
  return tailrecursion.hoplon.timeout.call(null, function doit() {
    if (cljs.core.truth_(document.documentElement.contains(this$))) {
      return f.call(null);
    } else {
      return tailrecursion.hoplon.timeout.call(null, doit, 20);
    }
  });
};
tailrecursion.hoplon.parse_args = function parse_args(p__12625) {
  var vec__12627 = p__12625;
  var head = cljs.core.nth.call(null, vec__12627, 0, null);
  var tail = cljs.core.nthnext.call(null, vec__12627, 1);
  var args = vec__12627;
  var kw1_QMARK_ = cljs.core.comp.call(null, cljs.core.keyword_QMARK_, cljs.core.first);
  var mkkw = function(kw1_QMARK_) {
    return function(p1__12623_SHARP_) {
      return cljs.core.map.call(null, cljs.core.vec, cljs.core.take_while.call(null, kw1_QMARK_, cljs.core.partition.call(null, 2, p1__12623_SHARP_)));
    };
  }(kw1_QMARK_);
  var drkw = function(kw1_QMARK_, mkkw) {
    return function(p1__12624_SHARP_) {
      return cljs.core.mapcat.call(null, cljs.core.identity, cljs.core.drop_while.call(null, kw1_QMARK_, cljs.core.partition.call(null, 2, 2, cljs.core.PersistentVector.EMPTY, p1__12624_SHARP_)));
    };
  }(kw1_QMARK_, mkkw);
  if (cljs.core.map_QMARK_.call(null, head)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [head, tail], null);
  } else {
    if (head instanceof cljs.core.Keyword) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, mkkw.call(null, args)), drkw.call(null, args)], null);
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentArrayMap.EMPTY, args], null);
      } else {
        return null;
      }
    }
  }
};
tailrecursion.hoplon.add_attributes_BANG_ = function add_attributes_BANG_(this$, attr) {
  var prefix = function(p1__12628_SHARP_) {
    return p1__12628_SHARP_.substr(0, 3);
  };
  var suffix = function(prefix) {
    return function(p1__12629_SHARP_) {
      return cljs.core.keyword.call(null, p1__12629_SHARP_.substr(3));
    };
  }(prefix);
  var dokey = function(prefix, suffix) {
    return function(p1__12630_SHARP_) {
      var p = prefix.call(null, p1__12630_SHARP_);
      return cljs.core.keyword.call(null, !cljs.core._EQ_.call(null, "do-", p) ? p1__12630_SHARP_ : p1__12630_SHARP_.substr(3));
    };
  }(prefix, suffix);
  var dos = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ons = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var addcls = function(prefix, suffix, dokey, dos, ons) {
    return function(p1__12631_SHARP_, p2__12632_SHARP_) {
      return clojure.string.join.call(null, " ", cljs.core.into.call(null, cljs.core.set.call(null, clojure.string.split.call(null, p1__12631_SHARP_, / /)), clojure.string.split.call(null, p2__12632_SHARP_, / /)));
    };
  }(prefix, suffix, dokey, dos, ons);
  var seq__12663_12689 = cljs.core.seq.call(null, attr);
  var chunk__12664_12690 = null;
  var count__12665_12691 = 0;
  var i__12666_12692 = 0;
  while (true) {
    if (i__12666_12692 < count__12665_12691) {
      var vec__12667_12693 = cljs.core._nth.call(null, chunk__12664_12690, i__12666_12692);
      var k_12694 = cljs.core.nth.call(null, vec__12667_12693, 0, null);
      var v_12695 = cljs.core.nth.call(null, vec__12667_12693, 1, null);
      var k_12696__$1 = cljs.core.name.call(null, k_12694);
      var e_12697 = jQuery(this$);
      if (cljs.core.truth_(tailrecursion.javelin.cell_QMARK_.call(null, v_12695))) {
        cljs.core.swap_BANG_.call(null, dos, cljs.core.assoc, dokey.call(null, k_12696__$1), v_12695);
      } else {
        if (cljs.core._EQ_.call(null, k_12696__$1, "class")) {
          var seq__12668_12698 = cljs.core.seq.call(null, clojure.string.split.call(null, v_12695, / /));
          var chunk__12669_12699 = null;
          var count__12670_12700 = 0;
          var i__12671_12701 = 0;
          while (true) {
            if (i__12671_12701 < count__12670_12700) {
              var cls_12702 = cljs.core._nth.call(null, chunk__12669_12699, i__12671_12701);
              e_12697.addClass(cls_12702);
              var G__12703 = seq__12668_12698;
              var G__12704 = chunk__12669_12699;
              var G__12705 = count__12670_12700;
              var G__12706 = i__12671_12701 + 1;
              seq__12668_12698 = G__12703;
              chunk__12669_12699 = G__12704;
              count__12670_12700 = G__12705;
              i__12671_12701 = G__12706;
              continue;
            } else {
              var temp__4092__auto___12707 = cljs.core.seq.call(null, seq__12668_12698);
              if (temp__4092__auto___12707) {
                var seq__12668_12708__$1 = temp__4092__auto___12707;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__12668_12708__$1)) {
                  var c__9036__auto___12709 = cljs.core.chunk_first.call(null, seq__12668_12708__$1);
                  var G__12710 = cljs.core.chunk_rest.call(null, seq__12668_12708__$1);
                  var G__12711 = c__9036__auto___12709;
                  var G__12712 = cljs.core.count.call(null, c__9036__auto___12709);
                  var G__12713 = 0;
                  seq__12668_12698 = G__12710;
                  chunk__12669_12699 = G__12711;
                  count__12670_12700 = G__12712;
                  i__12671_12701 = G__12713;
                  continue;
                } else {
                  var cls_12714 = cljs.core.first.call(null, seq__12668_12708__$1);
                  e_12697.addClass(cls_12714);
                  var G__12715 = cljs.core.next.call(null, seq__12668_12708__$1);
                  var G__12716 = null;
                  var G__12717 = 0;
                  var G__12718 = 0;
                  seq__12668_12698 = G__12715;
                  chunk__12669_12699 = G__12716;
                  count__12670_12700 = G__12717;
                  i__12671_12701 = G__12718;
                  continue;
                }
              } else {
              }
            }
            break;
          }
        } else {
          if (cljs.core._EQ_.call(null, k_12696__$1, "css")) {
            e_12697.css(cljs.core.clj__GT_js.call(null, v_12695));
          } else {
            if (cljs.core._EQ_.call(null, "do-", prefix.call(null, k_12696__$1))) {
              cljs.core.swap_BANG_.call(null, dos, cljs.core.assoc, suffix.call(null, k_12696__$1), v_12695);
            } else {
              if (cljs.core._EQ_.call(null, "on-", prefix.call(null, k_12696__$1))) {
                cljs.core.swap_BANG_.call(null, ons, cljs.core.assoc, suffix.call(null, k_12696__$1), v_12695);
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  if (cljs.core._EQ_.call(null, false, v_12695)) {
                    e_12697.removeAttr(k_12696__$1);
                  } else {
                    if (cljs.core._EQ_.call(null, true, v_12695)) {
                      e_12697.attr(k_12696__$1, k_12696__$1);
                    } else {
                      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                        e_12697.attr(k_12696__$1, [cljs.core.str(v_12695)].join(""));
                      } else {
                      }
                    }
                  }
                } else {
                }
              }
            }
          }
        }
      }
      var G__12719 = seq__12663_12689;
      var G__12720 = chunk__12664_12690;
      var G__12721 = count__12665_12691;
      var G__12722 = i__12666_12692 + 1;
      seq__12663_12689 = G__12719;
      chunk__12664_12690 = G__12720;
      count__12665_12691 = G__12721;
      i__12666_12692 = G__12722;
      continue;
    } else {
      var temp__4092__auto___12723 = cljs.core.seq.call(null, seq__12663_12689);
      if (temp__4092__auto___12723) {
        var seq__12663_12724__$1 = temp__4092__auto___12723;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12663_12724__$1)) {
          var c__9036__auto___12725 = cljs.core.chunk_first.call(null, seq__12663_12724__$1);
          var G__12726 = cljs.core.chunk_rest.call(null, seq__12663_12724__$1);
          var G__12727 = c__9036__auto___12725;
          var G__12728 = cljs.core.count.call(null, c__9036__auto___12725);
          var G__12729 = 0;
          seq__12663_12689 = G__12726;
          chunk__12664_12690 = G__12727;
          count__12665_12691 = G__12728;
          i__12666_12692 = G__12729;
          continue;
        } else {
          var vec__12672_12730 = cljs.core.first.call(null, seq__12663_12724__$1);
          var k_12731 = cljs.core.nth.call(null, vec__12672_12730, 0, null);
          var v_12732 = cljs.core.nth.call(null, vec__12672_12730, 1, null);
          var k_12733__$1 = cljs.core.name.call(null, k_12731);
          var e_12734 = jQuery(this$);
          if (cljs.core.truth_(tailrecursion.javelin.cell_QMARK_.call(null, v_12732))) {
            cljs.core.swap_BANG_.call(null, dos, cljs.core.assoc, dokey.call(null, k_12733__$1), v_12732);
          } else {
            if (cljs.core._EQ_.call(null, k_12733__$1, "class")) {
              var seq__12673_12735 = cljs.core.seq.call(null, clojure.string.split.call(null, v_12732, / /));
              var chunk__12674_12736 = null;
              var count__12675_12737 = 0;
              var i__12676_12738 = 0;
              while (true) {
                if (i__12676_12738 < count__12675_12737) {
                  var cls_12739 = cljs.core._nth.call(null, chunk__12674_12736, i__12676_12738);
                  e_12734.addClass(cls_12739);
                  var G__12740 = seq__12673_12735;
                  var G__12741 = chunk__12674_12736;
                  var G__12742 = count__12675_12737;
                  var G__12743 = i__12676_12738 + 1;
                  seq__12673_12735 = G__12740;
                  chunk__12674_12736 = G__12741;
                  count__12675_12737 = G__12742;
                  i__12676_12738 = G__12743;
                  continue;
                } else {
                  var temp__4092__auto___12744__$1 = cljs.core.seq.call(null, seq__12673_12735);
                  if (temp__4092__auto___12744__$1) {
                    var seq__12673_12745__$1 = temp__4092__auto___12744__$1;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__12673_12745__$1)) {
                      var c__9036__auto___12746 = cljs.core.chunk_first.call(null, seq__12673_12745__$1);
                      var G__12747 = cljs.core.chunk_rest.call(null, seq__12673_12745__$1);
                      var G__12748 = c__9036__auto___12746;
                      var G__12749 = cljs.core.count.call(null, c__9036__auto___12746);
                      var G__12750 = 0;
                      seq__12673_12735 = G__12747;
                      chunk__12674_12736 = G__12748;
                      count__12675_12737 = G__12749;
                      i__12676_12738 = G__12750;
                      continue;
                    } else {
                      var cls_12751 = cljs.core.first.call(null, seq__12673_12745__$1);
                      e_12734.addClass(cls_12751);
                      var G__12752 = cljs.core.next.call(null, seq__12673_12745__$1);
                      var G__12753 = null;
                      var G__12754 = 0;
                      var G__12755 = 0;
                      seq__12673_12735 = G__12752;
                      chunk__12674_12736 = G__12753;
                      count__12675_12737 = G__12754;
                      i__12676_12738 = G__12755;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
            } else {
              if (cljs.core._EQ_.call(null, k_12733__$1, "css")) {
                e_12734.css(cljs.core.clj__GT_js.call(null, v_12732));
              } else {
                if (cljs.core._EQ_.call(null, "do-", prefix.call(null, k_12733__$1))) {
                  cljs.core.swap_BANG_.call(null, dos, cljs.core.assoc, suffix.call(null, k_12733__$1), v_12732);
                } else {
                  if (cljs.core._EQ_.call(null, "on-", prefix.call(null, k_12733__$1))) {
                    cljs.core.swap_BANG_.call(null, ons, cljs.core.assoc, suffix.call(null, k_12733__$1), v_12732);
                  } else {
                    if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                      if (cljs.core._EQ_.call(null, false, v_12732)) {
                        e_12734.removeAttr(k_12733__$1);
                      } else {
                        if (cljs.core._EQ_.call(null, true, v_12732)) {
                          e_12734.attr(k_12733__$1, k_12733__$1);
                        } else {
                          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                            e_12734.attr(k_12733__$1, [cljs.core.str(v_12732)].join(""));
                          } else {
                          }
                        }
                      }
                    } else {
                    }
                  }
                }
              }
            }
          }
          var G__12756 = cljs.core.next.call(null, seq__12663_12724__$1);
          var G__12757 = null;
          var G__12758 = 0;
          var G__12759 = 0;
          seq__12663_12689 = G__12756;
          chunk__12664_12690 = G__12757;
          count__12665_12691 = G__12758;
          i__12666_12692 = G__12759;
          continue;
        }
      } else {
      }
    }
    break;
  }
  if (cljs.core.seq.call(null, cljs.core.deref.call(null, ons))) {
    tailrecursion.hoplon.timeout.call(null, function() {
      var seq__12677 = cljs.core.seq.call(null, cljs.core.deref.call(null, ons));
      var chunk__12678 = null;
      var count__12679 = 0;
      var i__12680 = 0;
      while (true) {
        if (i__12680 < count__12679) {
          var vec__12681 = cljs.core._nth.call(null, chunk__12678, i__12680);
          var k = cljs.core.nth.call(null, vec__12681, 0, null);
          var v = cljs.core.nth.call(null, vec__12681, 1, null);
          tailrecursion.hoplon.on_BANG_.call(null, this$, k, v);
          var G__12760 = seq__12677;
          var G__12761 = chunk__12678;
          var G__12762 = count__12679;
          var G__12763 = i__12680 + 1;
          seq__12677 = G__12760;
          chunk__12678 = G__12761;
          count__12679 = G__12762;
          i__12680 = G__12763;
          continue;
        } else {
          var temp__4092__auto__ = cljs.core.seq.call(null, seq__12677);
          if (temp__4092__auto__) {
            var seq__12677__$1 = temp__4092__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__12677__$1)) {
              var c__9036__auto__ = cljs.core.chunk_first.call(null, seq__12677__$1);
              var G__12764 = cljs.core.chunk_rest.call(null, seq__12677__$1);
              var G__12765 = c__9036__auto__;
              var G__12766 = cljs.core.count.call(null, c__9036__auto__);
              var G__12767 = 0;
              seq__12677 = G__12764;
              chunk__12678 = G__12765;
              count__12679 = G__12766;
              i__12680 = G__12767;
              continue;
            } else {
              var vec__12682 = cljs.core.first.call(null, seq__12677__$1);
              var k = cljs.core.nth.call(null, vec__12682, 0, null);
              var v = cljs.core.nth.call(null, vec__12682, 1, null);
              tailrecursion.hoplon.on_BANG_.call(null, this$, k, v);
              var G__12768 = cljs.core.next.call(null, seq__12677__$1);
              var G__12769 = null;
              var G__12770 = 0;
              var G__12771 = 0;
              seq__12677 = G__12768;
              chunk__12678 = G__12769;
              count__12679 = G__12770;
              i__12680 = G__12771;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    });
  } else {
  }
  if (cljs.core.seq.call(null, cljs.core.deref.call(null, dos))) {
    tailrecursion.hoplon.timeout.call(null, function() {
      var seq__12683 = cljs.core.seq.call(null, cljs.core.deref.call(null, dos));
      var chunk__12684 = null;
      var count__12685 = 0;
      var i__12686 = 0;
      while (true) {
        if (i__12686 < count__12685) {
          var vec__12687 = cljs.core._nth.call(null, chunk__12684, i__12686);
          var k = cljs.core.nth.call(null, vec__12687, 0, null);
          var v = cljs.core.nth.call(null, vec__12687, 1, null);
          tailrecursion.hoplon.do_BANG_.call(null, this$, k, cljs.core.deref.call(null, v));
          cljs.core.add_watch.call(null, v, cljs.core.gensym.call(null), function(seq__12683, chunk__12684, count__12685, i__12686, vec__12687, k, v) {
            return function(p1__12634_SHARP_, p2__12635_SHARP_, p3__12636_SHARP_, p4__12633_SHARP_) {
              return tailrecursion.hoplon.do_BANG_.call(null, this$, k, p4__12633_SHARP_);
            };
          }(seq__12683, chunk__12684, count__12685, i__12686, vec__12687, k, v));
          var G__12772 = seq__12683;
          var G__12773 = chunk__12684;
          var G__12774 = count__12685;
          var G__12775 = i__12686 + 1;
          seq__12683 = G__12772;
          chunk__12684 = G__12773;
          count__12685 = G__12774;
          i__12686 = G__12775;
          continue;
        } else {
          var temp__4092__auto__ = cljs.core.seq.call(null, seq__12683);
          if (temp__4092__auto__) {
            var seq__12683__$1 = temp__4092__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__12683__$1)) {
              var c__9036__auto__ = cljs.core.chunk_first.call(null, seq__12683__$1);
              var G__12776 = cljs.core.chunk_rest.call(null, seq__12683__$1);
              var G__12777 = c__9036__auto__;
              var G__12778 = cljs.core.count.call(null, c__9036__auto__);
              var G__12779 = 0;
              seq__12683 = G__12776;
              chunk__12684 = G__12777;
              count__12685 = G__12778;
              i__12686 = G__12779;
              continue;
            } else {
              var vec__12688 = cljs.core.first.call(null, seq__12683__$1);
              var k = cljs.core.nth.call(null, vec__12688, 0, null);
              var v = cljs.core.nth.call(null, vec__12688, 1, null);
              tailrecursion.hoplon.do_BANG_.call(null, this$, k, cljs.core.deref.call(null, v));
              cljs.core.add_watch.call(null, v, cljs.core.gensym.call(null), function(seq__12683, chunk__12684, count__12685, i__12686, vec__12688, k, v, seq__12683__$1, temp__4092__auto__) {
                return function(p1__12634_SHARP_, p2__12635_SHARP_, p3__12636_SHARP_, p4__12633_SHARP_) {
                  return tailrecursion.hoplon.do_BANG_.call(null, this$, k, p4__12633_SHARP_);
                };
              }(seq__12683, chunk__12684, count__12685, i__12686, vec__12688, k, v, seq__12683__$1, temp__4092__auto__));
              var G__12780 = cljs.core.next.call(null, seq__12683__$1);
              var G__12781 = null;
              var G__12782 = 0;
              var G__12783 = 0;
              seq__12683 = G__12780;
              chunk__12684 = G__12781;
              count__12685 = G__12782;
              i__12686 = G__12783;
              continue;
            }
          } else {
            return null;
          }
        }
        break;
      }
    });
  } else {
  }
  return this$;
};
tailrecursion.hoplon.append_child = cljs.core.not.call(null, tailrecursion.hoplon.is_ie8) ? function(p1__12784_SHARP_, p2__12785_SHARP_) {
  return p1__12784_SHARP_.appendChild(p2__12785_SHARP_);
} : function(p1__12786_SHARP_, p2__12787_SHARP_) {
  try {
    return p1__12786_SHARP_.appendChild(p2__12787_SHARP_);
  } catch (e12788) {
    if (e12788 instanceof Error) {
      var _ = e12788;
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e12788;
      } else {
        return null;
      }
    }
  }
};
tailrecursion.hoplon.add_children_BANG_ = function add_children_BANG_(this$, kids) {
  var node = function(p1__12789_SHARP_) {
    if (typeof p1__12789_SHARP_ === "string") {
      return tailrecursion.hoplon.$text.call(null, p1__12789_SHARP_);
    } else {
      if (cljs.core.truth_(tailrecursion.hoplon.node_QMARK_.call(null, p1__12789_SHARP_))) {
        return p1__12789_SHARP_;
      } else {
        return null;
      }
    }
  };
  var seq__12794_12798 = cljs.core.seq.call(null, cljs.core.keep.call(null, node, tailrecursion.hoplon.unsplice.call(null, kids)));
  var chunk__12795_12799 = null;
  var count__12796_12800 = 0;
  var i__12797_12801 = 0;
  while (true) {
    if (i__12797_12801 < count__12796_12800) {
      var x_12802 = cljs.core._nth.call(null, chunk__12795_12799, i__12797_12801);
      tailrecursion.hoplon.append_child.call(null, this$, x_12802);
      var G__12803 = seq__12794_12798;
      var G__12804 = chunk__12795_12799;
      var G__12805 = count__12796_12800;
      var G__12806 = i__12797_12801 + 1;
      seq__12794_12798 = G__12803;
      chunk__12795_12799 = G__12804;
      count__12796_12800 = G__12805;
      i__12797_12801 = G__12806;
      continue;
    } else {
      var temp__4092__auto___12807 = cljs.core.seq.call(null, seq__12794_12798);
      if (temp__4092__auto___12807) {
        var seq__12794_12808__$1 = temp__4092__auto___12807;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12794_12808__$1)) {
          var c__9036__auto___12809 = cljs.core.chunk_first.call(null, seq__12794_12808__$1);
          var G__12810 = cljs.core.chunk_rest.call(null, seq__12794_12808__$1);
          var G__12811 = c__9036__auto___12809;
          var G__12812 = cljs.core.count.call(null, c__9036__auto___12809);
          var G__12813 = 0;
          seq__12794_12798 = G__12810;
          chunk__12795_12799 = G__12811;
          count__12796_12800 = G__12812;
          i__12797_12801 = G__12813;
          continue;
        } else {
          var x_12814 = cljs.core.first.call(null, seq__12794_12808__$1);
          tailrecursion.hoplon.append_child.call(null, this$, x_12814);
          var G__12815 = cljs.core.next.call(null, seq__12794_12808__$1);
          var G__12816 = null;
          var G__12817 = 0;
          var G__12818 = 0;
          seq__12794_12798 = G__12815;
          chunk__12795_12799 = G__12816;
          count__12796_12800 = G__12817;
          i__12797_12801 = G__12818;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return this$;
};
tailrecursion.hoplon.on_append_BANG_ = function on_append_BANG_(this$, f) {
  return this$.hoplonIFn = f;
};
Element.prototype.cljs$core$IFn$ = true;
Element.prototype.call = function() {
  var G__12826__delegate = function(self__, args) {
    var self____$1 = this;
    var this$ = self____$1;
    var vec__12820 = tailrecursion.hoplon.parse_args.call(null, args);
    var attr = cljs.core.nth.call(null, vec__12820, 0, null);
    var kids = cljs.core.nth.call(null, vec__12820, 1, null);
    if (cljs.core.truth_(this$.hoplonIFn)) {
      var G__12821 = this$;
      G__12821.hoplonIFn(attr, kids);
      return G__12821;
    } else {
      var G__12822 = this$;
      tailrecursion.hoplon.add_attributes_BANG_.call(null, G__12822, attr);
      tailrecursion.hoplon.add_children_BANG_.call(null, G__12822, kids);
      return G__12822;
    }
  };
  var G__12826 = function(self__, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return G__12826__delegate.call(this, self__, args);
  };
  G__12826.cljs$lang$maxFixedArity = 1;
  G__12826.cljs$lang$applyTo = function(arglist__12827) {
    var self__ = cljs.core.first(arglist__12827);
    var args = cljs.core.rest(arglist__12827);
    return G__12826__delegate(self__, args);
  };
  G__12826.cljs$core$IFn$_invoke$arity$variadic = G__12826__delegate;
  return G__12826;
}();
Element.prototype.apply = function(self__, args12819) {
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args12819)));
};
Element.prototype.cljs$core$IFn$_invoke$arity$2 = function() {
  var G__12828__delegate = function(args) {
    var this$ = this;
    var vec__12823 = tailrecursion.hoplon.parse_args.call(null, args);
    var attr = cljs.core.nth.call(null, vec__12823, 0, null);
    var kids = cljs.core.nth.call(null, vec__12823, 1, null);
    if (cljs.core.truth_(this$.hoplonIFn)) {
      var G__12824 = this$;
      G__12824.hoplonIFn(attr, kids);
      return G__12824;
    } else {
      var G__12825 = this$;
      tailrecursion.hoplon.add_attributes_BANG_.call(null, G__12825, attr);
      tailrecursion.hoplon.add_children_BANG_.call(null, G__12825, kids);
      return G__12825;
    }
  };
  var G__12828 = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return G__12828__delegate.call(this, args);
  };
  G__12828.cljs$lang$maxFixedArity = 0;
  G__12828.cljs$lang$applyTo = function(arglist__12829) {
    var args = cljs.core.seq(arglist__12829);
    return G__12828__delegate(args);
  };
  G__12828.cljs$core$IFn$_invoke$arity$variadic = G__12828__delegate;
  return G__12828;
}();
Element.prototype.cljs$core$IPrintWithWriter$ = true;
Element.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this$, writer, opts) {
  var this$__$1 = this;
  return cljs.core.write_all.call(null, writer, "#\x3cElement: ", this$__$1.tagName, "\x3e");
};
tailrecursion.hoplon.make_elem_ctor = function make_elem_ctor(tag) {
  return function() {
    var G__12830__delegate = function(args) {
      return cljs.core.apply.call(null, document.createElement(tag), args);
    };
    var G__12830 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__12830__delegate.call(this, args);
    };
    G__12830.cljs$lang$maxFixedArity = 0;
    G__12830.cljs$lang$applyTo = function(arglist__12831) {
      var args = cljs.core.seq(arglist__12831);
      return G__12830__delegate(args);
    };
    G__12830.cljs$core$IFn$_invoke$arity$variadic = G__12830__delegate;
    return G__12830;
  }();
};
tailrecursion.hoplon.a = tailrecursion.hoplon.make_elem_ctor.call(null, "a");
tailrecursion.hoplon.abbr = tailrecursion.hoplon.make_elem_ctor.call(null, "abbr");
tailrecursion.hoplon.acronym = tailrecursion.hoplon.make_elem_ctor.call(null, "acronym");
tailrecursion.hoplon.address = tailrecursion.hoplon.make_elem_ctor.call(null, "address");
tailrecursion.hoplon.applet = tailrecursion.hoplon.make_elem_ctor.call(null, "applet");
tailrecursion.hoplon.area = tailrecursion.hoplon.make_elem_ctor.call(null, "area");
tailrecursion.hoplon.article = tailrecursion.hoplon.make_elem_ctor.call(null, "article");
tailrecursion.hoplon.aside = tailrecursion.hoplon.make_elem_ctor.call(null, "aside");
tailrecursion.hoplon.audio = tailrecursion.hoplon.make_elem_ctor.call(null, "audio");
tailrecursion.hoplon.b = tailrecursion.hoplon.make_elem_ctor.call(null, "b");
tailrecursion.hoplon.base = tailrecursion.hoplon.make_elem_ctor.call(null, "base");
tailrecursion.hoplon.basefont = tailrecursion.hoplon.make_elem_ctor.call(null, "basefont");
tailrecursion.hoplon.bdi = tailrecursion.hoplon.make_elem_ctor.call(null, "bdi");
tailrecursion.hoplon.bdo = tailrecursion.hoplon.make_elem_ctor.call(null, "bdo");
tailrecursion.hoplon.big = tailrecursion.hoplon.make_elem_ctor.call(null, "big");
tailrecursion.hoplon.blockquote = tailrecursion.hoplon.make_elem_ctor.call(null, "blockquote");
tailrecursion.hoplon.body = tailrecursion.hoplon.make_elem_ctor.call(null, "body");
tailrecursion.hoplon.br = tailrecursion.hoplon.make_elem_ctor.call(null, "br");
tailrecursion.hoplon.button = tailrecursion.hoplon.make_elem_ctor.call(null, "button");
tailrecursion.hoplon.canvas = tailrecursion.hoplon.make_elem_ctor.call(null, "canvas");
tailrecursion.hoplon.caption = tailrecursion.hoplon.make_elem_ctor.call(null, "caption");
tailrecursion.hoplon.center = tailrecursion.hoplon.make_elem_ctor.call(null, "center");
tailrecursion.hoplon.cite = tailrecursion.hoplon.make_elem_ctor.call(null, "cite");
tailrecursion.hoplon.code = tailrecursion.hoplon.make_elem_ctor.call(null, "code");
tailrecursion.hoplon.col = tailrecursion.hoplon.make_elem_ctor.call(null, "col");
tailrecursion.hoplon.colgroup = tailrecursion.hoplon.make_elem_ctor.call(null, "colgroup");
tailrecursion.hoplon.command = tailrecursion.hoplon.make_elem_ctor.call(null, "command");
tailrecursion.hoplon.data = tailrecursion.hoplon.make_elem_ctor.call(null, "data");
tailrecursion.hoplon.datalist = tailrecursion.hoplon.make_elem_ctor.call(null, "datalist");
tailrecursion.hoplon.dd = tailrecursion.hoplon.make_elem_ctor.call(null, "dd");
tailrecursion.hoplon.del = tailrecursion.hoplon.make_elem_ctor.call(null, "del");
tailrecursion.hoplon.details = tailrecursion.hoplon.make_elem_ctor.call(null, "details");
tailrecursion.hoplon.dfn = tailrecursion.hoplon.make_elem_ctor.call(null, "dfn");
tailrecursion.hoplon.dir = tailrecursion.hoplon.make_elem_ctor.call(null, "dir");
tailrecursion.hoplon.div = tailrecursion.hoplon.make_elem_ctor.call(null, "div");
tailrecursion.hoplon.dl = tailrecursion.hoplon.make_elem_ctor.call(null, "dl");
tailrecursion.hoplon.dt = tailrecursion.hoplon.make_elem_ctor.call(null, "dt");
tailrecursion.hoplon.em = tailrecursion.hoplon.make_elem_ctor.call(null, "em");
tailrecursion.hoplon.embed = tailrecursion.hoplon.make_elem_ctor.call(null, "embed");
tailrecursion.hoplon.eventsource = tailrecursion.hoplon.make_elem_ctor.call(null, "eventsource");
tailrecursion.hoplon.fieldset = tailrecursion.hoplon.make_elem_ctor.call(null, "fieldset");
tailrecursion.hoplon.figcaption = tailrecursion.hoplon.make_elem_ctor.call(null, "figcaption");
tailrecursion.hoplon.figure = tailrecursion.hoplon.make_elem_ctor.call(null, "figure");
tailrecursion.hoplon.font = tailrecursion.hoplon.make_elem_ctor.call(null, "font");
tailrecursion.hoplon.footer = tailrecursion.hoplon.make_elem_ctor.call(null, "footer");
tailrecursion.hoplon.form = tailrecursion.hoplon.make_elem_ctor.call(null, "form");
tailrecursion.hoplon.frame = tailrecursion.hoplon.make_elem_ctor.call(null, "frame");
tailrecursion.hoplon.frameset = tailrecursion.hoplon.make_elem_ctor.call(null, "frameset");
tailrecursion.hoplon.h1 = tailrecursion.hoplon.make_elem_ctor.call(null, "h1");
tailrecursion.hoplon.h2 = tailrecursion.hoplon.make_elem_ctor.call(null, "h2");
tailrecursion.hoplon.h3 = tailrecursion.hoplon.make_elem_ctor.call(null, "h3");
tailrecursion.hoplon.h4 = tailrecursion.hoplon.make_elem_ctor.call(null, "h4");
tailrecursion.hoplon.h5 = tailrecursion.hoplon.make_elem_ctor.call(null, "h5");
tailrecursion.hoplon.h6 = tailrecursion.hoplon.make_elem_ctor.call(null, "h6");
tailrecursion.hoplon.head = tailrecursion.hoplon.make_elem_ctor.call(null, "head");
tailrecursion.hoplon.header = tailrecursion.hoplon.make_elem_ctor.call(null, "header");
tailrecursion.hoplon.hgroup = tailrecursion.hoplon.make_elem_ctor.call(null, "hgroup");
tailrecursion.hoplon.hr = tailrecursion.hoplon.make_elem_ctor.call(null, "hr");
tailrecursion.hoplon.html = tailrecursion.hoplon.make_elem_ctor.call(null, "html");
tailrecursion.hoplon.i = tailrecursion.hoplon.make_elem_ctor.call(null, "i");
tailrecursion.hoplon.iframe = tailrecursion.hoplon.make_elem_ctor.call(null, "iframe");
tailrecursion.hoplon.img = tailrecursion.hoplon.make_elem_ctor.call(null, "img");
tailrecursion.hoplon.input = tailrecursion.hoplon.make_elem_ctor.call(null, "input");
tailrecursion.hoplon.ins = tailrecursion.hoplon.make_elem_ctor.call(null, "ins");
tailrecursion.hoplon.isindex = tailrecursion.hoplon.make_elem_ctor.call(null, "isindex");
tailrecursion.hoplon.kbd = tailrecursion.hoplon.make_elem_ctor.call(null, "kbd");
tailrecursion.hoplon.keygen = tailrecursion.hoplon.make_elem_ctor.call(null, "keygen");
tailrecursion.hoplon.label = tailrecursion.hoplon.make_elem_ctor.call(null, "label");
tailrecursion.hoplon.legend = tailrecursion.hoplon.make_elem_ctor.call(null, "legend");
tailrecursion.hoplon.li = tailrecursion.hoplon.make_elem_ctor.call(null, "li");
tailrecursion.hoplon.link = tailrecursion.hoplon.make_elem_ctor.call(null, "link");
tailrecursion.hoplon.html_map = tailrecursion.hoplon.make_elem_ctor.call(null, "map");
tailrecursion.hoplon.mark = tailrecursion.hoplon.make_elem_ctor.call(null, "mark");
tailrecursion.hoplon.menu = tailrecursion.hoplon.make_elem_ctor.call(null, "menu");
tailrecursion.hoplon.html_meta = tailrecursion.hoplon.make_elem_ctor.call(null, "meta");
tailrecursion.hoplon.meter = tailrecursion.hoplon.make_elem_ctor.call(null, "meter");
tailrecursion.hoplon.nav = tailrecursion.hoplon.make_elem_ctor.call(null, "nav");
tailrecursion.hoplon.noframes = tailrecursion.hoplon.make_elem_ctor.call(null, "noframes");
tailrecursion.hoplon.noscript = tailrecursion.hoplon.make_elem_ctor.call(null, "noscript");
tailrecursion.hoplon.object = tailrecursion.hoplon.make_elem_ctor.call(null, "object");
tailrecursion.hoplon.ol = tailrecursion.hoplon.make_elem_ctor.call(null, "ol");
tailrecursion.hoplon.optgroup = tailrecursion.hoplon.make_elem_ctor.call(null, "optgroup");
tailrecursion.hoplon.option = tailrecursion.hoplon.make_elem_ctor.call(null, "option");
tailrecursion.hoplon.output = tailrecursion.hoplon.make_elem_ctor.call(null, "output");
tailrecursion.hoplon.p = tailrecursion.hoplon.make_elem_ctor.call(null, "p");
tailrecursion.hoplon.param = tailrecursion.hoplon.make_elem_ctor.call(null, "param");
tailrecursion.hoplon.pre = tailrecursion.hoplon.make_elem_ctor.call(null, "pre");
tailrecursion.hoplon.progress = tailrecursion.hoplon.make_elem_ctor.call(null, "progress");
tailrecursion.hoplon.q = tailrecursion.hoplon.make_elem_ctor.call(null, "q");
tailrecursion.hoplon.rp = tailrecursion.hoplon.make_elem_ctor.call(null, "rp");
tailrecursion.hoplon.rt = tailrecursion.hoplon.make_elem_ctor.call(null, "rt");
tailrecursion.hoplon.ruby = tailrecursion.hoplon.make_elem_ctor.call(null, "ruby");
tailrecursion.hoplon.s = tailrecursion.hoplon.make_elem_ctor.call(null, "s");
tailrecursion.hoplon.samp = tailrecursion.hoplon.make_elem_ctor.call(null, "samp");
tailrecursion.hoplon.script = tailrecursion.hoplon.make_elem_ctor.call(null, "script");
tailrecursion.hoplon.section = tailrecursion.hoplon.make_elem_ctor.call(null, "section");
tailrecursion.hoplon.select = tailrecursion.hoplon.make_elem_ctor.call(null, "select");
tailrecursion.hoplon.small = tailrecursion.hoplon.make_elem_ctor.call(null, "small");
tailrecursion.hoplon.source = tailrecursion.hoplon.make_elem_ctor.call(null, "source");
tailrecursion.hoplon.span = tailrecursion.hoplon.make_elem_ctor.call(null, "span");
tailrecursion.hoplon.strike = tailrecursion.hoplon.make_elem_ctor.call(null, "strike");
tailrecursion.hoplon.strong = tailrecursion.hoplon.make_elem_ctor.call(null, "strong");
tailrecursion.hoplon.style = tailrecursion.hoplon.make_elem_ctor.call(null, "style");
tailrecursion.hoplon.sub = tailrecursion.hoplon.make_elem_ctor.call(null, "sub");
tailrecursion.hoplon.summary = tailrecursion.hoplon.make_elem_ctor.call(null, "summary");
tailrecursion.hoplon.sup = tailrecursion.hoplon.make_elem_ctor.call(null, "sup");
tailrecursion.hoplon.table = tailrecursion.hoplon.make_elem_ctor.call(null, "table");
tailrecursion.hoplon.tbody = tailrecursion.hoplon.make_elem_ctor.call(null, "tbody");
tailrecursion.hoplon.td = tailrecursion.hoplon.make_elem_ctor.call(null, "td");
tailrecursion.hoplon.textarea = tailrecursion.hoplon.make_elem_ctor.call(null, "textarea");
tailrecursion.hoplon.tfoot = tailrecursion.hoplon.make_elem_ctor.call(null, "tfoot");
tailrecursion.hoplon.th = tailrecursion.hoplon.make_elem_ctor.call(null, "th");
tailrecursion.hoplon.thead = tailrecursion.hoplon.make_elem_ctor.call(null, "thead");
tailrecursion.hoplon.html_time = tailrecursion.hoplon.make_elem_ctor.call(null, "time");
tailrecursion.hoplon.title = tailrecursion.hoplon.make_elem_ctor.call(null, "title");
tailrecursion.hoplon.tr = tailrecursion.hoplon.make_elem_ctor.call(null, "tr");
tailrecursion.hoplon.track = tailrecursion.hoplon.make_elem_ctor.call(null, "track");
tailrecursion.hoplon.tt = tailrecursion.hoplon.make_elem_ctor.call(null, "tt");
tailrecursion.hoplon.u = tailrecursion.hoplon.make_elem_ctor.call(null, "u");
tailrecursion.hoplon.ul = tailrecursion.hoplon.make_elem_ctor.call(null, "ul");
tailrecursion.hoplon.html_var = tailrecursion.hoplon.make_elem_ctor.call(null, "var");
tailrecursion.hoplon.video = tailrecursion.hoplon.make_elem_ctor.call(null, "video");
tailrecursion.hoplon.wbr = tailrecursion.hoplon.make_elem_ctor.call(null, "wbr");
tailrecursion.hoplon.spliced = cljs.core.vector;
tailrecursion.hoplon.$text = function $text(p1__12832_SHARP_) {
  return document.createTextNode(p1__12832_SHARP_);
};
tailrecursion.hoplon.$comment = function $comment(p1__12833_SHARP_) {
  return document.createComment(p1__12833_SHARP_);
};
tailrecursion.hoplon.initialized_QMARK_ = cljs.core.atom.call(null, false);
tailrecursion.hoplon._STAR_initfns_STAR_ = cljs.core.atom.call(null, cljs.core.PersistentVector.EMPTY);
tailrecursion.hoplon.add_initfn_BANG_ = function add_initfn_BANG_(f) {
  if (cljs.core.truth_(cljs.core.deref.call(null, tailrecursion.hoplon.initialized_QMARK_))) {
    return f.call(null);
  } else {
    return cljs.core.swap_BANG_.call(null, tailrecursion.hoplon._STAR_initfns_STAR_, cljs.core.conj, f);
  }
};
tailrecursion.hoplon.init = function init(html) {
  return tailrecursion.hoplon.timeout.call(null, function() {
    var body = jQuery("body");
    body.empty();
    var seq__12842_12850 = cljs.core.seq.call(null, html);
    var chunk__12843_12851 = null;
    var count__12844_12852 = 0;
    var i__12845_12853 = 0;
    while (true) {
      if (i__12845_12853 < count__12844_12852) {
        var x_12854 = cljs.core._nth.call(null, chunk__12843_12851, i__12845_12853);
        body.append(x_12854);
        var G__12855 = seq__12842_12850;
        var G__12856 = chunk__12843_12851;
        var G__12857 = count__12844_12852;
        var G__12858 = i__12845_12853 + 1;
        seq__12842_12850 = G__12855;
        chunk__12843_12851 = G__12856;
        count__12844_12852 = G__12857;
        i__12845_12853 = G__12858;
        continue;
      } else {
        var temp__4092__auto___12859 = cljs.core.seq.call(null, seq__12842_12850);
        if (temp__4092__auto___12859) {
          var seq__12842_12860__$1 = temp__4092__auto___12859;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__12842_12860__$1)) {
            var c__9036__auto___12861 = cljs.core.chunk_first.call(null, seq__12842_12860__$1);
            var G__12862 = cljs.core.chunk_rest.call(null, seq__12842_12860__$1);
            var G__12863 = c__9036__auto___12861;
            var G__12864 = cljs.core.count.call(null, c__9036__auto___12861);
            var G__12865 = 0;
            seq__12842_12850 = G__12862;
            chunk__12843_12851 = G__12863;
            count__12844_12852 = G__12864;
            i__12845_12853 = G__12865;
            continue;
          } else {
            var x_12866 = cljs.core.first.call(null, seq__12842_12860__$1);
            body.append(x_12866);
            var G__12867 = cljs.core.next.call(null, seq__12842_12860__$1);
            var G__12868 = null;
            var G__12869 = 0;
            var G__12870 = 0;
            seq__12842_12850 = G__12867;
            chunk__12843_12851 = G__12868;
            count__12844_12852 = G__12869;
            i__12845_12853 = G__12870;
            continue;
          }
        } else {
        }
      }
      break;
    }
    body.on("submit", function(e) {
      return e.preventDefault();
    });
    cljs.core.reset_BANG_.call(null, tailrecursion.hoplon.initialized_QMARK_, true);
    var seq__12846 = cljs.core.seq.call(null, cljs.core.deref.call(null, tailrecursion.hoplon._STAR_initfns_STAR_));
    var chunk__12847 = null;
    var count__12848 = 0;
    var i__12849 = 0;
    while (true) {
      if (i__12849 < count__12848) {
        var f = cljs.core._nth.call(null, chunk__12847, i__12849);
        f.call(null);
        var G__12871 = seq__12846;
        var G__12872 = chunk__12847;
        var G__12873 = count__12848;
        var G__12874 = i__12849 + 1;
        seq__12846 = G__12871;
        chunk__12847 = G__12872;
        count__12848 = G__12873;
        i__12849 = G__12874;
        continue;
      } else {
        var temp__4092__auto__ = cljs.core.seq.call(null, seq__12846);
        if (temp__4092__auto__) {
          var seq__12846__$1 = temp__4092__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__12846__$1)) {
            var c__9036__auto__ = cljs.core.chunk_first.call(null, seq__12846__$1);
            var G__12875 = cljs.core.chunk_rest.call(null, seq__12846__$1);
            var G__12876 = c__9036__auto__;
            var G__12877 = cljs.core.count.call(null, c__9036__auto__);
            var G__12878 = 0;
            seq__12846 = G__12875;
            chunk__12847 = G__12876;
            count__12848 = G__12877;
            i__12849 = G__12878;
            continue;
          } else {
            var f = cljs.core.first.call(null, seq__12846__$1);
            f.call(null);
            var G__12879 = cljs.core.next.call(null, seq__12846__$1);
            var G__12880 = null;
            var G__12881 = 0;
            var G__12882 = 0;
            seq__12846 = G__12879;
            chunk__12847 = G__12880;
            count__12848 = G__12881;
            i__12849 = G__12882;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  });
};
tailrecursion.hoplon.by_id = function by_id(id) {
  return document.getElementById(cljs.core.name.call(null, id));
};
tailrecursion.hoplon.val_id = function val_id(id) {
  return tailrecursion.hoplon.do_BANG_.call(null, tailrecursion.hoplon.by_id.call(null, id), new cljs.core.Keyword(null, "value", "value", 1125876963));
};
tailrecursion.hoplon.rel = function rel(other, event) {
  var os = cljs.core.js__GT_clj.call(null, jQuery(other).offset());
  var ox = os.call(null, "left");
  var oy = os.call(null, "top");
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "x", "x", 1013904362), event.pageX - ox, new cljs.core.Keyword(null, "y", "y", 1013904363), event.pageY - oy], null);
};
tailrecursion.hoplon.relx = function relx(other, event) {
  return(new cljs.core.Keyword(null, "x", "x", 1013904362)).cljs$core$IFn$_invoke$arity$1(tailrecursion.hoplon.rel.call(null, other, event));
};
tailrecursion.hoplon.rely = function rely(other, event) {
  return(new cljs.core.Keyword(null, "y", "y", 1013904363)).cljs$core$IFn$_invoke$arity$1(tailrecursion.hoplon.rel.call(null, other, event));
};
tailrecursion.hoplon.rel_event = function rel_event(rel_to, tag, handler) {
  return function(event) {
    event[[cljs.core.str(tag), cljs.core.str("X")].join("")] = tailrecursion.hoplon.relx.call(null, rel_to, event);
    event[[cljs.core.str(tag), cljs.core.str("Y")].join("")] = tailrecursion.hoplon.rely.call(null, rel_to, event);
    return handler.call(null, event);
  };
};
tailrecursion.hoplon.text_val_BANG_ = function() {
  var text_val_BANG_ = null;
  var text_val_BANG___1 = function(e) {
    return e.val();
  };
  var text_val_BANG___2 = function(e, v) {
    return e.val([cljs.core.str(v)].join("")).trigger("change");
  };
  text_val_BANG_ = function(e, v) {
    switch(arguments.length) {
      case 1:
        return text_val_BANG___1.call(this, e);
      case 2:
        return text_val_BANG___2.call(this, e, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  text_val_BANG_.cljs$core$IFn$_invoke$arity$1 = text_val_BANG___1;
  text_val_BANG_.cljs$core$IFn$_invoke$arity$2 = text_val_BANG___2;
  return text_val_BANG_;
}();
tailrecursion.hoplon.check_val_BANG_ = function() {
  var check_val_BANG_ = null;
  var check_val_BANG___1 = function(e) {
    return e.is(":checked");
  };
  var check_val_BANG___2 = function(e, v) {
    return e.prop("checked", cljs.core.boolean$.call(null, v)).trigger("change");
  };
  check_val_BANG_ = function(e, v) {
    switch(arguments.length) {
      case 1:
        return check_val_BANG___1.call(this, e);
      case 2:
        return check_val_BANG___2.call(this, e, v);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  check_val_BANG_.cljs$core$IFn$_invoke$arity$1 = check_val_BANG___1;
  check_val_BANG_.cljs$core$IFn$_invoke$arity$2 = check_val_BANG___2;
  return check_val_BANG_;
}();
tailrecursion.hoplon.do_BANG_ = function() {
  var method_table__9146__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__9147__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__9148__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__9149__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__9150__auto__ = cljs.core.get.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "default", "default", 2558708147), new cljs.core.Keyword("tailrecursion.hoplon", "default", "tailrecursion.hoplon/default", 1265562704)], null), new cljs.core.Keyword(null, "hierarchy", "hierarchy", 3129050535), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn("do!", function() {
    var G__12883__delegate = function(elem, action, args) {
      return action;
    };
    var G__12883 = function(elem, action, var_args) {
      var args = null;
      if (arguments.length > 2) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__12883__delegate.call(this, elem, action, args);
    };
    G__12883.cljs$lang$maxFixedArity = 2;
    G__12883.cljs$lang$applyTo = function(arglist__12884) {
      var elem = cljs.core.first(arglist__12884);
      arglist__12884 = cljs.core.next(arglist__12884);
      var action = cljs.core.first(arglist__12884);
      var args = cljs.core.rest(arglist__12884);
      return G__12883__delegate(elem, action, args);
    };
    G__12883.cljs$core$IFn$_invoke$arity$variadic = G__12883__delegate;
    return G__12883;
  }(), new cljs.core.Keyword("tailrecursion.hoplon", "default", "tailrecursion.hoplon/default", 1265562704), hierarchy__9150__auto__, method_table__9146__auto__, prefer_table__9147__auto__, method_cache__9148__auto__, cached_hierarchy__9149__auto__);
}();
cljs.core._add_method.call(null, tailrecursion.hoplon.do_BANG_, new cljs.core.Keyword("tailrecursion.hoplon", "default", "tailrecursion.hoplon/default", 1265562704), function() {
  var G__12887__delegate = function(elem, key, p__12885) {
    var vec__12886 = p__12885;
    var val = cljs.core.nth.call(null, vec__12886, 0, null);
    return tailrecursion.hoplon.do_BANG_.call(null, elem, new cljs.core.Keyword(null, "attr", "attr", 1016909155), new cljs.core.PersistentArrayMap.fromArray([key, val], true, false));
  };
  var G__12887 = function(elem, key, var_args) {
    var p__12885 = null;
    if (arguments.length > 2) {
      p__12885 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return G__12887__delegate.call(this, elem, key, p__12885);
  };
  G__12887.cljs$lang$maxFixedArity = 2;
  G__12887.cljs$lang$applyTo = function(arglist__12888) {
    var elem = cljs.core.first(arglist__12888);
    arglist__12888 = cljs.core.next(arglist__12888);
    var key = cljs.core.first(arglist__12888);
    var p__12885 = cljs.core.rest(arglist__12888);
    return G__12887__delegate(elem, key, p__12885);
  };
  G__12887.cljs$core$IFn$_invoke$arity$variadic = G__12887__delegate;
  return G__12887;
}());
cljs.core._add_method.call(null, tailrecursion.hoplon.do_BANG_, new cljs.core.Keyword(null, "value", "value", 1125876963), function() {
  var G__12889__delegate = function(elem, _, args) {
    var e = jQuery(elem);
    return cljs.core.apply.call(null, cljs.core._EQ_.call(null, "checkbox", e.attr("type")) ? tailrecursion.hoplon.check_val_BANG_ : tailrecursion.hoplon.text_val_BANG_, e, args);
  };
  var G__12889 = function(elem, _, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return G__12889__delegate.call(this, elem, _, args);
  };
  G__12889.cljs$lang$maxFixedArity = 2;
  G__12889.cljs$lang$applyTo = function(arglist__12890) {
    var elem = cljs.core.first(arglist__12890);
    arglist__12890 = cljs.core.next(arglist__12890);
    var _ = cljs.core.first(arglist__12890);
    var args = cljs.core.rest(arglist__12890);
    return G__12889__delegate(elem, _, args);
  };
  G__12889.cljs$core$IFn$_invoke$arity$variadic = G__12889__delegate;
  return G__12889;
}());
cljs.core._add_method.call(null, tailrecursion.hoplon.do_BANG_, new cljs.core.Keyword(null, "attr", "attr", 1016909155), function(elem, _, kvs) {
  return elem.call(null, kvs);
});
cljs.core._add_method.call(null, tailrecursion.hoplon.do_BANG_, new cljs.core.Keyword(null, "class", "class", 1108647146), function(elem, _, kvs) {
  var elem__$1 = jQuery(elem);
  var seq__12891 = cljs.core.seq.call(null, kvs);
  var chunk__12892 = null;
  var count__12893 = 0;
  var i__12894 = 0;
  while (true) {
    if (i__12894 < count__12893) {
      var vec__12895 = cljs.core._nth.call(null, chunk__12892, i__12894);
      var c = cljs.core.nth.call(null, vec__12895, 0, null);
      var p_QMARK_ = cljs.core.nth.call(null, vec__12895, 1, null);
      elem__$1.toggleClass(cljs.core.name.call(null, c), cljs.core.boolean$.call(null, p_QMARK_));
      var G__12897 = seq__12891;
      var G__12898 = chunk__12892;
      var G__12899 = count__12893;
      var G__12900 = i__12894 + 1;
      seq__12891 = G__12897;
      chunk__12892 = G__12898;
      count__12893 = G__12899;
      i__12894 = G__12900;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__12891);
      if (temp__4092__auto__) {
        var seq__12891__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12891__$1)) {
          var c__9036__auto__ = cljs.core.chunk_first.call(null, seq__12891__$1);
          var G__12901 = cljs.core.chunk_rest.call(null, seq__12891__$1);
          var G__12902 = c__9036__auto__;
          var G__12903 = cljs.core.count.call(null, c__9036__auto__);
          var G__12904 = 0;
          seq__12891 = G__12901;
          chunk__12892 = G__12902;
          count__12893 = G__12903;
          i__12894 = G__12904;
          continue;
        } else {
          var vec__12896 = cljs.core.first.call(null, seq__12891__$1);
          var c = cljs.core.nth.call(null, vec__12896, 0, null);
          var p_QMARK_ = cljs.core.nth.call(null, vec__12896, 1, null);
          elem__$1.toggleClass(cljs.core.name.call(null, c), cljs.core.boolean$.call(null, p_QMARK_));
          var G__12905 = cljs.core.next.call(null, seq__12891__$1);
          var G__12906 = null;
          var G__12907 = 0;
          var G__12908 = 0;
          seq__12891 = G__12905;
          chunk__12892 = G__12906;
          count__12893 = G__12907;
          i__12894 = G__12908;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
});
cljs.core._add_method.call(null, tailrecursion.hoplon.do_BANG_, new cljs.core.Keyword(null, "css", "css", 1014003061), function(elem, _, kvs) {
  var e = jQuery(elem);
  var seq__12909 = cljs.core.seq.call(null, kvs);
  var chunk__12910 = null;
  var count__12911 = 0;
  var i__12912 = 0;
  while (true) {
    if (i__12912 < count__12911) {
      var vec__12913 = cljs.core._nth.call(null, chunk__12910, i__12912);
      var k = cljs.core.nth.call(null, vec__12913, 0, null);
      var v = cljs.core.nth.call(null, vec__12913, 1, null);
      e.css(cljs.core.name.call(null, k), [cljs.core.str(v)].join(""));
      var G__12915 = seq__12909;
      var G__12916 = chunk__12910;
      var G__12917 = count__12911;
      var G__12918 = i__12912 + 1;
      seq__12909 = G__12915;
      chunk__12910 = G__12916;
      count__12911 = G__12917;
      i__12912 = G__12918;
      continue;
    } else {
      var temp__4092__auto__ = cljs.core.seq.call(null, seq__12909);
      if (temp__4092__auto__) {
        var seq__12909__$1 = temp__4092__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__12909__$1)) {
          var c__9036__auto__ = cljs.core.chunk_first.call(null, seq__12909__$1);
          var G__12919 = cljs.core.chunk_rest.call(null, seq__12909__$1);
          var G__12920 = c__9036__auto__;
          var G__12921 = cljs.core.count.call(null, c__9036__auto__);
          var G__12922 = 0;
          seq__12909 = G__12919;
          chunk__12910 = G__12920;
          count__12911 = G__12921;
          i__12912 = G__12922;
          continue;
        } else {
          var vec__12914 = cljs.core.first.call(null, seq__12909__$1);
          var k = cljs.core.nth.call(null, vec__12914, 0, null);
          var v = cljs.core.nth.call(null, vec__12914, 1, null);
          e.css(cljs.core.name.call(null, k), [cljs.core.str(v)].join(""));
          var G__12923 = cljs.core.next.call(null, seq__12909__$1);
          var G__12924 = null;
          var G__12925 = 0;
          var G__12926 = 0;
          seq__12909 = G__12923;
          chunk__12910 = G__12924;
          count__12911 = G__12925;
          i__12912 = G__12926;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
});
cljs.core._add_method.call(null, tailrecursion.hoplon.do_BANG_, new cljs.core.Keyword(null, "toggle", "toggle", 4440567494), function(elem, _, v) {
  return jQuery(elem).toggle(cljs.core.boolean$.call(null, v));
});
cljs.core._add_method.call(null, tailrecursion.hoplon.do_BANG_, new cljs.core.Keyword(null, "slide-toggle", "slide-toggle", 3005235810), function(elem, _, v) {
  if (cljs.core.truth_(v)) {
    return jQuery(elem).hide().slideDown("fast");
  } else {
    return jQuery(elem).slideUp("fast");
  }
});
cljs.core._add_method.call(null, tailrecursion.hoplon.do_BANG_, new cljs.core.Keyword(null, "fade-toggle", "fade-toggle", 514539319), function(elem, _, v) {
  if (cljs.core.truth_(v)) {
    return jQuery(elem).hide().fadeIn("fast");
  } else {
    return jQuery(elem).fadeOut("fast");
  }
});
cljs.core._add_method.call(null, tailrecursion.hoplon.do_BANG_, new cljs.core.Keyword(null, "focus", "focus", 1111509066), function(elem, _, v) {
  if (cljs.core.truth_(v)) {
    return tailrecursion.hoplon.timeout.call(null, function() {
      return jQuery(elem).focus();
    });
  } else {
    return tailrecursion.hoplon.timeout.call(null, function() {
      return jQuery(elem).focusout();
    });
  }
});
cljs.core._add_method.call(null, tailrecursion.hoplon.do_BANG_, new cljs.core.Keyword(null, "select", "select", 4402849902), function(elem, _, ___$1) {
  return jQuery(elem).select();
});
cljs.core._add_method.call(null, tailrecursion.hoplon.do_BANG_, new cljs.core.Keyword(null, "focus-select", "focus-select", 3635190531), function(elem, _, v) {
  if (cljs.core.truth_(v)) {
    tailrecursion.hoplon.do_BANG_.call(null, elem, new cljs.core.Keyword(null, "focus", "focus", 1111509066), v);
    return tailrecursion.hoplon.do_BANG_.call(null, elem, new cljs.core.Keyword(null, "select", "select", 4402849902), v);
  } else {
    return null;
  }
});
cljs.core._add_method.call(null, tailrecursion.hoplon.do_BANG_, new cljs.core.Keyword(null, "text", "text", 1017460895), function(elem, _, v) {
  return jQuery(elem).text([cljs.core.str(v)].join(""));
});
cljs.core._add_method.call(null, tailrecursion.hoplon.do_BANG_, new cljs.core.Keyword(null, "scroll-to", "scroll-to", 1431647469), function(elem, _, v) {
  if (cljs.core.truth_(v)) {
    var body = jQuery("body");
    var elem__$1 = jQuery(elem);
    return body.animate(cljs.core.clj__GT_js.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "scrollTop", "scrollTop", 1431684794), elem__$1.offset().top], null)));
  } else {
    return null;
  }
});
tailrecursion.hoplon.on_BANG_ = function on_BANG_(elem, event, callback) {
  return tailrecursion.hoplon.when_dom.call(null, elem, function() {
    return jQuery(elem).on(cljs.core.name.call(null, event), callback);
  });
};
tailrecursion.hoplon.loop_tpl_STAR_ = function loop_tpl_STAR_(items, reverse_QMARK_, tpl) {
  var pool_size = tailrecursion.javelin.cell.call(null, 0);
  var items_seq = tailrecursion.javelin.lift.call(null, function(pool_size) {
    return function(G__12953, G__12952) {
      return G__12952.call(null, G__12953);
    };
  }(pool_size)).call(null, items, cljs.core.seq);
  var cur_count = tailrecursion.javelin.lift.call(null, function(pool_size, items_seq) {
    return function(G__12954, G__12955) {
      return G__12954.call(null, G__12955);
    };
  }(pool_size, items_seq)).call(null, cljs.core.count, items_seq);
  var show_ith_QMARK_ = function(pool_size, items_seq, cur_count) {
    return function(p1__12927_SHARP_) {
      return tailrecursion.javelin.lift.call(null, function(pool_size, items_seq, cur_count) {
        return function(G__12957, G__12956) {
          return G__12956 < G__12957;
        };
      }(pool_size, items_seq, cur_count)).call(null, cur_count, p1__12927_SHARP_);
    };
  }(pool_size, items_seq, cur_count);
  var ith_item = function(pool_size, items_seq, cur_count, show_ith_QMARK_) {
    return function(p1__12928_SHARP_) {
      return tailrecursion.javelin.lift.call(null, function(pool_size, items_seq, cur_count, show_ith_QMARK_) {
        return function(G__12958, G__12960, G__12959) {
          return G__12958.call(null, G__12959, G__12960);
        };
      }(pool_size, items_seq, cur_count, show_ith_QMARK_)).call(null, tailrecursion.hoplon.safe_nth, p1__12928_SHARP_, items_seq);
    };
  }(pool_size, items_seq, cur_count, show_ith_QMARK_);
  var d = tailrecursion.hoplon.span.call(null);
  tailrecursion.hoplon.when_dom.call(null, d, function() {
    var p = d.parentNode;
    p.removeChild(d);
    return tailrecursion.javelin.lift.call(null, function(G__12974, G__12972, G__12968, G__12969, G__12966, G__12970, G__12965, G__12967, G__12973, G__12971) {
      if (cljs.core.truth_(G__12965 < G__12966)) {
        var seq__12961_12975 = cljs.core.seq.call(null, G__12967.call(null, G__12965, G__12966));
        var chunk__12962_12976 = null;
        var count__12963_12977 = 0;
        var i__12964_12978 = 0;
        while (true) {
          if (cljs.core.truth_(i__12964_12978 < count__12963_12977)) {
            var i_12979 = cljs.core._nth.call(null, chunk__12962_12976, i__12964_12978);
            var e_12980 = G__12968.call(null, G__12969.call(null, i_12979)).call(null, new cljs.core.Keyword(null, "do-toggle", "do-toggle", 1250159176), G__12970.call(null, i_12979));
            if (cljs.core.not.call(null, G__12971)) {
              G__12972.appendChild(e_12980);
            } else {
              G__12972.insertBefore(e_12980, G__12972.firstChild);
            }
            var G__12981 = seq__12961_12975;
            var G__12982 = chunk__12962_12976;
            var G__12983 = count__12963_12977;
            var G__12984 = i__12964_12978 + 1;
            seq__12961_12975 = G__12981;
            chunk__12962_12976 = G__12982;
            count__12963_12977 = G__12983;
            i__12964_12978 = G__12984;
            continue;
          } else {
            var temp__4092__auto___12985 = cljs.core.seq.call(null, seq__12961_12975);
            if (temp__4092__auto___12985) {
              var seq__12961_12986__$1 = temp__4092__auto___12985;
              if (cljs.core.chunked_seq_QMARK_.call(null, seq__12961_12986__$1)) {
                var c__9036__auto___12987 = cljs.core.chunk_first.call(null, seq__12961_12986__$1);
                var G__12988 = cljs.core.chunk_rest.call(null, seq__12961_12986__$1);
                var G__12989 = c__9036__auto___12987;
                var G__12990 = cljs.core.count.call(null, c__9036__auto___12987);
                var G__12991 = 0;
                seq__12961_12975 = G__12988;
                chunk__12962_12976 = G__12989;
                count__12963_12977 = G__12990;
                i__12964_12978 = G__12991;
                continue;
              } else {
                var i_12992 = cljs.core.first.call(null, seq__12961_12986__$1);
                var e_12993 = G__12968.call(null, G__12969.call(null, i_12992)).call(null, new cljs.core.Keyword(null, "do-toggle", "do-toggle", 1250159176), G__12970.call(null, i_12992));
                if (cljs.core.not.call(null, G__12971)) {
                  G__12972.appendChild(e_12993);
                } else {
                  G__12972.insertBefore(e_12993, G__12972.firstChild);
                }
                var G__12994 = cljs.core.next.call(null, seq__12961_12986__$1);
                var G__12995 = null;
                var G__12996 = 0;
                var G__12997 = 0;
                seq__12961_12975 = G__12994;
                chunk__12962_12976 = G__12995;
                count__12963_12977 = G__12996;
                i__12964_12978 = G__12997;
                continue;
              }
            } else {
            }
          }
          break;
        }
        return G__12973.call(null, G__12974, G__12966);
      } else {
        return null;
      }
    }).call(null, tailrecursion.javelin.cell.call(null, pool_size), p, tpl, ith_item, cur_count, show_ith_QMARK_, pool_size, cljs.core.range, cljs.core.reset_BANG_, reverse_QMARK_);
  });
  return d;
};
goog.provide("bootstrap.tabs");
goog.require("cljs.core");
goog.require("tailrecursion.javelin");
goog.require("tailrecursion.hoplon");
goog.require("tailrecursion.hoplon");
goog.require("tailrecursion.javelin");
bootstrap.tabs.active = function() {
  var active__delegate = function(args__2385__auto__) {
    var vec__20726 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var map__20727 = cljs.core.nth.call(null, vec__20726, 0, null);
    var map__20727__$1 = cljs.core.seq_QMARK_.call(null, map__20727) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20727) : map__20727;
    var state = cljs.core.get.call(null, map__20727__$1, new cljs.core.Keyword(null, "state", "state", 1123661827));
    var vec__20728 = cljs.core.nth.call(null, vec__20726, 1, null);
    var elem = cljs.core.nth.call(null, vec__20728, 0, null);
    return elem.call(null, new cljs.core.Keyword(null, "do-class", "do-class", 4607961384), tailrecursion.javelin.lift.call(null, function(G__20729) {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "active", "active", 3885920888), G__20729], null);
    }).call(null, state));
  };
  var active = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return active__delegate.call(this, args__2385__auto__);
  };
  active.cljs$lang$maxFixedArity = 0;
  active.cljs$lang$applyTo = function(arglist__20730) {
    var args__2385__auto__ = cljs.core.seq(arglist__20730);
    return active__delegate(args__2385__auto__);
  };
  active.cljs$core$IFn$_invoke$arity$variadic = active__delegate;
  return active;
}();
bootstrap.tabs.trigger = function() {
  var trigger__delegate = function(args__2385__auto__) {
    var vec__20737 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var map__20738 = cljs.core.nth.call(null, vec__20737, 0, null);
    var map__20738__$1 = cljs.core.seq_QMARK_.call(null, map__20738) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20738) : map__20738;
    var tab = cljs.core.get.call(null, map__20738__$1, new cljs.core.Keyword(null, "tab", "tab", 1014018823));
    var for$ = cljs.core.get.call(null, map__20738__$1, new cljs.core.Keyword(null, "for", "for", 1014005819));
    var vec__20739 = cljs.core.nth.call(null, vec__20737, 1, null);
    var elem = cljs.core.nth.call(null, vec__20739, 0, null);
    return bootstrap.tabs.active.call(null, new cljs.core.Keyword(null, "state", "state", 1123661827), tailrecursion.javelin.lift.call(null, function(G__20741, G__20742, G__20740) {
      return G__20740.call(null, G__20741, G__20742);
    }).call(null, for$, tab, cljs.core._EQ_), elem.call(null, new cljs.core.Keyword(null, "on-click", "on-click", 1416542092), function() {
      return cljs.core.reset_BANG_.call(null, for$, tab);
    }));
  };
  var trigger = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return trigger__delegate.call(this, args__2385__auto__);
  };
  trigger.cljs$lang$maxFixedArity = 0;
  trigger.cljs$lang$applyTo = function(arglist__20743) {
    var args__2385__auto__ = cljs.core.seq(arglist__20743);
    return trigger__delegate(args__2385__auto__);
  };
  trigger.cljs$core$IFn$_invoke$arity$variadic = trigger__delegate;
  return trigger;
}();
bootstrap.tabs.content = function() {
  var content__delegate = function(args__2385__auto__) {
    var vec__20750 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var map__20751 = cljs.core.nth.call(null, vec__20750, 0, null);
    var map__20751__$1 = cljs.core.seq_QMARK_.call(null, map__20751) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20751) : map__20751;
    var tab = cljs.core.get.call(null, map__20751__$1, new cljs.core.Keyword(null, "tab", "tab", 1014018823));
    var for$ = cljs.core.get.call(null, map__20751__$1, new cljs.core.Keyword(null, "for", "for", 1014005819));
    var vec__20752 = cljs.core.nth.call(null, vec__20750, 1, null);
    var elem = cljs.core.nth.call(null, vec__20752, 0, null);
    return bootstrap.tabs.active.call(null, new cljs.core.Keyword(null, "state", "state", 1123661827), tailrecursion.javelin.lift.call(null, function(G__20754, G__20755, G__20753) {
      return G__20753.call(null, G__20754, G__20755);
    }).call(null, for$, tab, cljs.core._EQ_), elem);
  };
  var content = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return content__delegate.call(this, args__2385__auto__);
  };
  content.cljs$lang$maxFixedArity = 0;
  content.cljs$lang$applyTo = function(arglist__20756) {
    var args__2385__auto__ = cljs.core.seq(arglist__20756);
    return content__delegate(args__2385__auto__);
  };
  content.cljs$core$IFn$_invoke$arity$variadic = content__delegate;
  return content;
}();
bootstrap.tabs.tabs = function() {
  var tabs__delegate = function(args__2385__auto__) {
    var vec__20765 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var map__20766 = cljs.core.nth.call(null, vec__20765, 0, null);
    var map__20766__$1 = cljs.core.seq_QMARK_.call(null, map__20766) ? cljs.core.apply.call(null, cljs.core.hash_map, map__20766) : map__20766;
    var attr = map__20766__$1;
    var type = cljs.core.get.call(null, map__20766__$1, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "tabs", "tabs", 1017456368));
    var state = cljs.core.get.call(null, map__20766__$1, new cljs.core.Keyword(null, "state", "state", 1123661827), tailrecursion.javelin.cell.call(null, 0));
    var kids = cljs.core.nth.call(null, vec__20765, 1, null);
    var ctnr = tailrecursion.hoplon.div.call(null, cljs.core.dissoc.call(null, attr, new cljs.core.Keyword(null, "state", "state", 1123661827)));
    var vec__20767 = cljs.core.apply.call(null, cljs.core.map, cljs.core.list, cljs.core.partition.call(null, 2, kids));
    var trigs = cljs.core.nth.call(null, vec__20767, 0, null);
    var conts = cljs.core.nth.call(null, vec__20767, 1, null);
    var tclass = [cljs.core.str("nav nav-"), cljs.core.str(cljs.core.name.call(null, type))].join("");
    var a_void = function(ctnr, vec__20767, trigs, conts, tclass) {
      return function(p1__20757_SHARP_) {
        return tailrecursion.hoplon.a.call(null, new cljs.core.Keyword(null, "href", "href", 1017115293), "javascript:void(0)", p1__20757_SHARP_);
      };
    }(ctnr, vec__20767, trigs, conts, tclass);
    var mktrig = function(ctnr, vec__20767, trigs, conts, tclass, a_void) {
      return function(p1__20758_SHARP_, p2__20759_SHARP_) {
        return bootstrap.tabs.trigger.call(null, new cljs.core.Keyword(null, "for", "for", 1014005819), state, new cljs.core.Keyword(null, "tab", "tab", 1014018823), p1__20758_SHARP_, tailrecursion.hoplon.li.call(null, a_void.call(null, p2__20759_SHARP_)));
      };
    }(ctnr, vec__20767, trigs, conts, tclass, a_void);
    var mkcont = function(ctnr, vec__20767, trigs, conts, tclass, a_void, mktrig) {
      return function(p1__20760_SHARP_, p2__20761_SHARP_) {
        return bootstrap.tabs.content.call(null, new cljs.core.Keyword(null, "for", "for", 1014005819), state, new cljs.core.Keyword(null, "tab", "tab", 1014018823), p1__20760_SHARP_, p2__20761_SHARP_.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "tab-pane"));
      };
    }(ctnr, vec__20767, trigs, conts, tclass, a_void, mktrig);
    var tab_bar = tailrecursion.hoplon.ul.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), tclass, cljs.core.map_indexed.call(null, mktrig, trigs));
    var content = tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "tab-content", cljs.core.map_indexed.call(null, mkcont, conts));
    return tailrecursion.hoplon.div.call(null, cljs.core.dissoc.call(null, attr, new cljs.core.Keyword(null, "state", "state", 1123661827)), tab_bar, content);
  };
  var tabs = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return tabs__delegate.call(this, args__2385__auto__);
  };
  tabs.cljs$lang$maxFixedArity = 0;
  tabs.cljs$lang$applyTo = function(arglist__20768) {
    var args__2385__auto__ = cljs.core.seq(arglist__20768);
    return tabs__delegate(args__2385__auto__);
  };
  tabs.cljs$core$IFn$_invoke$arity$variadic = tabs__delegate;
  return tabs;
}();
goog.provide("bootstrap.grid");
goog.require("cljs.core");
goog.require("tailrecursion.javelin");
goog.require("tailrecursion.hoplon");
goog.require("tailrecursion.hoplon");
goog.require("tailrecursion.javelin");
bootstrap.grid.row = function() {
  var row__delegate = function(args__2385__auto__) {
    var vec__20614 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20614, 0, null);
    var kids = cljs.core.nth.call(null, vec__20614, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "row"), attr, kids);
  };
  var row = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return row__delegate.call(this, args__2385__auto__);
  };
  row.cljs$lang$maxFixedArity = 0;
  row.cljs$lang$applyTo = function(arglist__20615) {
    var args__2385__auto__ = cljs.core.seq(arglist__20615);
    return row__delegate(args__2385__auto__);
  };
  row.cljs$core$IFn$_invoke$arity$variadic = row__delegate;
  return row;
}();
bootstrap.grid.col1 = function() {
  var col1__delegate = function(args__2385__auto__) {
    var vec__20617 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20617, 0, null);
    var kids = cljs.core.nth.call(null, vec__20617, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "col-md-1"), attr, kids);
  };
  var col1 = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return col1__delegate.call(this, args__2385__auto__);
  };
  col1.cljs$lang$maxFixedArity = 0;
  col1.cljs$lang$applyTo = function(arglist__20618) {
    var args__2385__auto__ = cljs.core.seq(arglist__20618);
    return col1__delegate(args__2385__auto__);
  };
  col1.cljs$core$IFn$_invoke$arity$variadic = col1__delegate;
  return col1;
}();
bootstrap.grid.col2 = function() {
  var col2__delegate = function(args__2385__auto__) {
    var vec__20620 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20620, 0, null);
    var kids = cljs.core.nth.call(null, vec__20620, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "col-md-2"), attr, kids);
  };
  var col2 = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return col2__delegate.call(this, args__2385__auto__);
  };
  col2.cljs$lang$maxFixedArity = 0;
  col2.cljs$lang$applyTo = function(arglist__20621) {
    var args__2385__auto__ = cljs.core.seq(arglist__20621);
    return col2__delegate(args__2385__auto__);
  };
  col2.cljs$core$IFn$_invoke$arity$variadic = col2__delegate;
  return col2;
}();
bootstrap.grid.col3 = function() {
  var col3__delegate = function(args__2385__auto__) {
    var vec__20623 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20623, 0, null);
    var kids = cljs.core.nth.call(null, vec__20623, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "col-md-3"), attr, kids);
  };
  var col3 = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return col3__delegate.call(this, args__2385__auto__);
  };
  col3.cljs$lang$maxFixedArity = 0;
  col3.cljs$lang$applyTo = function(arglist__20624) {
    var args__2385__auto__ = cljs.core.seq(arglist__20624);
    return col3__delegate(args__2385__auto__);
  };
  col3.cljs$core$IFn$_invoke$arity$variadic = col3__delegate;
  return col3;
}();
bootstrap.grid.col4 = function() {
  var col4__delegate = function(args__2385__auto__) {
    var vec__20626 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20626, 0, null);
    var kids = cljs.core.nth.call(null, vec__20626, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "col-md-4"), attr, kids);
  };
  var col4 = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return col4__delegate.call(this, args__2385__auto__);
  };
  col4.cljs$lang$maxFixedArity = 0;
  col4.cljs$lang$applyTo = function(arglist__20627) {
    var args__2385__auto__ = cljs.core.seq(arglist__20627);
    return col4__delegate(args__2385__auto__);
  };
  col4.cljs$core$IFn$_invoke$arity$variadic = col4__delegate;
  return col4;
}();
bootstrap.grid.col5 = function() {
  var col5__delegate = function(args__2385__auto__) {
    var vec__20629 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20629, 0, null);
    var kids = cljs.core.nth.call(null, vec__20629, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "col-md-5"), attr, kids);
  };
  var col5 = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return col5__delegate.call(this, args__2385__auto__);
  };
  col5.cljs$lang$maxFixedArity = 0;
  col5.cljs$lang$applyTo = function(arglist__20630) {
    var args__2385__auto__ = cljs.core.seq(arglist__20630);
    return col5__delegate(args__2385__auto__);
  };
  col5.cljs$core$IFn$_invoke$arity$variadic = col5__delegate;
  return col5;
}();
bootstrap.grid.col6 = function() {
  var col6__delegate = function(args__2385__auto__) {
    var vec__20632 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20632, 0, null);
    var kids = cljs.core.nth.call(null, vec__20632, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "col-md-6"), attr, kids);
  };
  var col6 = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return col6__delegate.call(this, args__2385__auto__);
  };
  col6.cljs$lang$maxFixedArity = 0;
  col6.cljs$lang$applyTo = function(arglist__20633) {
    var args__2385__auto__ = cljs.core.seq(arglist__20633);
    return col6__delegate(args__2385__auto__);
  };
  col6.cljs$core$IFn$_invoke$arity$variadic = col6__delegate;
  return col6;
}();
bootstrap.grid.col7 = function() {
  var col7__delegate = function(args__2385__auto__) {
    var vec__20635 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20635, 0, null);
    var kids = cljs.core.nth.call(null, vec__20635, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "col-md-7"), attr, kids);
  };
  var col7 = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return col7__delegate.call(this, args__2385__auto__);
  };
  col7.cljs$lang$maxFixedArity = 0;
  col7.cljs$lang$applyTo = function(arglist__20636) {
    var args__2385__auto__ = cljs.core.seq(arglist__20636);
    return col7__delegate(args__2385__auto__);
  };
  col7.cljs$core$IFn$_invoke$arity$variadic = col7__delegate;
  return col7;
}();
bootstrap.grid.col8 = function() {
  var col8__delegate = function(args__2385__auto__) {
    var vec__20638 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20638, 0, null);
    var kids = cljs.core.nth.call(null, vec__20638, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "col-md-8"), attr, kids);
  };
  var col8 = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return col8__delegate.call(this, args__2385__auto__);
  };
  col8.cljs$lang$maxFixedArity = 0;
  col8.cljs$lang$applyTo = function(arglist__20639) {
    var args__2385__auto__ = cljs.core.seq(arglist__20639);
    return col8__delegate(args__2385__auto__);
  };
  col8.cljs$core$IFn$_invoke$arity$variadic = col8__delegate;
  return col8;
}();
bootstrap.grid.col9 = function() {
  var col9__delegate = function(args__2385__auto__) {
    var vec__20641 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20641, 0, null);
    var kids = cljs.core.nth.call(null, vec__20641, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "col-md-9"), attr, kids);
  };
  var col9 = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return col9__delegate.call(this, args__2385__auto__);
  };
  col9.cljs$lang$maxFixedArity = 0;
  col9.cljs$lang$applyTo = function(arglist__20642) {
    var args__2385__auto__ = cljs.core.seq(arglist__20642);
    return col9__delegate(args__2385__auto__);
  };
  col9.cljs$core$IFn$_invoke$arity$variadic = col9__delegate;
  return col9;
}();
bootstrap.grid.col10 = function() {
  var col10__delegate = function(args__2385__auto__) {
    var vec__20644 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20644, 0, null);
    var kids = cljs.core.nth.call(null, vec__20644, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "col-md-10"), attr, kids);
  };
  var col10 = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return col10__delegate.call(this, args__2385__auto__);
  };
  col10.cljs$lang$maxFixedArity = 0;
  col10.cljs$lang$applyTo = function(arglist__20645) {
    var args__2385__auto__ = cljs.core.seq(arglist__20645);
    return col10__delegate(args__2385__auto__);
  };
  col10.cljs$core$IFn$_invoke$arity$variadic = col10__delegate;
  return col10;
}();
bootstrap.grid.col11 = function() {
  var col11__delegate = function(args__2385__auto__) {
    var vec__20647 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20647, 0, null);
    var kids = cljs.core.nth.call(null, vec__20647, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "col-md-11"), attr, kids);
  };
  var col11 = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return col11__delegate.call(this, args__2385__auto__);
  };
  col11.cljs$lang$maxFixedArity = 0;
  col11.cljs$lang$applyTo = function(arglist__20648) {
    var args__2385__auto__ = cljs.core.seq(arglist__20648);
    return col11__delegate(args__2385__auto__);
  };
  col11.cljs$core$IFn$_invoke$arity$variadic = col11__delegate;
  return col11;
}();
bootstrap.grid.col12 = function() {
  var col12__delegate = function(args__2385__auto__) {
    var vec__20650 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20650, 0, null);
    var kids = cljs.core.nth.call(null, vec__20650, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "col-md-12"), attr, kids);
  };
  var col12 = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return col12__delegate.call(this, args__2385__auto__);
  };
  col12.cljs$lang$maxFixedArity = 0;
  col12.cljs$lang$applyTo = function(arglist__20651) {
    var args__2385__auto__ = cljs.core.seq(arglist__20651);
    return col12__delegate(args__2385__auto__);
  };
  col12.cljs$core$IFn$_invoke$arity$variadic = col12__delegate;
  return col12;
}();
goog.provide("bootstrap.meta");
goog.require("cljs.core");
goog.require("tailrecursion.javelin");
goog.require("tailrecursion.hoplon");
goog.require("tailrecursion.hoplon");
goog.require("tailrecursion.javelin");
bootstrap.meta.meta = tailrecursion.hoplon.html_meta;
bootstrap.meta.viewport = function() {
  var viewport__delegate = function(args__2385__auto__) {
    var vec__20665 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20665, 0, null);
    var kids = cljs.core.nth.call(null, vec__20665, 1, null);
    return bootstrap.meta.meta.call(null, new cljs.core.Keyword(null, "name", "name", 1017277949), "viewport", new cljs.core.Keyword(null, "content", "content", 1965434859), cljs.core.first.call(null, kids));
  };
  var viewport = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return viewport__delegate.call(this, args__2385__auto__);
  };
  viewport.cljs$lang$maxFixedArity = 0;
  viewport.cljs$lang$applyTo = function(arglist__20666) {
    var args__2385__auto__ = cljs.core.seq(arglist__20666);
    return viewport__delegate(args__2385__auto__);
  };
  viewport.cljs$core$IFn$_invoke$arity$variadic = viewport__delegate;
  return viewport;
}();
bootstrap.meta.description = function() {
  var description__delegate = function(args__2385__auto__) {
    var vec__20668 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20668, 0, null);
    var kids = cljs.core.nth.call(null, vec__20668, 1, null);
    return bootstrap.meta.meta.call(null, new cljs.core.Keyword(null, "name", "name", 1017277949), "description", new cljs.core.Keyword(null, "content", "content", 1965434859), cljs.core.first.call(null, kids));
  };
  var description = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return description__delegate.call(this, args__2385__auto__);
  };
  description.cljs$lang$maxFixedArity = 0;
  description.cljs$lang$applyTo = function(arglist__20669) {
    var args__2385__auto__ = cljs.core.seq(arglist__20669);
    return description__delegate(args__2385__auto__);
  };
  description.cljs$core$IFn$_invoke$arity$variadic = description__delegate;
  return description;
}();
goog.provide("bootstrap.core");
goog.require("cljs.core");
goog.require("tailrecursion.javelin");
goog.require("tailrecursion.hoplon");
goog.require("tailrecursion.hoplon");
goog.require("tailrecursion.javelin");
goog.require("bootstrap.meta");
goog.require("bootstrap.meta");
bootstrap.core.setup = function setup() {
  return tailrecursion.hoplon.spliced.call(null, bootstrap.meta.viewport.call(null, "width\x3ddevice-width, initial-scale\x3d1.0"), tailrecursion.hoplon.link.call(null, new cljs.core.Keyword(null, "href", "href", 1017115293), "css/bootstrap.min.css", new cljs.core.Keyword(null, "rel", "rel", 1014017035), "stylesheet", new cljs.core.Keyword(null, "media", "media", 1117676374), "screen"), tailrecursion.hoplon.link.call(null, new cljs.core.Keyword(null, "href", "href", 1017115293), "css/starter-template.css", 
  new cljs.core.Keyword(null, "rel", "rel", 1014017035), "stylesheet", new cljs.core.Keyword(null, "media", "media", 1117676374), "screen"));
};
bootstrap.core.container = function() {
  var container__delegate = function(args__2385__auto__) {
    var vec__20587 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20587, 0, null);
    var kids = cljs.core.nth.call(null, vec__20587, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "container"), attr, kids);
  };
  var container = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return container__delegate.call(this, args__2385__auto__);
  };
  container.cljs$lang$maxFixedArity = 0;
  container.cljs$lang$applyTo = function(arglist__20588) {
    var args__2385__auto__ = cljs.core.seq(arglist__20588);
    return container__delegate(args__2385__auto__);
  };
  container.cljs$core$IFn$_invoke$arity$variadic = container__delegate;
  return container;
}();
bootstrap.core.jumbotron = function() {
  var jumbotron__delegate = function(args__2385__auto__) {
    var vec__20590 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20590, 0, null);
    var kids = cljs.core.nth.call(null, vec__20590, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "jumbotron"), attr, kids);
  };
  var jumbotron = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return jumbotron__delegate.call(this, args__2385__auto__);
  };
  jumbotron.cljs$lang$maxFixedArity = 0;
  jumbotron.cljs$lang$applyTo = function(arglist__20591) {
    var args__2385__auto__ = cljs.core.seq(arglist__20591);
    return jumbotron__delegate(args__2385__auto__);
  };
  jumbotron.cljs$core$IFn$_invoke$arity$variadic = jumbotron__delegate;
  return jumbotron;
}();
goog.provide("bootstrap.navbar");
goog.require("cljs.core");
goog.require("tailrecursion.javelin");
goog.require("tailrecursion.hoplon");
goog.require("tailrecursion.hoplon");
goog.require("tailrecursion.javelin");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("bootstrap.meta");
goog.require("bootstrap.meta");
goog.require("bootstrap.core");
goog.require("bootstrap.core");
bootstrap.navbar.get_hash = function get_hash(link) {
  return cljs.core.subs.call(null, link.href, link.href.indexOf("#"));
};
bootstrap.navbar.active_QMARK_ = function active_QMARK_(link, route) {
  var h = bootstrap.navbar.get_hash.call(null, link);
  return cljs.core._EQ_.call(null, h, cljs.core.subs.call(null, route, 0, cljs.core.count.call(null, h)));
};
bootstrap.navbar.inverse = function() {
  var inverse__delegate = function(args__2385__auto__) {
    var vec__20671 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20671, 0, null);
    var kids = cljs.core.nth.call(null, vec__20671, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "navbar navbar-inverse"), attr, kids);
  };
  var inverse = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return inverse__delegate.call(this, args__2385__auto__);
  };
  inverse.cljs$lang$maxFixedArity = 0;
  inverse.cljs$lang$applyTo = function(arglist__20672) {
    var args__2385__auto__ = cljs.core.seq(arglist__20672);
    return inverse__delegate(args__2385__auto__);
  };
  inverse.cljs$core$IFn$_invoke$arity$variadic = inverse__delegate;
  return inverse;
}();
bootstrap.navbar.header = function() {
  var header__delegate = function(args__2385__auto__) {
    var vec__20674 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20674, 0, null);
    var kids = cljs.core.nth.call(null, vec__20674, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "navbar-header"), attr, kids);
  };
  var header = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return header__delegate.call(this, args__2385__auto__);
  };
  header.cljs$lang$maxFixedArity = 0;
  header.cljs$lang$applyTo = function(arglist__20675) {
    var args__2385__auto__ = cljs.core.seq(arglist__20675);
    return header__delegate(args__2385__auto__);
  };
  header.cljs$core$IFn$_invoke$arity$variadic = header__delegate;
  return header;
}();
bootstrap.navbar.collapse = function() {
  var collapse__delegate = function(args__2385__auto__) {
    var vec__20677 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20677, 0, null);
    var kids = cljs.core.nth.call(null, vec__20677, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "collapse navbar-collapse"), attr, kids);
  };
  var collapse = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return collapse__delegate.call(this, args__2385__auto__);
  };
  collapse.cljs$lang$maxFixedArity = 0;
  collapse.cljs$lang$applyTo = function(arglist__20678) {
    var args__2385__auto__ = cljs.core.seq(arglist__20678);
    return collapse__delegate(args__2385__auto__);
  };
  collapse.cljs$core$IFn$_invoke$arity$variadic = collapse__delegate;
  return collapse;
}();
bootstrap.navbar.nav = function() {
  var nav__delegate = function(args__2385__auto__) {
    var vec__20680 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20680, 0, null);
    var kids = cljs.core.nth.call(null, vec__20680, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.ul.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "nav navbar-nav"), attr, kids);
  };
  var nav = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return nav__delegate.call(this, args__2385__auto__);
  };
  nav.cljs$lang$maxFixedArity = 0;
  nav.cljs$lang$applyTo = function(arglist__20681) {
    var args__2385__auto__ = cljs.core.seq(arglist__20681);
    return nav__delegate(args__2385__auto__);
  };
  nav.cljs$core$IFn$_invoke$arity$variadic = nav__delegate;
  return nav;
}();
bootstrap.navbar.brand = function() {
  var brand__delegate = function(args__2385__auto__) {
    var vec__20683 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20683, 0, null);
    var kids = cljs.core.nth.call(null, vec__20683, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.a.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "navbar-brand"), attr, kids);
  };
  var brand = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return brand__delegate.call(this, args__2385__auto__);
  };
  brand.cljs$lang$maxFixedArity = 0;
  brand.cljs$lang$applyTo = function(arglist__20684) {
    var args__2385__auto__ = cljs.core.seq(arglist__20684);
    return brand__delegate(args__2385__auto__);
  };
  brand.cljs$core$IFn$_invoke$arity$variadic = brand__delegate;
  return brand;
}();
bootstrap.navbar.fixed_top = function() {
  var fixed_top__delegate = function(route, title_text, links) {
    return bootstrap.navbar.inverse.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "navbar-fixed-top").call(null, bootstrap.core.container.call(null, bootstrap.navbar.header.call(null, bootstrap.navbar.brand.call(null, new cljs.core.Keyword(null, "href", "href", 1017115293), bootstrap.navbar.get_hash.call(null, cljs.core.first.call(null, links)), title_text)), bootstrap.navbar.collapse.call(null, cljs.core.apply.call(null, bootstrap.navbar.nav.call(null), cljs.core.map.call(null, 
    function(p1__20685_SHARP_) {
      return tailrecursion.hoplon.li.call(null, new cljs.core.Keyword(null, "do-class", "do-class", 4607961384), tailrecursion.javelin.lift.call(null, function(G__20691, G__20690, G__20689) {
        return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "active", "active", 3885920888), G__20689.call(null, G__20690, G__20691)], null);
      }).call(null, route, p1__20685_SHARP_, bootstrap.navbar.active_QMARK_), p1__20685_SHARP_);
    }, links)))));
  };
  var fixed_top = function(route, title_text, var_args) {
    var links = null;
    if (arguments.length > 2) {
      links = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return fixed_top__delegate.call(this, route, title_text, links);
  };
  fixed_top.cljs$lang$maxFixedArity = 2;
  fixed_top.cljs$lang$applyTo = function(arglist__20692) {
    var route = cljs.core.first(arglist__20692);
    arglist__20692 = cljs.core.next(arglist__20692);
    var title_text = cljs.core.first(arglist__20692);
    var links = cljs.core.rest(arglist__20692);
    return fixed_top__delegate(route, title_text, links);
  };
  fixed_top.cljs$core$IFn$_invoke$arity$variadic = fixed_top__delegate;
  return fixed_top;
}();
goog.provide("bootstrap.page");
goog.require("cljs.core");
goog.require("tailrecursion.javelin");
goog.require("tailrecursion.hoplon");
goog.require("tailrecursion.hoplon");
goog.require("tailrecursion.javelin");
goog.require("bootstrap.navbar");
goog.require("bootstrap.navbar");
goog.require("bootstrap.meta");
goog.require("bootstrap.meta");
goog.require("bootstrap.core");
goog.require("bootstrap.core");
bootstrap.page.navbar_fixed_top = function() {
  var navbar_fixed_top__delegate = function(route, title_text, description, kvs) {
    return cljs.core.into.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
      return tailrecursion.hoplon.spliced.call(null, bootstrap.core.setup.call(null), tailrecursion.hoplon.title.call(null, title_text), bootstrap.meta.description.call(null, description));
    }, cljs.core.apply.call(null, bootstrap.navbar.fixed_top, route, title_text, cljs.core.map.call(null, cljs.core.first, kvs))], null), cljs.core.map.call(null, function(p__20698) {
      var vec__20699 = p__20698;
      var l = cljs.core.nth.call(null, vec__20699, 0, null);
      var c = cljs.core.nth.call(null, vec__20699, 1, null);
      return c.call(null, new cljs.core.Keyword(null, "do-toggle", "do-toggle", 1250159176), tailrecursion.javelin.lift.call(null, function(G__20702, G__20701, G__20700) {
        return G__20700.call(null, G__20701, G__20702);
      }).call(null, route, l, bootstrap.navbar.active_QMARK_));
    }, kvs));
  };
  var navbar_fixed_top = function(route, title_text, description, var_args) {
    var kvs = null;
    if (arguments.length > 3) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return navbar_fixed_top__delegate.call(this, route, title_text, description, kvs);
  };
  navbar_fixed_top.cljs$lang$maxFixedArity = 3;
  navbar_fixed_top.cljs$lang$applyTo = function(arglist__20703) {
    var route = cljs.core.first(arglist__20703);
    arglist__20703 = cljs.core.next(arglist__20703);
    var title_text = cljs.core.first(arglist__20703);
    arglist__20703 = cljs.core.next(arglist__20703);
    var description = cljs.core.first(arglist__20703);
    var kvs = cljs.core.rest(arglist__20703);
    return navbar_fixed_top__delegate(route, title_text, description, kvs);
  };
  navbar_fixed_top.cljs$core$IFn$_invoke$arity$variadic = navbar_fixed_top__delegate;
  return navbar_fixed_top;
}();
bootstrap.page.header = function() {
  var header__delegate = function(args__2385__auto__) {
    var vec__20705 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20705, 0, null);
    var kids = cljs.core.nth.call(null, vec__20705, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "page-header"), attr, kids);
  };
  var header = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return header__delegate.call(this, args__2385__auto__);
  };
  header.cljs$lang$maxFixedArity = 0;
  header.cljs$lang$applyTo = function(arglist__20706) {
    var args__2385__auto__ = cljs.core.seq(arglist__20706);
    return header__delegate(args__2385__auto__);
  };
  header.cljs$core$IFn$_invoke$arity$variadic = header__delegate;
  return header;
}();
goog.provide("tailrecursion.hoplon.util");
goog.require("cljs.core");
goog.require("tailrecursion.javelin");
goog.require("cljs.reader");
goog.require("tailrecursion.javelin");
goog.require("cljs.reader");
goog.require("clojure.string");
goog.require("clojure.string");
tailrecursion.hoplon.util.nth = function nth(coll, n) {
  try {
    return nth.call(null, coll, n);
  } catch (e13013) {
    if (e13013 instanceof Error) {
      var e = e13013;
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e13013;
      } else {
        return null;
      }
    }
  }
};
tailrecursion.hoplon.util.name = function name(x) {
  try {
    return name.call(null, x);
  } catch (e13015) {
    if (e13015 instanceof Error) {
      var e = e13015;
      return null;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        throw e13015;
      } else {
        return null;
      }
    }
  }
};
tailrecursion.hoplon.util.interval = function interval(f, msec) {
  return window.setInterval(f, msec);
};
tailrecursion.hoplon.util.route_cell = function route_cell(msec, default$) {
  var hash = function() {
    return window.location.hash;
  };
  var ret = tailrecursion.javelin.cell.call(null, hash.call(null));
  tailrecursion.hoplon.util.interval.call(null, function() {
    var h = hash.call(null);
    return cljs.core.reset_BANG_.call(null, ret, cljs.core.empty_QMARK_.call(null, h) ? default$ : h);
  }, msec);
  return ret;
};
var qcache_13023 = cljs.core.atom.call(null, new cljs.core.Keyword("tailrecursion.hoplon.util", "none", "tailrecursion.hoplon.util/none", 3610238792));
tailrecursion.hoplon.util.query = function() {
  var query__delegate = function(p__13020) {
    var vec__13022 = p__13020;
    var k = cljs.core.nth.call(null, vec__13022, 0, null);
    var _ = cljs.core.nthnext.call(null, vec__13022, 1);
    var args = vec__13022;
    if (!cljs.core._EQ_.call(null, new cljs.core.Keyword("tailrecursion.hoplon.util", "none", "tailrecursion.hoplon.util/none", 3610238792), cljs.core.deref.call(null, qcache_13023))) {
      if (cljs.core.truth_(k)) {
        return cljs.core.deref.call(null, qcache_13023).call(null, tailrecursion.hoplon.util.name.call(null, k));
      } else {
        return cljs.core.deref.call(null, qcache_13023);
      }
    } else {
      var s = window.location.search;
      if (cljs.core.not.call(null, clojure.string.blank_QMARK_.call(null, s))) {
        var v = clojure.string.split.call(null, clojure.string.replace.call(null, s, /^\?/, ""), /[&]/);
        var m = cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.mapv.call(null, function(v) {
          return function(p1__13019_SHARP_) {
            if (cljs.core.count.call(null, p1__13019_SHARP_) < 2) {
              return cljs.core.conj.call(null, p1__13019_SHARP_, "");
            } else {
              return p1__13019_SHARP_;
            }
          };
        }(v), cljs.core.remove.call(null, function(v) {
          return function(p1__13018_SHARP_) {
            return cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [""], null), p1__13018_SHARP_) || (cljs.core._EQ_.call(null, 0, cljs.core.count.call(null, p1__13018_SHARP_)) || 2 < cljs.core.count.call(null, p1__13018_SHARP_));
          };
        }(v), cljs.core.mapv.call(null, function(v) {
          return function(p1__13017_SHARP_) {
            return cljs.core.mapv.call(null, decodeURIComponent, p1__13017_SHARP_);
          };
        }(v), cljs.core.mapv.call(null, function(v) {
          return function(p1__13016_SHARP_) {
            return clojure.string.split.call(null, p1__13016_SHARP_, /[=]/);
          };
        }(v), v)))));
        cljs.core.reset_BANG_.call(null, qcache_13023, m);
        return cljs.core.apply.call(null, query, args);
      } else {
        return null;
      }
    }
  };
  var query = function(var_args) {
    var p__13020 = null;
    if (arguments.length > 0) {
      p__13020 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return query__delegate.call(this, p__13020);
  };
  query.cljs$lang$maxFixedArity = 0;
  query.cljs$lang$applyTo = function(arglist__13024) {
    var p__13020 = cljs.core.seq(arglist__13024);
    return query__delegate(p__13020);
  };
  query.cljs$core$IFn$_invoke$arity$variadic = query__delegate;
  return query;
}();
tailrecursion.hoplon.util.pluralize = function pluralize(word, count) {
  return[cljs.core.str(word), cljs.core.str(cljs.core.not_EQ_.call(null, 1, count) ? "s" : null)].join("");
};
tailrecursion.hoplon.util.capitalize = function capitalize(s) {
  if (typeof s === "string") {
    return clojure.string.capitalize.call(null, s);
  } else {
    return null;
  }
};
tailrecursion.hoplon.util.str_partition = function str_partition(re, s) {
  return cljs.core.mapv.call(null, cljs.core.partial.call(null, cljs.core.apply, cljs.core.str), cljs.core.partition_by.call(null, function(p1__13025_SHARP_) {
    if (cljs.core.truth_(cljs.core.re_matches.call(null, re, p1__13025_SHARP_))) {
      return true;
    } else {
      return null;
    }
  }, s));
};
tailrecursion.hoplon.util.capitalize_name = function capitalize_name(s) {
  return cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, tailrecursion.hoplon.util.capitalize, tailrecursion.hoplon.util.str_partition.call(null, /[a-zA-Z]/, s)));
};
tailrecursion.hoplon.util.format_date = function format_date(date_str) {
  var vec__13027 = cljs.core.mapv.call(null, Number, clojure.string.split.call(null, date_str, /-/));
  var y = cljs.core.nth.call(null, vec__13027, 0, null);
  var m = cljs.core.nth.call(null, vec__13027, 1, null);
  var d = cljs.core.nth.call(null, vec__13027, 2, null);
  var months = new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], null);
  var i = m - 1;
  if (i < 0) {
    return "\x3c\x3c Sorry, there was an error computing the date. \x3e\x3e";
  } else {
    return[cljs.core.str(tailrecursion.hoplon.util.nth.call(null, months, m - 1)), cljs.core.str(" "), cljs.core.str(d), cljs.core.str(", "), cljs.core.str(y)].join("");
  }
};
goog.provide("bootstrap.list");
goog.require("cljs.core");
goog.require("tailrecursion.javelin");
goog.require("tailrecursion.hoplon");
goog.require("tailrecursion.hoplon");
goog.require("tailrecursion.javelin");
bootstrap.list.group = function() {
  var group__delegate = function(args__2385__auto__) {
    var vec__20653 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20653, 0, null);
    var kids = cljs.core.nth.call(null, vec__20653, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.ul.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "list-group"), attr, kids);
  };
  var group = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return group__delegate.call(this, args__2385__auto__);
  };
  group.cljs$lang$maxFixedArity = 0;
  group.cljs$lang$applyTo = function(arglist__20654) {
    var args__2385__auto__ = cljs.core.seq(arglist__20654);
    return group__delegate(args__2385__auto__);
  };
  group.cljs$core$IFn$_invoke$arity$variadic = group__delegate;
  return group;
}();
bootstrap.list.item = function() {
  var item__delegate = function(args__2385__auto__) {
    var vec__20656 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20656, 0, null);
    var kids = cljs.core.nth.call(null, vec__20656, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.li.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "list-group-item"), attr, kids);
  };
  var item = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return item__delegate.call(this, args__2385__auto__);
  };
  item.cljs$lang$maxFixedArity = 0;
  item.cljs$lang$applyTo = function(arglist__20657) {
    var args__2385__auto__ = cljs.core.seq(arglist__20657);
    return item__delegate(args__2385__auto__);
  };
  item.cljs$core$IFn$_invoke$arity$variadic = item__delegate;
  return item;
}();
bootstrap.list.divgroup = function() {
  var divgroup__delegate = function(args__2385__auto__) {
    var vec__20659 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20659, 0, null);
    var kids = cljs.core.nth.call(null, vec__20659, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "list-group"), attr, kids);
  };
  var divgroup = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return divgroup__delegate.call(this, args__2385__auto__);
  };
  divgroup.cljs$lang$maxFixedArity = 0;
  divgroup.cljs$lang$applyTo = function(arglist__20660) {
    var args__2385__auto__ = cljs.core.seq(arglist__20660);
    return divgroup__delegate(args__2385__auto__);
  };
  divgroup.cljs$core$IFn$_invoke$arity$variadic = divgroup__delegate;
  return divgroup;
}();
bootstrap.list.divitem = function() {
  var divitem__delegate = function(args__2385__auto__) {
    var vec__20662 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20662, 0, null);
    var kids = cljs.core.nth.call(null, vec__20662, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "list-group-item"), attr, kids);
  };
  var divitem = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return divitem__delegate.call(this, args__2385__auto__);
  };
  divitem.cljs$lang$maxFixedArity = 0;
  divitem.cljs$lang$applyTo = function(arglist__20663) {
    var args__2385__auto__ = cljs.core.seq(arglist__20663);
    return divitem__delegate(args__2385__auto__);
  };
  divitem.cljs$core$IFn$_invoke$arity$variadic = divitem__delegate;
  return divitem;
}();
goog.provide("bootstrap.panel");
goog.require("cljs.core");
goog.require("tailrecursion.javelin");
goog.require("tailrecursion.hoplon");
goog.require("tailrecursion.hoplon");
goog.require("tailrecursion.javelin");
bootstrap.panel.default$ = function() {
  var default$__delegate = function(args__2385__auto__) {
    var vec__20708 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20708, 0, null);
    var kids = cljs.core.nth.call(null, vec__20708, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "panel panel-default"), attr, kids);
  };
  var default$ = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return default$__delegate.call(this, args__2385__auto__);
  };
  default$.cljs$lang$maxFixedArity = 0;
  default$.cljs$lang$applyTo = function(arglist__20709) {
    var args__2385__auto__ = cljs.core.seq(arglist__20709);
    return default$__delegate(args__2385__auto__);
  };
  default$.cljs$core$IFn$_invoke$arity$variadic = default$__delegate;
  return default$;
}();
bootstrap.panel.info = function() {
  var info__delegate = function(args__2385__auto__) {
    var vec__20711 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20711, 0, null);
    var kids = cljs.core.nth.call(null, vec__20711, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "panel panel-info"), attr, kids);
  };
  var info = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return info__delegate.call(this, args__2385__auto__);
  };
  info.cljs$lang$maxFixedArity = 0;
  info.cljs$lang$applyTo = function(arglist__20712) {
    var args__2385__auto__ = cljs.core.seq(arglist__20712);
    return info__delegate(args__2385__auto__);
  };
  info.cljs$core$IFn$_invoke$arity$variadic = info__delegate;
  return info;
}();
bootstrap.panel.body = function() {
  var body__delegate = function(args__2385__auto__) {
    var vec__20714 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20714, 0, null);
    var kids = cljs.core.nth.call(null, vec__20714, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "panel-body"), attr, kids);
  };
  var body = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return body__delegate.call(this, args__2385__auto__);
  };
  body.cljs$lang$maxFixedArity = 0;
  body.cljs$lang$applyTo = function(arglist__20715) {
    var args__2385__auto__ = cljs.core.seq(arglist__20715);
    return body__delegate(args__2385__auto__);
  };
  body.cljs$core$IFn$_invoke$arity$variadic = body__delegate;
  return body;
}();
bootstrap.panel.heading = function() {
  var heading__delegate = function(args__2385__auto__) {
    var vec__20717 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20717, 0, null);
    var kids = cljs.core.nth.call(null, vec__20717, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "panel-heading"), attr, kids);
  };
  var heading = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return heading__delegate.call(this, args__2385__auto__);
  };
  heading.cljs$lang$maxFixedArity = 0;
  heading.cljs$lang$applyTo = function(arglist__20718) {
    var args__2385__auto__ = cljs.core.seq(arglist__20718);
    return heading__delegate(args__2385__auto__);
  };
  heading.cljs$core$IFn$_invoke$arity$variadic = heading__delegate;
  return heading;
}();
bootstrap.panel.title = function() {
  var title__delegate = function(args__2385__auto__) {
    var vec__20720 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20720, 0, null);
    var kids = cljs.core.nth.call(null, vec__20720, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.h3.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "panel-title"), attr, kids);
  };
  var title = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return title__delegate.call(this, args__2385__auto__);
  };
  title.cljs$lang$maxFixedArity = 0;
  title.cljs$lang$applyTo = function(arglist__20721) {
    var args__2385__auto__ = cljs.core.seq(arglist__20721);
    return title__delegate(args__2385__auto__);
  };
  title.cljs$core$IFn$_invoke$arity$variadic = title__delegate;
  return title;
}();
goog.provide("goog.string.format");
goog.require("goog.string");
goog.string.format = function(formatString, var_args) {
  var args = Array.prototype.slice.call(arguments);
  var template = args.shift();
  if (typeof template == "undefined") {
    throw Error("[goog.string.format] Template required");
  }
  var formatRe = /%([0\-\ \+]*)(\d+)?(\.(\d+))?([%sfdiu])/g;
  function replacerDemuxer(match, flags, width, dotp, precision, type, offset, wholeString) {
    if (type == "%") {
      return "%";
    }
    var value = args.shift();
    if (typeof value == "undefined") {
      throw Error("[goog.string.format] Not enough arguments");
    }
    arguments[0] = value;
    return goog.string.format.demuxes_[type].apply(null, arguments);
  }
  return template.replace(formatRe, replacerDemuxer);
};
goog.string.format.demuxes_ = {};
goog.string.format.demuxes_["s"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value;
  if (isNaN(width) || (width == "" || replacement.length >= width)) {
    return replacement;
  }
  if (flags.indexOf("-", 0) > -1) {
    replacement = replacement + goog.string.repeat(" ", width - replacement.length);
  } else {
    replacement = goog.string.repeat(" ", width - replacement.length) + replacement;
  }
  return replacement;
};
goog.string.format.demuxes_["f"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  var replacement = value.toString();
  if (!(isNaN(precision) || precision == "")) {
    replacement = value.toFixed(precision);
  }
  var sign;
  if (value < 0) {
    sign = "-";
  } else {
    if (flags.indexOf("+") >= 0) {
      sign = "+";
    } else {
      if (flags.indexOf(" ") >= 0) {
        sign = " ";
      } else {
        sign = "";
      }
    }
  }
  if (value >= 0) {
    replacement = sign + replacement;
  }
  if (isNaN(width) || replacement.length >= width) {
    return replacement;
  }
  replacement = isNaN(precision) ? Math.abs(value).toString() : Math.abs(value).toFixed(precision);
  var padCount = width - replacement.length - sign.length;
  if (flags.indexOf("-", 0) >= 0) {
    replacement = sign + replacement + goog.string.repeat(" ", padCount);
  } else {
    var paddingChar = flags.indexOf("0", 0) >= 0 ? "0" : " ";
    replacement = sign + goog.string.repeat(paddingChar, padCount) + replacement;
  }
  return replacement;
};
goog.string.format.demuxes_["d"] = function(value, flags, width, dotp, precision, type, offset, wholeString) {
  return goog.string.format.demuxes_["f"](parseInt(value, 10), flags, width, dotp, 0, type, offset, wholeString);
};
goog.string.format.demuxes_["i"] = goog.string.format.demuxes_["d"];
goog.string.format.demuxes_["u"] = goog.string.format.demuxes_["d"];
goog.provide("garden.types");
goog.require("cljs.core");
garden.types.CSSUnit = function(unit, magnitude, __meta, __extmap) {
  this.unit = unit;
  this.magnitude = magnitude;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
garden.types.CSSUnit.prototype.cljs$core$IHash$_hash$arity$1 = function(this__8869__auto__) {
  var self__ = this;
  var this__8869__auto____$1 = this;
  var h__8705__auto__ = self__.__hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_imap.call(null, this__8869__auto____$1);
    self__.__hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
garden.types.CSSUnit.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__8874__auto__, k__8875__auto__) {
  var self__ = this;
  var this__8874__auto____$1 = this;
  return cljs.core._lookup.call(null, this__8874__auto____$1, k__8875__auto__, null);
};
garden.types.CSSUnit.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__8876__auto__, k13177, else__8877__auto__) {
  var self__ = this;
  var this__8876__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k13177, new cljs.core.Keyword(null, "unit", "unit", 1017498870))) {
    return self__.unit;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k13177, new cljs.core.Keyword(null, "magnitude", "magnitude", 3292087682))) {
      return self__.magnitude;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.get.call(null, self__.__extmap, k13177, else__8877__auto__);
      } else {
        return null;
      }
    }
  }
};
garden.types.CSSUnit.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__8881__auto__, k__8882__auto__, G__13176) {
  var self__ = this;
  var this__8881__auto____$1 = this;
  var pred__13179 = cljs.core.keyword_identical_QMARK_;
  var expr__13180 = k__8882__auto__;
  if (cljs.core.truth_(pred__13179.call(null, new cljs.core.Keyword(null, "unit", "unit", 1017498870), expr__13180))) {
    return new garden.types.CSSUnit(G__13176, self__.magnitude, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__13179.call(null, new cljs.core.Keyword(null, "magnitude", "magnitude", 3292087682), expr__13180))) {
      return new garden.types.CSSUnit(self__.unit, G__13176, self__.__meta, self__.__extmap, null);
    } else {
      return new garden.types.CSSUnit(self__.unit, self__.magnitude, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__8882__auto__, G__13176), null);
    }
  }
};
garden.types.CSSUnit.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__8888__auto__, writer__8889__auto__, opts__8890__auto__) {
  var self__ = this;
  var this__8888__auto____$1 = this;
  var pr_pair__8891__auto__ = function(keyval__8892__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__8889__auto__, cljs.core.pr_writer, "", " ", "", opts__8890__auto__, keyval__8892__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__8889__auto__, pr_pair__8891__auto__, "#garden.types.CSSUnit{", ", ", "}", opts__8890__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "unit", "unit", 1017498870), self__.unit], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "magnitude", "magnitude", 3292087682), self__.magnitude], null)], null), self__.__extmap));
};
garden.types.CSSUnit.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__8879__auto__, entry__8880__auto__) {
  var self__ = this;
  var this__8879__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__8880__auto__)) {
    return cljs.core._assoc.call(null, this__8879__auto____$1, cljs.core._nth.call(null, entry__8880__auto__, 0), cljs.core._nth.call(null, entry__8880__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__8879__auto____$1, entry__8880__auto__);
  }
};
garden.types.CSSUnit.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__8886__auto__) {
  var self__ = this;
  var this__8886__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "unit", "unit", 1017498870), self__.unit], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "magnitude", "magnitude", 3292087682), self__.magnitude], null)], null), self__.__extmap));
};
garden.types.CSSUnit.prototype.cljs$core$ICounted$_count$arity$1 = function(this__8878__auto__) {
  var self__ = this;
  var this__8878__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
garden.types.CSSUnit.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__8870__auto__, other__8871__auto__) {
  var self__ = this;
  var this__8870__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__8282__auto__ = other__8871__auto__;
    if (cljs.core.truth_(and__8282__auto__)) {
      return this__8870__auto____$1.constructor === other__8871__auto__.constructor && cljs.core.equiv_map.call(null, this__8870__auto____$1, other__8871__auto__);
    } else {
      return and__8282__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
garden.types.CSSUnit.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__8873__auto__, G__13176) {
  var self__ = this;
  var this__8873__auto____$1 = this;
  return new garden.types.CSSUnit(self__.unit, self__.magnitude, G__13176, self__.__extmap, self__.__hash);
};
garden.types.CSSUnit.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__8872__auto__) {
  var self__ = this;
  var this__8872__auto____$1 = this;
  return self__.__meta;
};
garden.types.CSSUnit.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__8883__auto__, k__8884__auto__) {
  var self__ = this;
  var this__8883__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "magnitude", "magnitude", 3292087682), null, new cljs.core.Keyword(null, "unit", "unit", 1017498870), null], null), null), k__8884__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__8883__auto____$1), self__.__meta), k__8884__auto__);
  } else {
    return new garden.types.CSSUnit(self__.unit, self__.magnitude, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__8884__auto__)), null);
  }
};
garden.types.CSSUnit.cljs$lang$type = true;
garden.types.CSSUnit.cljs$lang$ctorPrSeq = function(this__8908__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "garden.types/CSSUnit");
};
garden.types.CSSUnit.cljs$lang$ctorPrWriter = function(this__8908__auto__, writer__8909__auto__) {
  return cljs.core._write.call(null, writer__8909__auto__, "garden.types/CSSUnit");
};
garden.types.__GT_CSSUnit = function __GT_CSSUnit(unit, magnitude) {
  return new garden.types.CSSUnit(unit, magnitude);
};
garden.types.map__GT_CSSUnit = function map__GT_CSSUnit(G__13178) {
  return new garden.types.CSSUnit((new cljs.core.Keyword(null, "unit", "unit", 1017498870)).cljs$core$IFn$_invoke$arity$1(G__13178), (new cljs.core.Keyword(null, "magnitude", "magnitude", 3292087682)).cljs$core$IFn$_invoke$arity$1(G__13178), null, cljs.core.dissoc.call(null, G__13178, new cljs.core.Keyword(null, "unit", "unit", 1017498870), new cljs.core.Keyword(null, "magnitude", "magnitude", 3292087682)));
};
garden.types.CSSFunction = function(function$, args, __meta, __extmap) {
  this.function$ = function$;
  this.args = args;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
garden.types.CSSFunction.prototype.cljs$core$IHash$_hash$arity$1 = function(this__8869__auto__) {
  var self__ = this;
  var this__8869__auto____$1 = this;
  var h__8705__auto__ = self__.__hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_imap.call(null, this__8869__auto____$1);
    self__.__hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
garden.types.CSSFunction.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__8874__auto__, k__8875__auto__) {
  var self__ = this;
  var this__8874__auto____$1 = this;
  return cljs.core._lookup.call(null, this__8874__auto____$1, k__8875__auto__, null);
};
garden.types.CSSFunction.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__8876__auto__, k13183, else__8877__auto__) {
  var self__ = this;
  var this__8876__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k13183, new cljs.core.Keyword(null, "function", "function", 2394842954))) {
    return self__.function$;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k13183, new cljs.core.Keyword(null, "args", "args", 1016906831))) {
      return self__.args;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.get.call(null, self__.__extmap, k13183, else__8877__auto__);
      } else {
        return null;
      }
    }
  }
};
garden.types.CSSFunction.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__8881__auto__, k__8882__auto__, G__13182) {
  var self__ = this;
  var this__8881__auto____$1 = this;
  var pred__13185 = cljs.core.keyword_identical_QMARK_;
  var expr__13186 = k__8882__auto__;
  if (cljs.core.truth_(pred__13185.call(null, new cljs.core.Keyword(null, "function", "function", 2394842954), expr__13186))) {
    return new garden.types.CSSFunction(G__13182, self__.args, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__13185.call(null, new cljs.core.Keyword(null, "args", "args", 1016906831), expr__13186))) {
      return new garden.types.CSSFunction(self__.function$, G__13182, self__.__meta, self__.__extmap, null);
    } else {
      return new garden.types.CSSFunction(self__.function$, self__.args, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__8882__auto__, G__13182), null);
    }
  }
};
garden.types.CSSFunction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__8888__auto__, writer__8889__auto__, opts__8890__auto__) {
  var self__ = this;
  var this__8888__auto____$1 = this;
  var pr_pair__8891__auto__ = function(keyval__8892__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__8889__auto__, cljs.core.pr_writer, "", " ", "", opts__8890__auto__, keyval__8892__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__8889__auto__, pr_pair__8891__auto__, "#garden.types.CSSFunction{", ", ", "}", opts__8890__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "function", "function", 2394842954), self__.function$], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "args", "args", 1016906831), self__.args], null)], null), self__.__extmap));
};
garden.types.CSSFunction.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__8879__auto__, entry__8880__auto__) {
  var self__ = this;
  var this__8879__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__8880__auto__)) {
    return cljs.core._assoc.call(null, this__8879__auto____$1, cljs.core._nth.call(null, entry__8880__auto__, 0), cljs.core._nth.call(null, entry__8880__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__8879__auto____$1, entry__8880__auto__);
  }
};
garden.types.CSSFunction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__8886__auto__) {
  var self__ = this;
  var this__8886__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "function", "function", 2394842954), self__.function$], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "args", "args", 1016906831), self__.args], null)], null), self__.__extmap));
};
garden.types.CSSFunction.prototype.cljs$core$ICounted$_count$arity$1 = function(this__8878__auto__) {
  var self__ = this;
  var this__8878__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
garden.types.CSSFunction.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__8870__auto__, other__8871__auto__) {
  var self__ = this;
  var this__8870__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__8282__auto__ = other__8871__auto__;
    if (cljs.core.truth_(and__8282__auto__)) {
      return this__8870__auto____$1.constructor === other__8871__auto__.constructor && cljs.core.equiv_map.call(null, this__8870__auto____$1, other__8871__auto__);
    } else {
      return and__8282__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
garden.types.CSSFunction.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__8873__auto__, G__13182) {
  var self__ = this;
  var this__8873__auto____$1 = this;
  return new garden.types.CSSFunction(self__.function$, self__.args, G__13182, self__.__extmap, self__.__hash);
};
garden.types.CSSFunction.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__8872__auto__) {
  var self__ = this;
  var this__8872__auto____$1 = this;
  return self__.__meta;
};
garden.types.CSSFunction.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__8883__auto__, k__8884__auto__) {
  var self__ = this;
  var this__8883__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "args", "args", 1016906831), null, new cljs.core.Keyword(null, "function", "function", 2394842954), null], null), null), k__8884__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__8883__auto____$1), self__.__meta), k__8884__auto__);
  } else {
    return new garden.types.CSSFunction(self__.function$, self__.args, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__8884__auto__)), null);
  }
};
garden.types.CSSFunction.cljs$lang$type = true;
garden.types.CSSFunction.cljs$lang$ctorPrSeq = function(this__8908__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "garden.types/CSSFunction");
};
garden.types.CSSFunction.cljs$lang$ctorPrWriter = function(this__8908__auto__, writer__8909__auto__) {
  return cljs.core._write.call(null, writer__8909__auto__, "garden.types/CSSFunction");
};
garden.types.__GT_CSSFunction = function __GT_CSSFunction(function$, args) {
  return new garden.types.CSSFunction(function$, args);
};
garden.types.map__GT_CSSFunction = function map__GT_CSSFunction(G__13184) {
  return new garden.types.CSSFunction((new cljs.core.Keyword(null, "function", "function", 2394842954)).cljs$core$IFn$_invoke$arity$1(G__13184), (new cljs.core.Keyword(null, "args", "args", 1016906831)).cljs$core$IFn$_invoke$arity$1(G__13184), null, cljs.core.dissoc.call(null, G__13184, new cljs.core.Keyword(null, "function", "function", 2394842954), new cljs.core.Keyword(null, "args", "args", 1016906831)));
};
garden.types.CSSAtRule = function(identifier, value, __meta, __extmap) {
  this.identifier = identifier;
  this.value = value;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667594;
  if (arguments.length > 2) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
garden.types.CSSAtRule.prototype.cljs$core$IHash$_hash$arity$1 = function(this__8869__auto__) {
  var self__ = this;
  var this__8869__auto____$1 = this;
  var h__8705__auto__ = self__.__hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_imap.call(null, this__8869__auto____$1);
    self__.__hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
garden.types.CSSAtRule.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__8874__auto__, k__8875__auto__) {
  var self__ = this;
  var this__8874__auto____$1 = this;
  return cljs.core._lookup.call(null, this__8874__auto____$1, k__8875__auto__, null);
};
garden.types.CSSAtRule.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__8876__auto__, k13189, else__8877__auto__) {
  var self__ = this;
  var this__8876__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k13189, new cljs.core.Keyword(null, "identifier", "identifier", 3690438683))) {
    return self__.identifier;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k13189, new cljs.core.Keyword(null, "value", "value", 1125876963))) {
      return self__.value;
    } else {
      if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
        return cljs.core.get.call(null, self__.__extmap, k13189, else__8877__auto__);
      } else {
        return null;
      }
    }
  }
};
garden.types.CSSAtRule.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__8881__auto__, k__8882__auto__, G__13188) {
  var self__ = this;
  var this__8881__auto____$1 = this;
  var pred__13191 = cljs.core.keyword_identical_QMARK_;
  var expr__13192 = k__8882__auto__;
  if (cljs.core.truth_(pred__13191.call(null, new cljs.core.Keyword(null, "identifier", "identifier", 3690438683), expr__13192))) {
    return new garden.types.CSSAtRule(G__13188, self__.value, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__13191.call(null, new cljs.core.Keyword(null, "value", "value", 1125876963), expr__13192))) {
      return new garden.types.CSSAtRule(self__.identifier, G__13188, self__.__meta, self__.__extmap, null);
    } else {
      return new garden.types.CSSAtRule(self__.identifier, self__.value, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__8882__auto__, G__13188), null);
    }
  }
};
garden.types.CSSAtRule.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__8888__auto__, writer__8889__auto__, opts__8890__auto__) {
  var self__ = this;
  var this__8888__auto____$1 = this;
  var pr_pair__8891__auto__ = function(keyval__8892__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__8889__auto__, cljs.core.pr_writer, "", " ", "", opts__8890__auto__, keyval__8892__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__8889__auto__, pr_pair__8891__auto__, "#garden.types.CSSAtRule{", ", ", "}", opts__8890__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "identifier", "identifier", 3690438683), self__.identifier], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "value", "value", 1125876963), self__.value], null)], null), self__.__extmap));
};
garden.types.CSSAtRule.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__8879__auto__, entry__8880__auto__) {
  var self__ = this;
  var this__8879__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__8880__auto__)) {
    return cljs.core._assoc.call(null, this__8879__auto____$1, cljs.core._nth.call(null, entry__8880__auto__, 0), cljs.core._nth.call(null, entry__8880__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__8879__auto____$1, entry__8880__auto__);
  }
};
garden.types.CSSAtRule.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__8886__auto__) {
  var self__ = this;
  var this__8886__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "identifier", "identifier", 3690438683), self__.identifier], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "value", "value", 1125876963), self__.value], null)], null), self__.__extmap));
};
garden.types.CSSAtRule.prototype.cljs$core$ICounted$_count$arity$1 = function(this__8878__auto__) {
  var self__ = this;
  var this__8878__auto____$1 = this;
  return 2 + cljs.core.count.call(null, self__.__extmap);
};
garden.types.CSSAtRule.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__8870__auto__, other__8871__auto__) {
  var self__ = this;
  var this__8870__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__8282__auto__ = other__8871__auto__;
    if (cljs.core.truth_(and__8282__auto__)) {
      return this__8870__auto____$1.constructor === other__8871__auto__.constructor && cljs.core.equiv_map.call(null, this__8870__auto____$1, other__8871__auto__);
    } else {
      return and__8282__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
garden.types.CSSAtRule.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__8873__auto__, G__13188) {
  var self__ = this;
  var this__8873__auto____$1 = this;
  return new garden.types.CSSAtRule(self__.identifier, self__.value, G__13188, self__.__extmap, self__.__hash);
};
garden.types.CSSAtRule.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__8872__auto__) {
  var self__ = this;
  var this__8872__auto____$1 = this;
  return self__.__meta;
};
garden.types.CSSAtRule.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__8883__auto__, k__8884__auto__) {
  var self__ = this;
  var this__8883__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "identifier", "identifier", 3690438683), null, new cljs.core.Keyword(null, "value", "value", 1125876963), null], null), null), k__8884__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__8883__auto____$1), self__.__meta), k__8884__auto__);
  } else {
    return new garden.types.CSSAtRule(self__.identifier, self__.value, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__8884__auto__)), null);
  }
};
garden.types.CSSAtRule.cljs$lang$type = true;
garden.types.CSSAtRule.cljs$lang$ctorPrSeq = function(this__8908__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "garden.types/CSSAtRule");
};
garden.types.CSSAtRule.cljs$lang$ctorPrWriter = function(this__8908__auto__, writer__8909__auto__) {
  return cljs.core._write.call(null, writer__8909__auto__, "garden.types/CSSAtRule");
};
garden.types.__GT_CSSAtRule = function __GT_CSSAtRule(identifier, value) {
  return new garden.types.CSSAtRule(identifier, value);
};
garden.types.map__GT_CSSAtRule = function map__GT_CSSAtRule(G__13190) {
  return new garden.types.CSSAtRule((new cljs.core.Keyword(null, "identifier", "identifier", 3690438683)).cljs$core$IFn$_invoke$arity$1(G__13190), (new cljs.core.Keyword(null, "value", "value", 1125876963)).cljs$core$IFn$_invoke$arity$1(G__13190), null, cljs.core.dissoc.call(null, G__13190, new cljs.core.Keyword(null, "identifier", "identifier", 3690438683), new cljs.core.Keyword(null, "value", "value", 1125876963)));
};
goog.provide("garden.util");
goog.require("cljs.core");
goog.require("goog.string.format");
goog.require("goog.string");
goog.require("goog.string");
goog.require("garden.types");
goog.require("garden.types");
goog.require("clojure.string");
goog.require("clojure.string");
garden.util.format = function() {
  var format__delegate = function(fmt, args) {
    return cljs.core.apply.call(null, goog.string.format, fmt, args);
  };
  var format = function(fmt, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return format__delegate.call(this, fmt, args);
  };
  format.cljs$lang$maxFixedArity = 1;
  format.cljs$lang$applyTo = function(arglist__13194) {
    var fmt = cljs.core.first(arglist__13194);
    var args = cljs.core.rest(arglist__13194);
    return format__delegate(fmt, args);
  };
  format.cljs$core$IFn$_invoke$arity$variadic = format__delegate;
  return format;
}();
garden.util.ToString = function() {
  var obj13196 = {};
  return obj13196;
}();
garden.util.to_str = function to_str(this$) {
  if (function() {
    var and__8282__auto__ = this$;
    if (and__8282__auto__) {
      return this$.garden$util$ToString$to_str$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return this$.garden$util$ToString$to_str$arity$1(this$);
  } else {
    var x__8915__auto__ = this$ == null ? null : this$;
    return function() {
      var or__8294__auto__ = garden.util.to_str[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = garden.util.to_str["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ToString.to-str", this$);
        }
      }
    }().call(null, this$);
  }
};
garden.util.ToString["null"] = true;
garden.util.to_str["null"] = function(this$) {
  return "";
};
garden.util.ToString["_"] = true;
garden.util.to_str["_"] = function(this$) {
  return[cljs.core.str(this$)].join("");
};
cljs.core.Keyword.prototype.garden$util$ToString$ = true;
cljs.core.Keyword.prototype.garden$util$ToString$to_str$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.name.call(null, this$__$1);
};
garden.util.as_str = function() {
  var as_str__delegate = function(args) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, garden.util.to_str, args));
  };
  var as_str = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return as_str__delegate.call(this, args);
  };
  as_str.cljs$lang$maxFixedArity = 0;
  as_str.cljs$lang$applyTo = function(arglist__13197) {
    var args = cljs.core.seq(arglist__13197);
    return as_str__delegate(args);
  };
  as_str.cljs$core$IFn$_invoke$arity$variadic = as_str__delegate;
  return as_str;
}();
garden.util.string__GT_int = function() {
  var string__GT_int__delegate = function(s, p__13198) {
    var vec__13200 = p__13198;
    var radix = cljs.core.nth.call(null, vec__13200, 0, null);
    var radix__$1 = function() {
      var or__8294__auto__ = radix;
      if (cljs.core.truth_(or__8294__auto__)) {
        return or__8294__auto__;
      } else {
        return 10;
      }
    }();
    return parseInt(s, radix__$1);
  };
  var string__GT_int = function(s, var_args) {
    var p__13198 = null;
    if (arguments.length > 1) {
      p__13198 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return string__GT_int__delegate.call(this, s, p__13198);
  };
  string__GT_int.cljs$lang$maxFixedArity = 1;
  string__GT_int.cljs$lang$applyTo = function(arglist__13201) {
    var s = cljs.core.first(arglist__13201);
    var p__13198 = cljs.core.rest(arglist__13201);
    return string__GT_int__delegate(s, p__13198);
  };
  string__GT_int.cljs$core$IFn$_invoke$arity$variadic = string__GT_int__delegate;
  return string__GT_int;
}();
garden.util.int__GT_string = function() {
  var int__GT_string__delegate = function(i, p__13202) {
    var vec__13204 = p__13202;
    var radix = cljs.core.nth.call(null, vec__13204, 0, null);
    var radix__$1 = function() {
      var or__8294__auto__ = radix;
      if (cljs.core.truth_(or__8294__auto__)) {
        return or__8294__auto__;
      } else {
        return 10;
      }
    }();
    return i.toString(radix__$1);
  };
  var int__GT_string = function(i, var_args) {
    var p__13202 = null;
    if (arguments.length > 1) {
      p__13202 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return int__GT_string__delegate.call(this, i, p__13202);
  };
  int__GT_string.cljs$lang$maxFixedArity = 1;
  int__GT_string.cljs$lang$applyTo = function(arglist__13205) {
    var i = cljs.core.first(arglist__13205);
    var p__13202 = cljs.core.rest(arglist__13205);
    return int__GT_string__delegate(i, p__13202);
  };
  int__GT_string.cljs$core$IFn$_invoke$arity$variadic = int__GT_string__delegate;
  return int__GT_string;
}();
garden.util.space_join = function space_join(xs) {
  return clojure.string.join.call(null, " ", cljs.core.map.call(null, garden.util.to_str, xs));
};
garden.util.comma_join = function comma_join(xs) {
  var ys = function() {
    var iter__9005__auto__ = function iter__13210(s__13211) {
      return new cljs.core.LazySeq(null, function() {
        var s__13211__$1 = s__13211;
        while (true) {
          var temp__4092__auto__ = cljs.core.seq.call(null, s__13211__$1);
          if (temp__4092__auto__) {
            var s__13211__$2 = temp__4092__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__13211__$2)) {
              var c__9003__auto__ = cljs.core.chunk_first.call(null, s__13211__$2);
              var size__9004__auto__ = cljs.core.count.call(null, c__9003__auto__);
              var b__13213 = cljs.core.chunk_buffer.call(null, size__9004__auto__);
              if (function() {
                var i__13212 = 0;
                while (true) {
                  if (i__13212 < size__9004__auto__) {
                    var x = cljs.core._nth.call(null, c__9003__auto__, i__13212);
                    cljs.core.chunk_append.call(null, b__13213, cljs.core.sequential_QMARK_.call(null, x) ? garden.util.space_join.call(null, x) : garden.util.to_str.call(null, x));
                    var G__13214 = i__13212 + 1;
                    i__13212 = G__13214;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13213), iter__13210.call(null, cljs.core.chunk_rest.call(null, s__13211__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13213), null);
              }
            } else {
              var x = cljs.core.first.call(null, s__13211__$2);
              return cljs.core.cons.call(null, cljs.core.sequential_QMARK_.call(null, x) ? garden.util.space_join.call(null, x) : garden.util.to_str.call(null, x), iter__13210.call(null, cljs.core.rest.call(null, s__13211__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__9005__auto__.call(null, xs);
  }();
  return clojure.string.join.call(null, ", ", ys);
};
garden.util.wrap_quotes = function wrap_quotes(s) {
  return[cljs.core.str('"'), cljs.core.str(s), cljs.core.str('"')].join("");
};
garden.util.hash_map_QMARK_ = function hash_map_QMARK_(x) {
  return cljs.core.map_QMARK_.call(null, x) && !function() {
    var G__13218 = x;
    if (G__13218) {
      var bit__8938__auto__ = G__13218.cljs$lang$protocol_mask$partition0$ & 67108864;
      if (bit__8938__auto__ || G__13218.cljs$core$IRecord$) {
        return true;
      } else {
        if (!G__13218.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IRecord, G__13218);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IRecord, G__13218);
    }
  }();
};
garden.util.rule_QMARK_ = cljs.core.vector_QMARK_;
garden.util.declaration_QMARK_ = garden.util.hash_map_QMARK_;
garden.util.at_rule_QMARK_ = function at_rule_QMARK_(x) {
  return x instanceof garden.types.CSSAtRule;
};
garden.util.at_media_QMARK_ = function at_media_QMARK_(x) {
  return garden.util.at_rule_QMARK_.call(null, x) && cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "identifier", "identifier", 3690438683)).cljs$core$IFn$_invoke$arity$1(x), new cljs.core.Keyword(null, "media", "media", 1117676374));
};
garden.util.at_keyframes_QMARK_ = function at_keyframes_QMARK_(x) {
  return garden.util.at_rule_QMARK_.call(null, x) && cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "identifier", "identifier", 3690438683)).cljs$core$IFn$_invoke$arity$1(x), new cljs.core.Keyword(null, "keyframes", "keyframes", 3862205239));
};
garden.util.at_import_QMARK_ = function at_import_QMARK_(x) {
  return garden.util.at_rule_QMARK_.call(null, x) && cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "identifier", "identifier", 3690438683)).cljs$core$IFn$_invoke$arity$1(x), new cljs.core.Keyword(null, "import", "import", 4124075799));
};
garden.util.prefix = function prefix(p, s) {
  var p__$1 = garden.util.to_str.call(null, p);
  if (cljs.core._EQ_.call(null, "-", cljs.core.last.call(null, p__$1))) {
    return[cljs.core.str(p__$1), cljs.core.str(s)].join("");
  } else {
    return[cljs.core.str(p__$1), cljs.core.str("-"), cljs.core.str(s)].join("");
  }
};
garden.util.vendor_prefix = function vendor_prefix(p, s) {
  var p__$1 = garden.util.to_str.call(null, p);
  if (cljs.core._EQ_.call(null, "-", cljs.core.first.call(null, p__$1))) {
    return garden.util.prefix.call(null, p__$1, s);
  } else {
    return garden.util.prefix.call(null, [cljs.core.str("-"), cljs.core.str(p__$1)].join(""), s);
  }
};
garden.util.natural_QMARK_ = function natural_QMARK_(n) {
  return cljs.core.integer_QMARK_.call(null, n) && n > 0;
};
garden.util.between_QMARK_ = function between_QMARK_(n, a, b) {
  var bottom = function() {
    var x__8608__auto__ = a;
    var y__8609__auto__ = b;
    return x__8608__auto__ < y__8609__auto__ ? x__8608__auto__ : y__8609__auto__;
  }();
  var top = function() {
    var x__8601__auto__ = a;
    var y__8602__auto__ = b;
    return x__8601__auto__ > y__8602__auto__ ? x__8601__auto__ : y__8602__auto__;
  }();
  return n >= bottom && n <= top;
};
garden.util.clip = function clip(a, b, n) {
  var vec__13220 = a <= b ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [a, b], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [b, a], null);
  var a__$1 = cljs.core.nth.call(null, vec__13220, 0, null);
  var b__$1 = cljs.core.nth.call(null, vec__13220, 1, null);
  var x__8601__auto__ = a__$1;
  var y__8602__auto__ = function() {
    var x__8608__auto__ = b__$1;
    var y__8609__auto__ = n;
    return x__8608__auto__ < y__8609__auto__ ? x__8608__auto__ : y__8609__auto__;
  }();
  return x__8601__auto__ > y__8602__auto__ ? x__8601__auto__ : y__8602__auto__;
};
garden.util.average = function() {
  var average__delegate = function(n, m, more) {
    return cljs.core.apply.call(null, cljs.core._PLUS_, n, m, more) / (2 + cljs.core.count.call(null, more));
  };
  var average = function(n, m, var_args) {
    var more = null;
    if (arguments.length > 2) {
      more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return average__delegate.call(this, n, m, more);
  };
  average.cljs$lang$maxFixedArity = 2;
  average.cljs$lang$applyTo = function(arglist__13221) {
    var n = cljs.core.first(arglist__13221);
    arglist__13221 = cljs.core.next(arglist__13221);
    var m = cljs.core.first(arglist__13221);
    var more = cljs.core.rest(arglist__13221);
    return average__delegate(n, m, more);
  };
  average.cljs$core$IFn$_invoke$arity$variadic = average__delegate;
  return average;
}();
garden.util.cartesian_product = function() {
  var cartesian_product__delegate = function(seqs) {
    var v_original_seqs = cljs.core.vec.call(null, seqs);
    var step = function(v_original_seqs) {
      return function step(v_seqs) {
        var increment = function(v_original_seqs) {
          return function(v_seqs__$1) {
            var i = cljs.core.count.call(null, v_seqs__$1) - 1;
            var v_seqs__$2 = v_seqs__$1;
            while (true) {
              if (cljs.core._EQ_.call(null, i, -1)) {
                return null;
              } else {
                var temp__4090__auto__ = cljs.core.next.call(null, v_seqs__$2.call(null, i));
                if (temp__4090__auto__) {
                  var rst = temp__4090__auto__;
                  return cljs.core.assoc.call(null, v_seqs__$2, i, rst);
                } else {
                  var G__13222 = i - 1;
                  var G__13223 = cljs.core.assoc.call(null, v_seqs__$2, i, v_original_seqs.call(null, i));
                  i = G__13222;
                  v_seqs__$2 = G__13223;
                  continue;
                }
              }
              break;
            }
          };
        }(v_original_seqs);
        if (cljs.core.truth_(v_seqs)) {
          return cljs.core.cons.call(null, cljs.core.map.call(null, cljs.core.first, v_seqs), new cljs.core.LazySeq(null, function(increment, v_original_seqs) {
            return function() {
              return step.call(null, increment.call(null, v_seqs));
            };
          }(increment, v_original_seqs), null, null));
        } else {
          return null;
        }
      };
    }(v_original_seqs);
    if (cljs.core.every_QMARK_.call(null, cljs.core.seq, seqs)) {
      return new cljs.core.LazySeq(null, function() {
        return step.call(null, v_original_seqs);
      }, null, null);
    } else {
      return null;
    }
  };
  var cartesian_product = function(var_args) {
    var seqs = null;
    if (arguments.length > 0) {
      seqs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cartesian_product__delegate.call(this, seqs);
  };
  cartesian_product.cljs$lang$maxFixedArity = 0;
  cartesian_product.cljs$lang$applyTo = function(arglist__13224) {
    var seqs = cljs.core.seq(arglist__13224);
    return cartesian_product__delegate(seqs);
  };
  cartesian_product.cljs$core$IFn$_invoke$arity$variadic = cartesian_product__delegate;
  return cartesian_product;
}();
goog.provide("garden.units");
goog.require("cljs.core");
goog.require("cljs.reader");
goog.require("garden.util");
goog.require("garden.util");
goog.require("cljs.reader");
goog.require("garden.types");
goog.require("garden.types");
garden.units.length_units = cljs.core.PersistentHashSet.fromArray([new cljs.core.Keyword(null, "in", "in", 1013907607), cljs.core.keyword.call(null, "%"), new cljs.core.Keyword(null, "px", "px", 1013907834), new cljs.core.Keyword(null, "cm", "cm", 1013907420), new cljs.core.Keyword(null, "pt", "pt", 1013907830), new cljs.core.Keyword(null, "mm", "mm", 1013907730), new cljs.core.Keyword(null, "pc", "pc", 1013907813)], true);
garden.units.angular_units = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "rad", "rad", 1014016903), null, new cljs.core.Keyword(null, "deg", "deg", 1014003576), null, new cljs.core.Keyword(null, "grad", "grad", 1017085376), null, new cljs.core.Keyword(null, "turn", "turn", 1017476079), null], null), null);
garden.units.time_units = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "ms", "ms", 1013907736), null, new cljs.core.Keyword(null, "s", "s", 1013904357), null], null), null);
garden.units.frequency_units = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "kHz", "kHz", 1014009423), null, new cljs.core.Keyword(null, "Hz", "Hz", 1013906596), null], null), null);
garden.units.resolution_units = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "dppx", "dppx", 1016994566), null, new cljs.core.Keyword(null, "dpi", "dpi", 1014003919), null, new cljs.core.Keyword(null, "dpcm", "dpcm", 1016994152), null], null), null);
garden.units.unit_QMARK_ = function unit_QMARK_(x) {
  return x instanceof garden.types.CSSUnit;
};
garden.units.length_QMARK_ = function length_QMARK_(x) {
  return garden.units.unit_QMARK_.call(null, x) && cljs.core.contains_QMARK_.call(null, garden.units.length_units, (new cljs.core.Keyword(null, "unit", "unit", 1017498870)).cljs$core$IFn$_invoke$arity$1(x));
};
garden.units.angle_QMARK_ = function angle_QMARK_(x) {
  return garden.units.unit_QMARK_.call(null, x) && cljs.core.contains_QMARK_.call(null, garden.units.angular_units, (new cljs.core.Keyword(null, "unit", "unit", 1017498870)).cljs$core$IFn$_invoke$arity$1(x));
};
garden.units.time_QMARK_ = function time_QMARK_(x) {
  return garden.units.unit_QMARK_.call(null, x) && cljs.core.contains_QMARK_.call(null, garden.units.time_units, (new cljs.core.Keyword(null, "unit", "unit", 1017498870)).cljs$core$IFn$_invoke$arity$1(x));
};
garden.units.frequency_QMARK_ = function frequency_QMARK_(x) {
  return garden.units.unit_QMARK_.call(null, x) && cljs.core.contains_QMARK_.call(null, garden.units.frequency_units, (new cljs.core.Keyword(null, "unit", "unit", 1017498870)).cljs$core$IFn$_invoke$arity$1(x));
};
garden.units.resolution_QMARK_ = function resolution_QMARK_(x) {
  return garden.units.unit_QMARK_.call(null, x) && cljs.core.contains_QMARK_.call(null, garden.units.resolution_units, (new cljs.core.Keyword(null, "unit", "unit", 1017498870)).cljs$core$IFn$_invoke$arity$1(x));
};
garden.units.conversions = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "in", "in", 1013907607), new cljs.core.Keyword(null, "em", "em", 1013907482), new cljs.core.Keyword(null, "rad", "rad", 1014016903), new cljs.core.Keyword(null, "kHz", "kHz", 1014009423), cljs.core.keyword.call(null, "%"), new cljs.core.Keyword(null, "px", "px", 1013907834), new cljs.core.Keyword(null, "Hz", "Hz", 1013906596), new cljs.core.Keyword(null, "cm", "cm", 1013907420), new cljs.core.Keyword(null, 
"deg", "deg", 1014003576), new cljs.core.Keyword(null, "pt", "pt", 1013907830), new cljs.core.Keyword(null, "mm", "mm", 1013907730), new cljs.core.Keyword(null, "grad", "grad", 1017085376), new cljs.core.Keyword(null, "ms", "ms", 1013907736), new cljs.core.Keyword(null, "rem", "rem", 1014017036), new cljs.core.Keyword(null, "turn", "turn", 1017476079), new cljs.core.Keyword(null, "s", "s", 1013904357), new cljs.core.Keyword(null, "pc", "pc", 1013907813)], [new cljs.core.PersistentArrayMap(null, 6, 
[new cljs.core.Keyword(null, "in", "in", 1013907607), 1, new cljs.core.Keyword(null, "cm", "cm", 1013907420), 2.54, new cljs.core.Keyword(null, "pc", "pc", 1013907813), 6, new cljs.core.Keyword(null, "mm", "mm", 1013907730), 25.4, new cljs.core.Keyword(null, "pt", "pt", 1013907830), 72, new cljs.core.Keyword(null, "px", "px", 1013907834), 96], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "em", "em", 1013907482), 1], null), new cljs.core.PersistentArrayMap(null, 2, 
[new cljs.core.Keyword(null, "rad", "rad", 1014016903), 1, new cljs.core.Keyword(null, "turn", "turn", 1017476079), 0.159154943], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "kHz", "kHz", 1014009423), 1], null), new cljs.core.PersistentArrayMap.fromArray([cljs.core.keyword.call(null, "%"), 1], true, false), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "px", "px", 1013907834), 1], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
"Hz", "Hz", 1013906596), 1, new cljs.core.Keyword(null, "kHz", "kHz", 1014009423), 0.001], null), new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "cm", "cm", 1013907420), 1, new cljs.core.Keyword(null, "pc", "pc", 1013907813), 2.36220473, new cljs.core.Keyword(null, "mm", "mm", 1013907730), 10, new cljs.core.Keyword(null, "pt", "pt", 1013907830), 28.3464567, new cljs.core.Keyword(null, "px", "px", 1013907834), 37.795275591], null), new cljs.core.PersistentArrayMap(null, 4, 
[new cljs.core.Keyword(null, "deg", "deg", 1014003576), 1, new cljs.core.Keyword(null, "grad", "grad", 1017085376), 1.111111111, new cljs.core.Keyword(null, "rad", "rad", 1014016903), 0.0174532925, new cljs.core.Keyword(null, "turn", "turn", 1017476079), 0.002777778], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "pt", "pt", 1013907830), 1, new cljs.core.Keyword(null, "px", "px", 1013907834), 1.3333333333], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, 
"mm", "mm", 1013907730), 1, new cljs.core.Keyword(null, "pt", "pt", 1013907830), 2.83464567, new cljs.core.Keyword(null, "px", "px", 1013907834), 3.7795275591], null), new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "grad", "grad", 1017085376), 1, new cljs.core.Keyword(null, "rad", "rad", 1014016903), 63.661977237, new cljs.core.Keyword(null, "turn", "turn", 1017476079), 0.0025], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "ms", "ms", 1013907736), 
1], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "rem", "rem", 1014017036), 1], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "turn", "turn", 1017476079), 1], null), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "s", "s", 1013904357), 1, new cljs.core.Keyword(null, "ms", "ms", 1013907736), 1E3], null), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "pc", "pc", 1013907813), 1, new cljs.core.Keyword(null, 
"mm", "mm", 1013907730), 4.23333333, new cljs.core.Keyword(null, "pt", "pt", 1013907830), 12, new cljs.core.Keyword(null, "px", "px", 1013907834), 16], null)]);
garden.units.convertable_QMARK_ = function convertable_QMARK_(unit) {
  return cljs.core.contains_QMARK_.call(null, garden.units.conversions, unit);
};
garden.units.convert = function convert(p__13225, right) {
  var map__13227 = p__13225;
  var map__13227__$1 = cljs.core.seq_QMARK_.call(null, map__13227) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13227) : map__13227;
  var m = cljs.core.get.call(null, map__13227__$1, new cljs.core.Keyword(null, "magnitude", "magnitude", 3292087682));
  var left = cljs.core.get.call(null, map__13227__$1, new cljs.core.Keyword(null, "unit", "unit", 1017498870));
  if (cljs.core.every_QMARK_.call(null, garden.units.convertable_QMARK_, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [left, right], null))) {
    var v1 = cljs.core.get_in.call(null, garden.units.conversions, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [left, right], null));
    var v2 = cljs.core.get_in.call(null, garden.units.conversions, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [right, left], null));
    if (cljs.core.truth_(v1)) {
      return new garden.types.CSSUnit(right, v1 * m);
    } else {
      if (cljs.core.truth_(v2)) {
        return new garden.types.CSSUnit(right, m / v2);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw cljs.core.ex_info.call(null, garden.util.format.call(null, "Can't convert %s to %s", cljs.core.name.call(null, left), cljs.core.name.call(null, right)), cljs.core.PersistentArrayMap.EMPTY);
        } else {
          return null;
        }
      }
    }
  } else {
    var x = cljs.core.first.call(null, cljs.core.drop_while.call(null, garden.units.convertable_QMARK_, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [left, right], null)));
    throw cljs.core.ex_info.call(null, [cljs.core.str("Inconvertible unit "), cljs.core.str(cljs.core.name.call(null, x))].join(""), cljs.core.PersistentArrayMap.EMPTY);
  }
};
garden.units.unit_re = /([+-]?\d+(?:\.?\d+)?)(p[xtc]|in|[cm]m|%|r?em|ex|ch|v(?:[wh]|m(?:in|ax))|deg|g?rad|turn|m?s|k?Hz|dp(?:i|cm|px))/;
garden.units.read_unit = function read_unit(s) {
  var temp__4092__auto__ = cljs.core.re_matches.call(null, garden.units.unit_re, s);
  if (cljs.core.truth_(temp__4092__auto__)) {
    var vec__13229 = temp__4092__auto__;
    var _ = cljs.core.nth.call(null, vec__13229, 0, null);
    var magnitude = cljs.core.nth.call(null, vec__13229, 1, null);
    var unit = cljs.core.nth.call(null, vec__13229, 2, null);
    var unit__$1 = cljs.core.keyword.call(null, unit);
    var magnitude__$1 = cljs.core.truth_(magnitude) ? cljs.reader.read_string.call(null, magnitude) : 0;
    return new garden.types.CSSUnit(unit__$1, magnitude__$1);
  } else {
    return null;
  }
};
garden.units.make_unit_predicate = function make_unit_predicate(unit) {
  return function(x) {
    return garden.units.unit_QMARK_.call(null, x) && cljs.core._EQ_.call(null, (new cljs.core.Keyword(null, "unit", "unit", 1017498870)).cljs$core$IFn$_invoke$arity$1(x), unit);
  };
};
garden.units.make_unit_fn = function make_unit_fn(unit) {
  return function(x) {
    if (typeof x === "number") {
      return new garden.types.CSSUnit(unit, x);
    } else {
      if (garden.units.unit_QMARK_.call(null, x)) {
        var or__8294__auto__ = function() {
          var and__8282__auto__ = cljs.core._EQ_.call(null, unit.call(null, x), unit);
          if (and__8282__auto__) {
            return x;
          } else {
            return and__8282__auto__;
          }
        }();
        if (cljs.core.truth_(or__8294__auto__)) {
          return or__8294__auto__;
        } else {
          return garden.units.convert.call(null, x, unit);
        }
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw cljs.core.ex_info.call(null, garden.util.format.call(null, "Don't know how to convert type %s to %s", cljs.core.type.call(null, x).getName(), cljs.core.name.call(null, unit)), cljs.core.PersistentArrayMap.EMPTY);
        } else {
          return null;
        }
      }
    }
  };
};
garden.units.make_unit_adder = function make_unit_adder(unit) {
  var u = garden.units.make_unit_fn.call(null, unit);
  return function() {
    var u_PLUS_ = null;
    var u_PLUS___0 = function() {
      return u.call(null, 0);
    };
    var u_PLUS___1 = function(x) {
      return u.call(null, x);
    };
    var u_PLUS___2 = function(x, y) {
      var map__13236 = u.call(null, x);
      var map__13236__$1 = cljs.core.seq_QMARK_.call(null, map__13236) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13236) : map__13236;
      var m1 = cljs.core.get.call(null, map__13236__$1, new cljs.core.Keyword(null, "magnitude", "magnitude", 3292087682));
      var map__13237 = u.call(null, y);
      var map__13237__$1 = cljs.core.seq_QMARK_.call(null, map__13237) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13237) : map__13237;
      var m2 = cljs.core.get.call(null, map__13237__$1, new cljs.core.Keyword(null, "magnitude", "magnitude", 3292087682));
      return u.call(null, m1 + m2);
    };
    var u_PLUS___3 = function() {
      var G__13238__delegate = function(x, y, more) {
        return cljs.core.reduce.call(null, u_PLUS_, u_PLUS_.call(null, x, y), more);
      };
      var G__13238 = function(x, y, var_args) {
        var more = null;
        if (arguments.length > 2) {
          more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__13238__delegate.call(this, x, y, more);
      };
      G__13238.cljs$lang$maxFixedArity = 2;
      G__13238.cljs$lang$applyTo = function(arglist__13239) {
        var x = cljs.core.first(arglist__13239);
        arglist__13239 = cljs.core.next(arglist__13239);
        var y = cljs.core.first(arglist__13239);
        var more = cljs.core.rest(arglist__13239);
        return G__13238__delegate(x, y, more);
      };
      G__13238.cljs$core$IFn$_invoke$arity$variadic = G__13238__delegate;
      return G__13238;
    }();
    u_PLUS_ = function(x, y, var_args) {
      var more = var_args;
      switch(arguments.length) {
        case 0:
          return u_PLUS___0.call(this);
        case 1:
          return u_PLUS___1.call(this, x);
        case 2:
          return u_PLUS___2.call(this, x, y);
        default:
          return u_PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    u_PLUS_.cljs$lang$maxFixedArity = 2;
    u_PLUS_.cljs$lang$applyTo = u_PLUS___3.cljs$lang$applyTo;
    u_PLUS_.cljs$core$IFn$_invoke$arity$0 = u_PLUS___0;
    u_PLUS_.cljs$core$IFn$_invoke$arity$1 = u_PLUS___1;
    u_PLUS_.cljs$core$IFn$_invoke$arity$2 = u_PLUS___2;
    u_PLUS_.cljs$core$IFn$_invoke$arity$variadic = u_PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
    return u_PLUS_;
  }();
};
garden.units.make_unit_subtractor = function make_unit_subtractor(unit) {
  var u = garden.units.make_unit_fn.call(null, unit);
  return function() {
    var u_ = null;
    var u___1 = function(x) {
      return u.call(null, -x);
    };
    var u___2 = function(x, y) {
      var map__13246 = u.call(null, x);
      var map__13246__$1 = cljs.core.seq_QMARK_.call(null, map__13246) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13246) : map__13246;
      var m1 = cljs.core.get.call(null, map__13246__$1, new cljs.core.Keyword(null, "magnitude", "magnitude", 3292087682));
      var map__13247 = u.call(null, y);
      var map__13247__$1 = cljs.core.seq_QMARK_.call(null, map__13247) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13247) : map__13247;
      var m2 = cljs.core.get.call(null, map__13247__$1, new cljs.core.Keyword(null, "magnitude", "magnitude", 3292087682));
      return u.call(null, m1 - m2);
    };
    var u___3 = function() {
      var G__13248__delegate = function(x, y, more) {
        return cljs.core.reduce.call(null, u_, u_.call(null, x, y), more);
      };
      var G__13248 = function(x, y, var_args) {
        var more = null;
        if (arguments.length > 2) {
          more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__13248__delegate.call(this, x, y, more);
      };
      G__13248.cljs$lang$maxFixedArity = 2;
      G__13248.cljs$lang$applyTo = function(arglist__13249) {
        var x = cljs.core.first(arglist__13249);
        arglist__13249 = cljs.core.next(arglist__13249);
        var y = cljs.core.first(arglist__13249);
        var more = cljs.core.rest(arglist__13249);
        return G__13248__delegate(x, y, more);
      };
      G__13248.cljs$core$IFn$_invoke$arity$variadic = G__13248__delegate;
      return G__13248;
    }();
    u_ = function(x, y, var_args) {
      var more = var_args;
      switch(arguments.length) {
        case 1:
          return u___1.call(this, x);
        case 2:
          return u___2.call(this, x, y);
        default:
          return u___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    u_.cljs$lang$maxFixedArity = 2;
    u_.cljs$lang$applyTo = u___3.cljs$lang$applyTo;
    u_.cljs$core$IFn$_invoke$arity$1 = u___1;
    u_.cljs$core$IFn$_invoke$arity$2 = u___2;
    u_.cljs$core$IFn$_invoke$arity$variadic = u___3.cljs$core$IFn$_invoke$arity$variadic;
    return u_;
  }();
};
garden.units.make_unit_multiplier = function make_unit_multiplier(unit) {
  var u = garden.units.make_unit_fn.call(null, unit);
  return function() {
    var u_STAR_ = null;
    var u_STAR___0 = function() {
      return u.call(null, 1);
    };
    var u_STAR___1 = function(x) {
      return u.call(null, x);
    };
    var u_STAR___2 = function(x, y) {
      var map__13256 = u.call(null, x);
      var map__13256__$1 = cljs.core.seq_QMARK_.call(null, map__13256) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13256) : map__13256;
      var m1 = cljs.core.get.call(null, map__13256__$1, new cljs.core.Keyword(null, "magnitude", "magnitude", 3292087682));
      var map__13257 = u.call(null, y);
      var map__13257__$1 = cljs.core.seq_QMARK_.call(null, map__13257) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13257) : map__13257;
      var m2 = cljs.core.get.call(null, map__13257__$1, new cljs.core.Keyword(null, "magnitude", "magnitude", 3292087682));
      return u.call(null, m1 * m2);
    };
    var u_STAR___3 = function() {
      var G__13258__delegate = function(x, y, more) {
        return cljs.core.reduce.call(null, u_STAR_, u_STAR_.call(null, x, y), more);
      };
      var G__13258 = function(x, y, var_args) {
        var more = null;
        if (arguments.length > 2) {
          more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__13258__delegate.call(this, x, y, more);
      };
      G__13258.cljs$lang$maxFixedArity = 2;
      G__13258.cljs$lang$applyTo = function(arglist__13259) {
        var x = cljs.core.first(arglist__13259);
        arglist__13259 = cljs.core.next(arglist__13259);
        var y = cljs.core.first(arglist__13259);
        var more = cljs.core.rest(arglist__13259);
        return G__13258__delegate(x, y, more);
      };
      G__13258.cljs$core$IFn$_invoke$arity$variadic = G__13258__delegate;
      return G__13258;
    }();
    u_STAR_ = function(x, y, var_args) {
      var more = var_args;
      switch(arguments.length) {
        case 0:
          return u_STAR___0.call(this);
        case 1:
          return u_STAR___1.call(this, x);
        case 2:
          return u_STAR___2.call(this, x, y);
        default:
          return u_STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    u_STAR_.cljs$lang$maxFixedArity = 2;
    u_STAR_.cljs$lang$applyTo = u_STAR___3.cljs$lang$applyTo;
    u_STAR_.cljs$core$IFn$_invoke$arity$0 = u_STAR___0;
    u_STAR_.cljs$core$IFn$_invoke$arity$1 = u_STAR___1;
    u_STAR_.cljs$core$IFn$_invoke$arity$2 = u_STAR___2;
    u_STAR_.cljs$core$IFn$_invoke$arity$variadic = u_STAR___3.cljs$core$IFn$_invoke$arity$variadic;
    return u_STAR_;
  }();
};
garden.units.make_unit_divider = function make_unit_divider(unit) {
  var u = garden.units.make_unit_fn.call(null, unit);
  return function() {
    var ud = null;
    var ud__1 = function(x) {
      return u.call(null, 1 / x);
    };
    var ud__2 = function(x, y) {
      var map__13266 = u.call(null, x);
      var map__13266__$1 = cljs.core.seq_QMARK_.call(null, map__13266) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13266) : map__13266;
      var m1 = cljs.core.get.call(null, map__13266__$1, new cljs.core.Keyword(null, "magnitude", "magnitude", 3292087682));
      var map__13267 = u.call(null, y);
      var map__13267__$1 = cljs.core.seq_QMARK_.call(null, map__13267) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13267) : map__13267;
      var m2 = cljs.core.get.call(null, map__13267__$1, new cljs.core.Keyword(null, "magnitude", "magnitude", 3292087682));
      return u.call(null, m1 / m2);
    };
    var ud__3 = function() {
      var G__13268__delegate = function(x, y, more) {
        return cljs.core.reduce.call(null, ud, ud.call(null, x, y), more);
      };
      var G__13268 = function(x, y, var_args) {
        var more = null;
        if (arguments.length > 2) {
          more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__13268__delegate.call(this, x, y, more);
      };
      G__13268.cljs$lang$maxFixedArity = 2;
      G__13268.cljs$lang$applyTo = function(arglist__13269) {
        var x = cljs.core.first(arglist__13269);
        arglist__13269 = cljs.core.next(arglist__13269);
        var y = cljs.core.first(arglist__13269);
        var more = cljs.core.rest(arglist__13269);
        return G__13268__delegate(x, y, more);
      };
      G__13268.cljs$core$IFn$_invoke$arity$variadic = G__13268__delegate;
      return G__13268;
    }();
    ud = function(x, y, var_args) {
      var more = var_args;
      switch(arguments.length) {
        case 1:
          return ud__1.call(this, x);
        case 2:
          return ud__2.call(this, x, y);
        default:
          return ud__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    ud.cljs$lang$maxFixedArity = 2;
    ud.cljs$lang$applyTo = ud__3.cljs$lang$applyTo;
    ud.cljs$core$IFn$_invoke$arity$1 = ud__1;
    ud.cljs$core$IFn$_invoke$arity$2 = ud__2;
    ud.cljs$core$IFn$_invoke$arity$variadic = ud__3.cljs$core$IFn$_invoke$arity$variadic;
    return ud;
  }();
};
garden.units.cm = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "cm", "cm", 1013907420));
garden.units.cm_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "cm", "cm", 1013907420));
garden.units.cm_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "cm", "cm", 1013907420));
garden.units.cm_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "cm", "cm", 1013907420));
garden.units.cm_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "cm", "cm", 1013907420));
garden.units.cm_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "cm", "cm", 1013907420));
garden.units.mm = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "mm", "mm", 1013907730));
garden.units.mm_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "mm", "mm", 1013907730));
garden.units.mm_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "mm", "mm", 1013907730));
garden.units.mm_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "mm", "mm", 1013907730));
garden.units.mm_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "mm", "mm", 1013907730));
garden.units.mm_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "mm", "mm", 1013907730));
garden.units.in$ = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "in", "in", 1013907607));
garden.units.in_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "in", "in", 1013907607));
garden.units.in_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "in", "in", 1013907607));
garden.units.in_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "in", "in", 1013907607));
garden.units.in_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "in", "in", 1013907607));
garden.units.in_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "in", "in", 1013907607));
garden.units.px = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "px", "px", 1013907834));
garden.units.px_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "px", "px", 1013907834));
garden.units.px_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "px", "px", 1013907834));
garden.units.px_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "px", "px", 1013907834));
garden.units.px_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "px", "px", 1013907834));
garden.units.px_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "px", "px", 1013907834));
garden.units.pt = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "pt", "pt", 1013907830));
garden.units.pt_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "pt", "pt", 1013907830));
garden.units.pt_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "pt", "pt", 1013907830));
garden.units.pt_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "pt", "pt", 1013907830));
garden.units.pt_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "pt", "pt", 1013907830));
garden.units.pt_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "pt", "pt", 1013907830));
garden.units.pc = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "pc", "pc", 1013907813));
garden.units.pc_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "pc", "pc", 1013907813));
garden.units.pc_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "pc", "pc", 1013907813));
garden.units.pc_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "pc", "pc", 1013907813));
garden.units.pc_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "pc", "pc", 1013907813));
garden.units.pc_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "pc", "pc", 1013907813));
garden.units.percent = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "%", "%", 1013904279));
garden.units.percent_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "%", "%", 1013904279));
garden.units.percent_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "%", "%", 1013904279));
garden.units.percent_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "%", "%", 1013904279));
garden.units.percent_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "%", "%", 1013904279));
garden.units.percent_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "%", "%", 1013904279));
garden.units.em = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "em", "em", 1013907482));
garden.units.em_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "em", "em", 1013907482));
garden.units.em_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "em", "em", 1013907482));
garden.units.em_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "em", "em", 1013907482));
garden.units.em_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "em", "em", 1013907482));
garden.units.em_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "em", "em", 1013907482));
garden.units.ex = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "ex", "ex", 1013907493));
garden.units.ex_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "ex", "ex", 1013907493));
garden.units.ex_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "ex", "ex", 1013907493));
garden.units.ex_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "ex", "ex", 1013907493));
garden.units.ex_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "ex", "ex", 1013907493));
garden.units.ex_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "ex", "ex", 1013907493));
garden.units.ch = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "ch", "ch", 1013907415));
garden.units.ch_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "ch", "ch", 1013907415));
garden.units.ch_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "ch", "ch", 1013907415));
garden.units.ch_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "ch", "ch", 1013907415));
garden.units.ch_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "ch", "ch", 1013907415));
garden.units.ch_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "ch", "ch", 1013907415));
garden.units.rem = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "rem", "rem", 1014017036));
garden.units.rem_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "rem", "rem", 1014017036));
garden.units.rem_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "rem", "rem", 1014017036));
garden.units.rem_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "rem", "rem", 1014017036));
garden.units.rem_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "rem", "rem", 1014017036));
garden.units.rem_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "rem", "rem", 1014017036));
garden.units.vw = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "vw", "vw", 1013908019));
garden.units.vw_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "vw", "vw", 1013908019));
garden.units.vw_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "vw", "vw", 1013908019));
garden.units.vw_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "vw", "vw", 1013908019));
garden.units.vw_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "vw", "vw", 1013908019));
garden.units.vw_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "vw", "vw", 1013908019));
garden.units.vh = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "vh", "vh", 1013908004));
garden.units.vh_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "vh", "vh", 1013908004));
garden.units.vh_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "vh", "vh", 1013908004));
garden.units.vh_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "vh", "vh", 1013908004));
garden.units.vh_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "vh", "vh", 1013908004));
garden.units.vh_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "vh", "vh", 1013908004));
garden.units.vmin = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "vmin", "vmin", 1017527694));
garden.units.vmin_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "vmin", "vmin", 1017527694));
garden.units.vmin_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "vmin", "vmin", 1017527694));
garden.units.vmin_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "vmin", "vmin", 1017527694));
garden.units.vmin_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "vmin", "vmin", 1017527694));
garden.units.vmin_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "vmin", "vmin", 1017527694));
garden.units.vmax = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "vmax", "vmax", 1017527456));
garden.units.vmax_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "vmax", "vmax", 1017527456));
garden.units.vmax_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "vmax", "vmax", 1017527456));
garden.units.vmax_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "vmax", "vmax", 1017527456));
garden.units.vmax_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "vmax", "vmax", 1017527456));
garden.units.vmax_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "vmax", "vmax", 1017527456));
garden.units.deg = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "deg", "deg", 1014003576));
garden.units.deg_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "deg", "deg", 1014003576));
garden.units.deg_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "deg", "deg", 1014003576));
garden.units.deg_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "deg", "deg", 1014003576));
garden.units.deg_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "deg", "deg", 1014003576));
garden.units.deg_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "deg", "deg", 1014003576));
garden.units.grad = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "grad", "grad", 1017085376));
garden.units.grad_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "grad", "grad", 1017085376));
garden.units.grad_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "grad", "grad", 1017085376));
garden.units.grad_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "grad", "grad", 1017085376));
garden.units.grad_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "grad", "grad", 1017085376));
garden.units.grad_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "grad", "grad", 1017085376));
garden.units.rad = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "rad", "rad", 1014016903));
garden.units.rad_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "rad", "rad", 1014016903));
garden.units.rad_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "rad", "rad", 1014016903));
garden.units.rad_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "rad", "rad", 1014016903));
garden.units.rad_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "rad", "rad", 1014016903));
garden.units.rad_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "rad", "rad", 1014016903));
garden.units.turn = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "turn", "turn", 1017476079));
garden.units.turn_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "turn", "turn", 1017476079));
garden.units.turn_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "turn", "turn", 1017476079));
garden.units.turn_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "turn", "turn", 1017476079));
garden.units.turn_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "turn", "turn", 1017476079));
garden.units.turn_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "turn", "turn", 1017476079));
garden.units.s = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "s", "s", 1013904357));
garden.units.s_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "s", "s", 1013904357));
garden.units.s_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "s", "s", 1013904357));
garden.units.s_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "s", "s", 1013904357));
garden.units.s_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "s", "s", 1013904357));
garden.units.s_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "s", "s", 1013904357));
garden.units.ms = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "ms", "ms", 1013907736));
garden.units.ms_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "ms", "ms", 1013907736));
garden.units.ms_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "ms", "ms", 1013907736));
garden.units.ms_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "ms", "ms", 1013907736));
garden.units.ms_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "ms", "ms", 1013907736));
garden.units.ms_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "ms", "ms", 1013907736));
garden.units.Hz = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "Hz", "Hz", 1013906596));
garden.units.Hz_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "Hz", "Hz", 1013906596));
garden.units.Hz_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "Hz", "Hz", 1013906596));
garden.units.Hz_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "Hz", "Hz", 1013906596));
garden.units.Hz_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "Hz", "Hz", 1013906596));
garden.units.Hz_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "Hz", "Hz", 1013906596));
garden.units.kHz = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "kHz", "kHz", 1014009423));
garden.units.kHz_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "kHz", "kHz", 1014009423));
garden.units.kHz_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "kHz", "kHz", 1014009423));
garden.units.kHz_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "kHz", "kHz", 1014009423));
garden.units.kHz_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "kHz", "kHz", 1014009423));
garden.units.kHz_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "kHz", "kHz", 1014009423));
garden.units.dpi = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "dpi", "dpi", 1014003919));
garden.units.dpi_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "dpi", "dpi", 1014003919));
garden.units.dpi_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "dpi", "dpi", 1014003919));
garden.units.dpi_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "dpi", "dpi", 1014003919));
garden.units.dpi_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "dpi", "dpi", 1014003919));
garden.units.dpi_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "dpi", "dpi", 1014003919));
garden.units.dpcm = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "dpcm", "dpcm", 1016994152));
garden.units.dpcm_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "dpcm", "dpcm", 1016994152));
garden.units.dpcm_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "dpcm", "dpcm", 1016994152));
garden.units.dpcm_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "dpcm", "dpcm", 1016994152));
garden.units.dpcm_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "dpcm", "dpcm", 1016994152));
garden.units.dpcm_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "dpcm", "dpcm", 1016994152));
garden.units.dppx = garden.units.make_unit_fn.call(null, new cljs.core.Keyword(null, "dppx", "dppx", 1016994566));
garden.units.dppx_QMARK_ = garden.units.make_unit_predicate.call(null, new cljs.core.Keyword(null, "dppx", "dppx", 1016994566));
garden.units.dppx_PLUS_ = garden.units.make_unit_adder.call(null, new cljs.core.Keyword(null, "dppx", "dppx", 1016994566));
garden.units.dppx_ = garden.units.make_unit_subtractor.call(null, new cljs.core.Keyword(null, "dppx", "dppx", 1016994566));
garden.units.dppx_STAR_ = garden.units.make_unit_multiplier.call(null, new cljs.core.Keyword(null, "dppx", "dppx", 1016994566));
garden.units.dppx_div = garden.units.make_unit_divider.call(null, new cljs.core.Keyword(null, "dppx", "dppx", 1016994566));
goog.provide("garden.color");
goog.require("cljs.core");
goog.require("garden.util");
goog.require("garden.util");
goog.require("garden.util");
goog.require("clojure.string");
goog.require("clojure.string");
garden.color.CSSColor = function(red, green, blue, hue, saturation, lightness, alpha, __meta, __extmap) {
  this.red = red;
  this.green = green;
  this.blue = blue;
  this.hue = hue;
  this.saturation = saturation;
  this.lightness = lightness;
  this.alpha = alpha;
  this.__meta = __meta;
  this.__extmap = __extmap;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2229667595;
  if (arguments.length > 7) {
    this.__meta = __meta;
    this.__extmap = __extmap;
  } else {
    this.__meta = null;
    this.__extmap = null;
  }
};
garden.color.CSSColor.prototype.cljs$core$IHash$_hash$arity$1 = function(this__8869__auto__) {
  var self__ = this;
  var this__8869__auto____$1 = this;
  var h__8705__auto__ = self__.__hash;
  if (!(h__8705__auto__ == null)) {
    return h__8705__auto__;
  } else {
    var h__8705__auto____$1 = cljs.core.hash_imap.call(null, this__8869__auto____$1);
    self__.__hash = h__8705__auto____$1;
    return h__8705__auto____$1;
  }
};
garden.color.CSSColor.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this__8874__auto__, k__8875__auto__) {
  var self__ = this;
  var this__8874__auto____$1 = this;
  return cljs.core._lookup.call(null, this__8874__auto____$1, k__8875__auto__, null);
};
garden.color.CSSColor.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this__8876__auto__, k13113, else__8877__auto__) {
  var self__ = this;
  var this__8876__auto____$1 = this;
  if (cljs.core.keyword_identical_QMARK_.call(null, k13113, new cljs.core.Keyword(null, "red", "red", 1014017027))) {
    return self__.red;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, k13113, new cljs.core.Keyword(null, "green", "green", 1112523381))) {
      return self__.green;
    } else {
      if (cljs.core.keyword_identical_QMARK_.call(null, k13113, new cljs.core.Keyword(null, "blue", "blue", 1016931276))) {
        return self__.blue;
      } else {
        if (cljs.core.keyword_identical_QMARK_.call(null, k13113, new cljs.core.Keyword(null, "hue", "hue", 1014007914))) {
          return self__.hue;
        } else {
          if (cljs.core.keyword_identical_QMARK_.call(null, k13113, new cljs.core.Keyword(null, "saturation", "saturation", 783413060))) {
            return self__.saturation;
          } else {
            if (cljs.core.keyword_identical_QMARK_.call(null, k13113, new cljs.core.Keyword(null, "lightness", "lightness", 1700345823))) {
              return self__.lightness;
            } else {
              if (cljs.core.keyword_identical_QMARK_.call(null, k13113, new cljs.core.Keyword(null, "alpha", "alpha", 1106814160))) {
                return self__.alpha;
              } else {
                if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                  return cljs.core.get.call(null, self__.__extmap, k13113, else__8877__auto__);
                } else {
                  return null;
                }
              }
            }
          }
        }
      }
    }
  }
};
garden.color.CSSColor.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(this__8881__auto__, k__8882__auto__, G__13112) {
  var self__ = this;
  var this__8881__auto____$1 = this;
  var pred__13116 = cljs.core.keyword_identical_QMARK_;
  var expr__13117 = k__8882__auto__;
  if (cljs.core.truth_(pred__13116.call(null, new cljs.core.Keyword(null, "red", "red", 1014017027), expr__13117))) {
    return new garden.color.CSSColor(G__13112, self__.green, self__.blue, self__.hue, self__.saturation, self__.lightness, self__.alpha, self__.__meta, self__.__extmap, null);
  } else {
    if (cljs.core.truth_(pred__13116.call(null, new cljs.core.Keyword(null, "green", "green", 1112523381), expr__13117))) {
      return new garden.color.CSSColor(self__.red, G__13112, self__.blue, self__.hue, self__.saturation, self__.lightness, self__.alpha, self__.__meta, self__.__extmap, null);
    } else {
      if (cljs.core.truth_(pred__13116.call(null, new cljs.core.Keyword(null, "blue", "blue", 1016931276), expr__13117))) {
        return new garden.color.CSSColor(self__.red, self__.green, G__13112, self__.hue, self__.saturation, self__.lightness, self__.alpha, self__.__meta, self__.__extmap, null);
      } else {
        if (cljs.core.truth_(pred__13116.call(null, new cljs.core.Keyword(null, "hue", "hue", 1014007914), expr__13117))) {
          return new garden.color.CSSColor(self__.red, self__.green, self__.blue, G__13112, self__.saturation, self__.lightness, self__.alpha, self__.__meta, self__.__extmap, null);
        } else {
          if (cljs.core.truth_(pred__13116.call(null, new cljs.core.Keyword(null, "saturation", "saturation", 783413060), expr__13117))) {
            return new garden.color.CSSColor(self__.red, self__.green, self__.blue, self__.hue, G__13112, self__.lightness, self__.alpha, self__.__meta, self__.__extmap, null);
          } else {
            if (cljs.core.truth_(pred__13116.call(null, new cljs.core.Keyword(null, "lightness", "lightness", 1700345823), expr__13117))) {
              return new garden.color.CSSColor(self__.red, self__.green, self__.blue, self__.hue, self__.saturation, G__13112, self__.alpha, self__.__meta, self__.__extmap, null);
            } else {
              if (cljs.core.truth_(pred__13116.call(null, new cljs.core.Keyword(null, "alpha", "alpha", 1106814160), expr__13117))) {
                return new garden.color.CSSColor(self__.red, self__.green, self__.blue, self__.hue, self__.saturation, self__.lightness, G__13112, self__.__meta, self__.__extmap, null);
              } else {
                return new garden.color.CSSColor(self__.red, self__.green, self__.blue, self__.hue, self__.saturation, self__.lightness, self__.alpha, self__.__meta, cljs.core.assoc.call(null, self__.__extmap, k__8882__auto__, G__13112), null);
              }
            }
          }
        }
      }
    }
  }
};
garden.color.CSSColor.prototype.call = function() {
  var G__13119 = null;
  var G__13119__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return this$;
  };
  var G__13119__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core.get.call(null, this$, k);
  };
  var G__13119__3 = function(self__, k, missing) {
    var self__ = this;
    var self____$1 = this;
    var this$ = self____$1;
    return cljs.core.get.call(null, this$, k, missing);
  };
  G__13119 = function(self__, k, missing) {
    switch(arguments.length) {
      case 1:
        return G__13119__1.call(this, self__);
      case 2:
        return G__13119__2.call(this, self__, k);
      case 3:
        return G__13119__3.call(this, self__, k, missing);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  return G__13119;
}();
garden.color.CSSColor.prototype.apply = function(self__, args13115) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args13115)));
};
garden.color.CSSColor.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var this$ = this;
  return this$;
};
garden.color.CSSColor.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var this$ = this;
  return cljs.core.get.call(null, this$, k);
};
garden.color.CSSColor.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, missing) {
  var self__ = this;
  var this$ = this;
  return cljs.core.get.call(null, this$, k, missing);
};
garden.color.CSSColor.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(this__8888__auto__, writer__8889__auto__, opts__8890__auto__) {
  var self__ = this;
  var this__8888__auto____$1 = this;
  var pr_pair__8891__auto__ = function(keyval__8892__auto__) {
    return cljs.core.pr_sequential_writer.call(null, writer__8889__auto__, cljs.core.pr_writer, "", " ", "", opts__8890__auto__, keyval__8892__auto__);
  };
  return cljs.core.pr_sequential_writer.call(null, writer__8889__auto__, pr_pair__8891__auto__, "#garden.color.CSSColor{", ", ", "}", opts__8890__auto__, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "red", "red", 1014017027), self__.red], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [new cljs.core.Keyword(null, "green", "green", 1112523381), self__.green], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "blue", "blue", 1016931276), self__.blue], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "hue", "hue", 1014007914), self__.hue], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
  "saturation", "saturation", 783413060), self__.saturation], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "lightness", "lightness", 1700345823), self__.lightness], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "alpha", "alpha", 1106814160), self__.alpha], null)], null), self__.__extmap));
};
garden.color.CSSColor.prototype.cljs$core$ICollection$_conj$arity$2 = function(this__8879__auto__, entry__8880__auto__) {
  var self__ = this;
  var this__8879__auto____$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry__8880__auto__)) {
    return cljs.core._assoc.call(null, this__8879__auto____$1, cljs.core._nth.call(null, entry__8880__auto__, 0), cljs.core._nth.call(null, entry__8880__auto__, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, this__8879__auto____$1, entry__8880__auto__);
  }
};
garden.color.CSSColor.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this__8886__auto__) {
  var self__ = this;
  var this__8886__auto____$1 = this;
  return cljs.core.seq.call(null, cljs.core.concat.call(null, new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "red", "red", 1014017027), self__.red], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "green", "green", 1112523381), self__.green], null), new cljs.core.PersistentVector(null, 
  2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "blue", "blue", 1016931276), self__.blue], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "hue", "hue", 1014007914), self__.hue], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "saturation", "saturation", 783413060), self__.saturation], null), new cljs.core.PersistentVector(null, 2, 
  5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "lightness", "lightness", 1700345823), self__.lightness], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "alpha", "alpha", 1106814160), self__.alpha], null)], null), self__.__extmap));
};
garden.color.CSSColor.prototype.cljs$core$ICounted$_count$arity$1 = function(this__8878__auto__) {
  var self__ = this;
  var this__8878__auto____$1 = this;
  return 7 + cljs.core.count.call(null, self__.__extmap);
};
garden.color.CSSColor.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this__8870__auto__, other__8871__auto__) {
  var self__ = this;
  var this__8870__auto____$1 = this;
  if (cljs.core.truth_(function() {
    var and__8282__auto__ = other__8871__auto__;
    if (cljs.core.truth_(and__8282__auto__)) {
      return this__8870__auto____$1.constructor === other__8871__auto__.constructor && cljs.core.equiv_map.call(null, this__8870__auto____$1, other__8871__auto__);
    } else {
      return and__8282__auto__;
    }
  }())) {
    return true;
  } else {
    return false;
  }
};
garden.color.CSSColor.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this__8873__auto__, G__13112) {
  var self__ = this;
  var this__8873__auto____$1 = this;
  return new garden.color.CSSColor(self__.red, self__.green, self__.blue, self__.hue, self__.saturation, self__.lightness, self__.alpha, G__13112, self__.__extmap, self__.__hash);
};
garden.color.CSSColor.prototype.cljs$core$IMeta$_meta$arity$1 = function(this__8872__auto__) {
  var self__ = this;
  var this__8872__auto____$1 = this;
  return self__.__meta;
};
garden.color.CSSColor.prototype.cljs$core$IMap$_dissoc$arity$2 = function(this__8883__auto__, k__8884__auto__) {
  var self__ = this;
  var this__8883__auto____$1 = this;
  if (cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null, "red", "red", 1014017027), null, new cljs.core.Keyword(null, "alpha", "alpha", 1106814160), null, new cljs.core.Keyword(null, "hue", "hue", 1014007914), null, new cljs.core.Keyword(null, "blue", "blue", 1016931276), null, new cljs.core.Keyword(null, "lightness", "lightness", 1700345823), null, new cljs.core.Keyword(null, "green", "green", 1112523381), 
  null, new cljs.core.Keyword(null, "saturation", "saturation", 783413060), null], null), null), k__8884__auto__)) {
    return cljs.core.dissoc.call(null, cljs.core.with_meta.call(null, cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, this__8883__auto____$1), self__.__meta), k__8884__auto__);
  } else {
    return new garden.color.CSSColor(self__.red, self__.green, self__.blue, self__.hue, self__.saturation, self__.lightness, self__.alpha, self__.__meta, cljs.core.not_empty.call(null, cljs.core.dissoc.call(null, self__.__extmap, k__8884__auto__)), null);
  }
};
garden.color.CSSColor.cljs$lang$type = true;
garden.color.CSSColor.cljs$lang$ctorPrSeq = function(this__8908__auto__) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, "garden.color/CSSColor");
};
garden.color.CSSColor.cljs$lang$ctorPrWriter = function(this__8908__auto__, writer__8909__auto__) {
  return cljs.core._write.call(null, writer__8909__auto__, "garden.color/CSSColor");
};
garden.color.__GT_CSSColor = function __GT_CSSColor(red, green, blue, hue, saturation, lightness, alpha) {
  return new garden.color.CSSColor(red, green, blue, hue, saturation, lightness, alpha);
};
garden.color.map__GT_CSSColor = function map__GT_CSSColor(G__13114) {
  return new garden.color.CSSColor((new cljs.core.Keyword(null, "red", "red", 1014017027)).cljs$core$IFn$_invoke$arity$1(G__13114), (new cljs.core.Keyword(null, "green", "green", 1112523381)).cljs$core$IFn$_invoke$arity$1(G__13114), (new cljs.core.Keyword(null, "blue", "blue", 1016931276)).cljs$core$IFn$_invoke$arity$1(G__13114), (new cljs.core.Keyword(null, "hue", "hue", 1014007914)).cljs$core$IFn$_invoke$arity$1(G__13114), (new cljs.core.Keyword(null, "saturation", "saturation", 783413060)).cljs$core$IFn$_invoke$arity$1(G__13114), 
  (new cljs.core.Keyword(null, "lightness", "lightness", 1700345823)).cljs$core$IFn$_invoke$arity$1(G__13114), (new cljs.core.Keyword(null, "alpha", "alpha", 1106814160)).cljs$core$IFn$_invoke$arity$1(G__13114), null, cljs.core.dissoc.call(null, G__13114, new cljs.core.Keyword(null, "red", "red", 1014017027), new cljs.core.Keyword(null, "green", "green", 1112523381), new cljs.core.Keyword(null, "blue", "blue", 1016931276), new cljs.core.Keyword(null, "hue", "hue", 1014007914), new cljs.core.Keyword(null, 
  "saturation", "saturation", 783413060), new cljs.core.Keyword(null, "lightness", "lightness", 1700345823), new cljs.core.Keyword(null, "alpha", "alpha", 1106814160)));
};
garden.color.as_color = garden.color.map__GT_CSSColor;
garden.color.rgb = function() {
  var rgb = null;
  var rgb__1 = function(p__13121) {
    var vec__13123 = p__13121;
    var r = cljs.core.nth.call(null, vec__13123, 0, null);
    var g = cljs.core.nth.call(null, vec__13123, 1, null);
    var b = cljs.core.nth.call(null, vec__13123, 2, null);
    var vs = vec__13123;
    if (cljs.core.every_QMARK_.call(null, function(p1__13120_SHARP_) {
      return garden.util.between_QMARK_.call(null, p1__13120_SHARP_, 0, 255);
    }, vs)) {
      return garden.color.as_color.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "red", "red", 1014017027), r, new cljs.core.Keyword(null, "green", "green", 1112523381), g, new cljs.core.Keyword(null, "blue", "blue", 1016931276), b], null));
    } else {
      throw cljs.core.ex_info.call(null, "RGB values must be between 0 and 255", cljs.core.PersistentArrayMap.EMPTY);
    }
  };
  var rgb__3 = function(r, g, b) {
    return rgb.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [r, g, b], null));
  };
  rgb = function(r, g, b) {
    switch(arguments.length) {
      case 1:
        return rgb__1.call(this, r);
      case 3:
        return rgb__3.call(this, r, g, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rgb.cljs$core$IFn$_invoke$arity$1 = rgb__1;
  rgb.cljs$core$IFn$_invoke$arity$3 = rgb__3;
  return rgb;
}();
garden.color.rgba = function() {
  var rgba = null;
  var rgba__1 = function(p__13124) {
    var vec__13126 = p__13124;
    var r = cljs.core.nth.call(null, vec__13126, 0, null);
    var g = cljs.core.nth.call(null, vec__13126, 1, null);
    var b = cljs.core.nth.call(null, vec__13126, 2, null);
    var a = cljs.core.nth.call(null, vec__13126, 3, null);
    if (garden.util.between_QMARK_.call(null, a, 0, 1)) {
      return garden.color.as_color.call(null, cljs.core.assoc.call(null, garden.color.rgb.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [r, g, b], null)), new cljs.core.Keyword(null, "alpha", "alpha", 1106814160), a));
    } else {
      throw cljs.core.ex_info.call(null, "Alpha value must be between 0 and 1", cljs.core.PersistentArrayMap.EMPTY);
    }
  };
  var rgba__4 = function(r, g, b, a) {
    return rgba.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [r, g, b, a], null));
  };
  rgba = function(r, g, b, a) {
    switch(arguments.length) {
      case 1:
        return rgba__1.call(this, r);
      case 4:
        return rgba__4.call(this, r, g, b, a);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rgba.cljs$core$IFn$_invoke$arity$1 = rgba__1;
  rgba.cljs$core$IFn$_invoke$arity$4 = rgba__4;
  return rgba;
}();
garden.color.hsl = function() {
  var hsl = null;
  var hsl__1 = function(p__13128) {
    var vec__13131 = p__13128;
    var h = cljs.core.nth.call(null, vec__13131, 0, null);
    var s = cljs.core.nth.call(null, vec__13131, 1, null);
    var l = cljs.core.nth.call(null, vec__13131, 2, null);
    var vec__13132 = cljs.core.map.call(null, function(p1__13127_SHARP_) {
      return cljs.core.get.call(null, p1__13127_SHARP_, new cljs.core.Keyword(null, "magnitude", "magnitude", 3292087682), p1__13127_SHARP_);
    }, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [h, s, l], null));
    var h__$1 = cljs.core.nth.call(null, vec__13132, 0, null);
    var s__$1 = cljs.core.nth.call(null, vec__13132, 1, null);
    var l__$1 = cljs.core.nth.call(null, vec__13132, 2, null);
    if (garden.util.between_QMARK_.call(null, s__$1, 0, 100) && garden.util.between_QMARK_.call(null, l__$1, 0, 100)) {
      return garden.color.as_color.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "hue", "hue", 1014007914), cljs.core.mod.call(null, h__$1, 360), new cljs.core.Keyword(null, "saturation", "saturation", 783413060), s__$1, new cljs.core.Keyword(null, "lightness", "lightness", 1700345823), l__$1], null));
    } else {
      throw cljs.core.ex_info.call(null, "Saturation and lightness must be between 0(%) and 100(%)", cljs.core.PersistentArrayMap.EMPTY);
    }
  };
  var hsl__3 = function(h, s, l) {
    return hsl.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [h, s, l], null));
  };
  hsl = function(h, s, l) {
    switch(arguments.length) {
      case 1:
        return hsl__1.call(this, h);
      case 3:
        return hsl__3.call(this, h, s, l);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hsl.cljs$core$IFn$_invoke$arity$1 = hsl__1;
  hsl.cljs$core$IFn$_invoke$arity$3 = hsl__3;
  return hsl;
}();
garden.color.hsla = function() {
  var hsla = null;
  var hsla__1 = function(p__13133) {
    var vec__13135 = p__13133;
    var h = cljs.core.nth.call(null, vec__13135, 0, null);
    var s = cljs.core.nth.call(null, vec__13135, 1, null);
    var l = cljs.core.nth.call(null, vec__13135, 2, null);
    var a = cljs.core.nth.call(null, vec__13135, 3, null);
    if (garden.util.between_QMARK_.call(null, a, 0, 1)) {
      return garden.color.as_color.call(null, cljs.core.assoc.call(null, garden.color.hsl.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [h, s, l], null)), new cljs.core.Keyword(null, "alpha", "alpha", 1106814160), a));
    } else {
      throw cljs.core.ex_info.call(null, "Alpha value must be between 0 and 1", cljs.core.PersistentArrayMap.EMPTY);
    }
  };
  var hsla__4 = function(h, s, l, a) {
    return hsla.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [h, s, l, a], null));
  };
  hsla = function(h, s, l, a) {
    switch(arguments.length) {
      case 1:
        return hsla__1.call(this, h);
      case 4:
        return hsla__4.call(this, h, s, l, a);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hsla.cljs$core$IFn$_invoke$arity$1 = hsla__1;
  hsla.cljs$core$IFn$_invoke$arity$4 = hsla__4;
  return hsla;
}();
garden.color.rgb_QMARK_ = function rgb_QMARK_(color) {
  return cljs.core.map_QMARK_.call(null, color) && cljs.core.every_QMARK_.call(null, color, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "red", "red", 1014017027), null, new cljs.core.Keyword(null, "blue", "blue", 1016931276), null, new cljs.core.Keyword(null, "green", "green", 1112523381), null], null), null));
};
garden.color.hsl_QMARK_ = function hsl_QMARK_(color) {
  return cljs.core.map_QMARK_.call(null, color) && cljs.core.every_QMARK_.call(null, color, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "hue", "hue", 1014007914), null, new cljs.core.Keyword(null, "lightness", "lightness", 1700345823), null, new cljs.core.Keyword(null, "saturation", "saturation", 783413060), null], null), null));
};
garden.color.color_QMARK_ = function color_QMARK_(x) {
  return garden.color.rgb_QMARK_.call(null, x) || garden.color.hsl_QMARK_.call(null, x);
};
garden.color.hex_re = /#?([\da-fA-F]{6}|[\da-fA-F]{3})/;
garden.color.hex_QMARK_ = function hex_QMARK_(x) {
  return cljs.core.boolean$.call(null, function() {
    var and__8282__auto__ = typeof x === "string";
    if (and__8282__auto__) {
      return cljs.core.re_matches.call(null, garden.color.hex_re, x);
    } else {
      return and__8282__auto__;
    }
  }());
};
garden.color.hex__GT_rgb = function hex__GT_rgb(s) {
  var temp__4092__auto__ = cljs.core.re_matches.call(null, garden.color.hex_re, s);
  if (cljs.core.truth_(temp__4092__auto__)) {
    var vec__13139 = temp__4092__auto__;
    var _ = cljs.core.nth.call(null, vec__13139, 0, null);
    var hex = cljs.core.nth.call(null, vec__13139, 1, null);
    var hex__$1 = cljs.core._EQ_.call(null, 3, cljs.core.count.call(null, hex)) ? cljs.core.apply.call(null, cljs.core.str, cljs.core.mapcat.call(null, function(p1__13136_SHARP_) {
      return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, p1__13136_SHARP_), p1__13136_SHARP_);
    }, hex)) : hex;
    return garden.color.rgb.call(null, cljs.core.map.call(null, function(p1__13137_SHARP_) {
      return garden.util.string__GT_int.call(null, p1__13137_SHARP_, 16);
    }, cljs.core.re_seq.call(null, /[\da-fA-F]{2}/, hex__$1)));
  } else {
    return null;
  }
};
garden.color.rgb__GT_hex = function rgb__GT_hex(p__13140) {
  var map__13142 = p__13140;
  var map__13142__$1 = cljs.core.seq_QMARK_.call(null, map__13142) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13142) : map__13142;
  var r = cljs.core.get.call(null, map__13142__$1, new cljs.core.Keyword(null, "red", "red", 1014017027));
  var g = cljs.core.get.call(null, map__13142__$1, new cljs.core.Keyword(null, "green", "green", 1112523381));
  var b = cljs.core.get.call(null, map__13142__$1, new cljs.core.Keyword(null, "blue", "blue", 1016931276));
  var hex_part = function hex_part(v) {
    return clojure.string.replace.call(null, garden.util.format.call(null, "%2s", garden.util.int__GT_string.call(null, v, 16)), " ", "0");
  };
  return cljs.core.apply.call(null, cljs.core.str, "#", cljs.core.map.call(null, hex_part, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [r, g, b], null)));
};
garden.color.rgb__GT_hsl = function rgb__GT_hsl(p__13144) {
  var map__13150 = p__13144;
  var map__13150__$1 = cljs.core.seq_QMARK_.call(null, map__13150) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13150) : map__13150;
  var color = map__13150__$1;
  var blue = cljs.core.get.call(null, map__13150__$1, new cljs.core.Keyword(null, "blue", "blue", 1016931276));
  var green = cljs.core.get.call(null, map__13150__$1, new cljs.core.Keyword(null, "green", "green", 1112523381));
  var red = cljs.core.get.call(null, map__13150__$1, new cljs.core.Keyword(null, "red", "red", 1014017027));
  if (garden.color.hsl_QMARK_.call(null, color)) {
    return color;
  } else {
    var vec__13151 = cljs.core.map.call(null, function(p1__13143_SHARP_) {
      return p1__13143_SHARP_ / 255;
    }, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [red, green, blue], null));
    var r = cljs.core.nth.call(null, vec__13151, 0, null);
    var g = cljs.core.nth.call(null, vec__13151, 1, null);
    var b = cljs.core.nth.call(null, vec__13151, 2, null);
    var mx = function() {
      var x__8601__auto__ = function() {
        var x__8601__auto__ = r;
        var y__8602__auto__ = g;
        return x__8601__auto__ > y__8602__auto__ ? x__8601__auto__ : y__8602__auto__;
      }();
      var y__8602__auto__ = b;
      return x__8601__auto__ > y__8602__auto__ ? x__8601__auto__ : y__8602__auto__;
    }();
    var mn = function() {
      var x__8608__auto__ = function() {
        var x__8608__auto__ = r;
        var y__8609__auto__ = g;
        return x__8608__auto__ < y__8609__auto__ ? x__8608__auto__ : y__8609__auto__;
      }();
      var y__8609__auto__ = b;
      return x__8608__auto__ < y__8609__auto__ ? x__8608__auto__ : y__8609__auto__;
    }();
    var d = mx - mn;
    var h = function() {
      var pred__13152 = cljs.core._EQ_;
      var expr__13153 = mx;
      if (cljs.core.truth_(pred__13152.call(null, mn, expr__13153))) {
        return 0;
      } else {
        if (cljs.core.truth_(pred__13152.call(null, r, expr__13153))) {
          return 60 * ((g - b) / d);
        } else {
          if (cljs.core.truth_(pred__13152.call(null, g, expr__13153))) {
            return 60 * ((b - r) / d) + 120;
          } else {
            if (cljs.core.truth_(pred__13152.call(null, b, expr__13153))) {
              return 60 * ((r - g) / d) + 240;
            } else {
              throw new Error([cljs.core.str("No matching clause: "), cljs.core.str(expr__13153)].join(""));
            }
          }
        }
      }
    }();
    var l = (mx + mn) / 2;
    var s = cljs.core._EQ_.call(null, mx, mn) ? 0 : l < 0.5 ? d / (2 * l) : new cljs.core.Keyword(null, "else", "else", 1017020587) ? d / (2 - 2 * l) : null;
    return garden.color.hsl.call(null, cljs.core.mod.call(null, h, 360), 100 * s, 100 * l);
  }
};
garden.color.hsl__GT_rgb = function hsl__GT_rgb(p__13156) {
  var map__13159 = p__13156;
  var map__13159__$1 = cljs.core.seq_QMARK_.call(null, map__13159) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13159) : map__13159;
  var color = map__13159__$1;
  var lightness = cljs.core.get.call(null, map__13159__$1, new cljs.core.Keyword(null, "lightness", "lightness", 1700345823));
  var saturation = cljs.core.get.call(null, map__13159__$1, new cljs.core.Keyword(null, "saturation", "saturation", 783413060));
  var hue = cljs.core.get.call(null, map__13159__$1, new cljs.core.Keyword(null, "hue", "hue", 1014007914));
  if (garden.color.rgb_QMARK_.call(null, color)) {
    return color;
  } else {
    var h = hue / 360;
    var s = saturation / 100;
    var l = lightness / 100;
    var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
    var m1 = 2 * l - m2;
    var vec__13160 = cljs.core.map.call(null, function(h, s, l, m2, m1) {
      return function(p1__13155_SHARP_) {
        return Math.round.call(null, p1__13155_SHARP_ * 255);
      };
    }(h, s, l, m2, m1), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [garden.color.hue__GT_rgb.call(null, m1, m2, h + 1 / 3), garden.color.hue__GT_rgb.call(null, m1, m2, h), garden.color.hue__GT_rgb.call(null, m1, m2, h - 1 / 3)], null));
    var r = cljs.core.nth.call(null, vec__13160, 0, null);
    var g = cljs.core.nth.call(null, vec__13160, 1, null);
    var b = cljs.core.nth.call(null, vec__13160, 2, null);
    return garden.color.rgb.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [r, g, b], null));
  }
};
garden.color.hue__GT_rgb = function hue__GT_rgb(m1, m2, h) {
  var h__$1 = h < 0 ? h + 1 : h > 1 ? h - 1 : new cljs.core.Keyword(null, "else", "else", 1017020587) ? h : null;
  if (6 * h__$1 < 1) {
    return m1 + (m2 - m1) * h__$1 * 6;
  } else {
    if (2 * h__$1 < 1) {
      return m2;
    } else {
      if (3 * h__$1 < 2) {
        return m1 + (m2 - m1) * (2 / 3 - h__$1) * 6;
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          return m1;
        } else {
          return null;
        }
      }
    }
  }
};
garden.color.hsl__GT_hex = function hsl__GT_hex(color) {
  return garden.color.rgb__GT_hex.call(null, garden.color.hsl__GT_rgb.call(null, color));
};
garden.color.hex__GT_hsl = function hex__GT_hsl(color) {
  return garden.color.rgb__GT_hsl.call(null, garden.color.hex__GT_rgb.call(null, color));
};
garden.color.percent_clip = cljs.core.partial.call(null, garden.util.clip, 0, 100);
garden.color.rgb_clip = cljs.core.partial.call(null, garden.util.clip, 0, 255);
garden.color.as_hex = function as_hex(x) {
  if (garden.color.hex_QMARK_.call(null, x)) {
    return x;
  } else {
    if (garden.color.rgb_QMARK_.call(null, x)) {
      return garden.color.rgb__GT_hex.call(null, x);
    } else {
      if (garden.color.hsl_QMARK_.call(null, x)) {
        return garden.color.hsl__GT_hex.call(null, x);
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          throw cljs.core.ex_info.call(null, [cljs.core.str("Can't convert "), cljs.core.str(x), cljs.core.str(" to a color.")].join(""), cljs.core.PersistentArrayMap.EMPTY);
        } else {
          return null;
        }
      }
    }
  }
};
garden.color.as_rgb = function as_rgb(x) {
  if (garden.color.rgb_QMARK_.call(null, x)) {
    return x;
  } else {
    if (garden.color.hsl_QMARK_.call(null, x)) {
      return garden.color.hsl__GT_rgb.call(null, x);
    } else {
      if (garden.color.hex_QMARK_.call(null, x)) {
        return garden.color.hex__GT_rgb.call(null, x);
      } else {
        if (typeof x === "number") {
          return garden.color.rgb.call(null, cljs.core.map.call(null, garden.color.rgb_clip, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [x, x, x], null)));
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw cljs.core.ex_info.call(null, [cljs.core.str("Can't convert "), cljs.core.str(x), cljs.core.str(" to a color.")].join(""), cljs.core.PersistentArrayMap.EMPTY);
          } else {
            return null;
          }
        }
      }
    }
  }
};
garden.color.as_hsl = function as_hsl(x) {
  if (garden.color.hsl_QMARK_.call(null, x)) {
    return x;
  } else {
    if (garden.color.rgb_QMARK_.call(null, x)) {
      return garden.color.rgb__GT_hsl.call(null, x);
    } else {
      if (garden.color.hex_QMARK_.call(null, x)) {
        return garden.color.hex__GT_hsl.call(null, x);
      } else {
        if (typeof x === "number") {
          return garden.color.hsl.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [x, garden.color.percent_clip.call(null, x), garden.color.percent_clip.call(null, x)], null));
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            throw cljs.core.ex_info.call(null, [cljs.core.str("Can't convert "), cljs.core.str(x), cljs.core.str(" to a color.")].join(""), cljs.core.PersistentArrayMap.EMPTY);
          } else {
            return null;
          }
        }
      }
    }
  }
};
garden.color.restrict_rgb = function restrict_rgb(m) {
  return cljs.core.select_keys.call(null, m, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "red", "red", 1014017027), new cljs.core.Keyword(null, "green", "green", 1112523381), new cljs.core.Keyword(null, "blue", "blue", 1016931276)], null));
};
garden.color.make_color_operation = function make_color_operation(op) {
  return function() {
    var color_op = null;
    var color_op__1 = function(a) {
      return a;
    };
    var color_op__2 = function(a, b) {
      var o = cljs.core.comp.call(null, garden.color.rgb_clip, op);
      var a__$1 = garden.color.restrict_rgb.call(null, garden.color.as_rgb.call(null, a));
      var b__$1 = garden.color.restrict_rgb.call(null, garden.color.as_rgb.call(null, b));
      return garden.color.as_color.call(null, cljs.core.merge_with.call(null, o, a__$1, b__$1));
    };
    var color_op__3 = function() {
      var G__13161__delegate = function(a, b, more) {
        return cljs.core.reduce.call(null, color_op, color_op.call(null, a, b), more);
      };
      var G__13161 = function(a, b, var_args) {
        var more = null;
        if (arguments.length > 2) {
          more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__13161__delegate.call(this, a, b, more);
      };
      G__13161.cljs$lang$maxFixedArity = 2;
      G__13161.cljs$lang$applyTo = function(arglist__13162) {
        var a = cljs.core.first(arglist__13162);
        arglist__13162 = cljs.core.next(arglist__13162);
        var b = cljs.core.first(arglist__13162);
        var more = cljs.core.rest(arglist__13162);
        return G__13161__delegate(a, b, more);
      };
      G__13161.cljs$core$IFn$_invoke$arity$variadic = G__13161__delegate;
      return G__13161;
    }();
    color_op = function(a, b, var_args) {
      var more = var_args;
      switch(arguments.length) {
        case 1:
          return color_op__1.call(this, a);
        case 2:
          return color_op__2.call(this, a, b);
        default:
          return color_op__3.cljs$core$IFn$_invoke$arity$variadic(a, b, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    color_op.cljs$lang$maxFixedArity = 2;
    color_op.cljs$lang$applyTo = color_op__3.cljs$lang$applyTo;
    color_op.cljs$core$IFn$_invoke$arity$1 = color_op__1;
    color_op.cljs$core$IFn$_invoke$arity$2 = color_op__2;
    color_op.cljs$core$IFn$_invoke$arity$variadic = color_op__3.cljs$core$IFn$_invoke$arity$variadic;
    return color_op;
  }();
};
garden.color.color_PLUS_ = garden.color.make_color_operation.call(null, cljs.core._PLUS_);
garden.color.color_ = garden.color.make_color_operation.call(null, cljs.core._);
garden.color.color_STAR_ = garden.color.make_color_operation.call(null, cljs.core._STAR_);
garden.color.color_div = garden.color.make_color_operation.call(null, cljs.core._SLASH_);
garden.color.update_color = function update_color(color, field, f, v) {
  var v__$1 = function() {
    var or__8294__auto__ = (new cljs.core.Keyword(null, "magnitude", "magnitude", 3292087682)).cljs$core$IFn$_invoke$arity$1(v);
    if (cljs.core.truth_(or__8294__auto__)) {
      return or__8294__auto__;
    } else {
      return v;
    }
  }();
  return cljs.core.update_in.call(null, garden.color.as_hsl.call(null, color), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [field], null), f, v__$1);
};
garden.color.rotate_hue = function rotate_hue(color, amount) {
  return garden.color.update_color.call(null, color, new cljs.core.Keyword(null, "hue", "hue", 1014007914), cljs.core.comp.call(null, function(p1__13163_SHARP_) {
    return cljs.core.mod.call(null, p1__13163_SHARP_, 360);
  }, cljs.core._PLUS_), amount);
};
garden.color.saturate = function saturate(color, amount) {
  return garden.color.update_color.call(null, color, new cljs.core.Keyword(null, "saturation", "saturation", 783413060), cljs.core.comp.call(null, garden.color.percent_clip, cljs.core._PLUS_), amount);
};
garden.color.desaturate = function desaturate(color, amount) {
  return garden.color.update_color.call(null, color, new cljs.core.Keyword(null, "saturation", "saturation", 783413060), cljs.core.comp.call(null, garden.color.percent_clip, cljs.core._), amount);
};
garden.color.lighten = function lighten(color, amount) {
  return garden.color.update_color.call(null, color, new cljs.core.Keyword(null, "lightness", "lightness", 1700345823), cljs.core.comp.call(null, garden.color.percent_clip, cljs.core._PLUS_), amount);
};
garden.color.darken = function darken(color, amount) {
  return garden.color.update_color.call(null, color, new cljs.core.Keyword(null, "lightness", "lightness", 1700345823), cljs.core.comp.call(null, garden.color.percent_clip, cljs.core._), amount);
};
garden.color.invert = function invert(color) {
  return garden.color.as_color.call(null, cljs.core.merge_with.call(null, cljs.core._, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "red", "red", 1014017027), 255, new cljs.core.Keyword(null, "green", "green", 1112523381), 255, new cljs.core.Keyword(null, "blue", "blue", 1016931276), 255], null), garden.color.as_rgb.call(null, color)));
};
garden.color.mix = function() {
  var mix = null;
  var mix__2 = function(color_1, color_2) {
    var c1 = garden.color.restrict_rgb.call(null, garden.color.as_rgb.call(null, color_1));
    var c2 = garden.color.restrict_rgb.call(null, garden.color.as_rgb.call(null, color_2));
    return garden.color.as_color.call(null, cljs.core.merge_with.call(null, garden.util.average, c1, c2));
  };
  var mix__3 = function() {
    var G__13164__delegate = function(color_1, color_2, more) {
      return cljs.core.reduce.call(null, mix, mix.call(null, color_1, color_2), more);
    };
    var G__13164 = function(color_1, color_2, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__13164__delegate.call(this, color_1, color_2, more);
    };
    G__13164.cljs$lang$maxFixedArity = 2;
    G__13164.cljs$lang$applyTo = function(arglist__13165) {
      var color_1 = cljs.core.first(arglist__13165);
      arglist__13165 = cljs.core.next(arglist__13165);
      var color_2 = cljs.core.first(arglist__13165);
      var more = cljs.core.rest(arglist__13165);
      return G__13164__delegate(color_1, color_2, more);
    };
    G__13164.cljs$core$IFn$_invoke$arity$variadic = G__13164__delegate;
    return G__13164;
  }();
  mix = function(color_1, color_2, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return mix__2.call(this, color_1, color_2);
      default:
        return mix__3.cljs$core$IFn$_invoke$arity$variadic(color_1, color_2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mix.cljs$lang$maxFixedArity = 2;
  mix.cljs$lang$applyTo = mix__3.cljs$lang$applyTo;
  mix.cljs$core$IFn$_invoke$arity$2 = mix__2;
  mix.cljs$core$IFn$_invoke$arity$variadic = mix__3.cljs$core$IFn$_invoke$arity$variadic;
  return mix;
}();
garden.color.complement = function complement(color) {
  return garden.color.rotate_hue.call(null, color, 180);
};
garden.color.hue_rotations = function() {
  var hue_rotations__delegate = function(color, amounts) {
    return cljs.core.map.call(null, cljs.core.partial.call(null, garden.color.rotate_hue, color), amounts);
  };
  var hue_rotations = function(color, var_args) {
    var amounts = null;
    if (arguments.length > 1) {
      amounts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return hue_rotations__delegate.call(this, color, amounts);
  };
  hue_rotations.cljs$lang$maxFixedArity = 1;
  hue_rotations.cljs$lang$applyTo = function(arglist__13166) {
    var color = cljs.core.first(arglist__13166);
    var amounts = cljs.core.rest(arglist__13166);
    return hue_rotations__delegate(color, amounts);
  };
  hue_rotations.cljs$core$IFn$_invoke$arity$variadic = hue_rotations__delegate;
  return hue_rotations;
}();
garden.color.analogous = function() {
  var analogous = null;
  var analogous__1 = function(color) {
    return analogous.call(null, color, true);
  };
  var analogous__2 = function(color, clockwise_QMARK_) {
    var sign = cljs.core.truth_(clockwise_QMARK_) ? cljs.core._PLUS_ : cljs.core._;
    return garden.color.hue_rotations.call(null, color, 0, sign.call(null, 30), sign.call(null, 60));
  };
  analogous = function(color, clockwise_QMARK_) {
    switch(arguments.length) {
      case 1:
        return analogous__1.call(this, color);
      case 2:
        return analogous__2.call(this, color, clockwise_QMARK_);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  analogous.cljs$core$IFn$_invoke$arity$1 = analogous__1;
  analogous.cljs$core$IFn$_invoke$arity$2 = analogous__2;
  return analogous;
}();
garden.color.triad = function triad(color) {
  return garden.color.hue_rotations.call(null, color, 0, 120, 240);
};
garden.color.split_complement = function() {
  var split_complement = null;
  var split_complement__1 = function(color) {
    return split_complement.call(null, color, 130);
  };
  var split_complement__2 = function(color, distance_from_complement) {
    var d = garden.util.clip.call(null, 1, 179, distance_from_complement);
    return garden.color.hue_rotations.call(null, color, 0, d, -d);
  };
  split_complement = function(color, distance_from_complement) {
    switch(arguments.length) {
      case 1:
        return split_complement__1.call(this, color);
      case 2:
        return split_complement__2.call(this, color, distance_from_complement);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split_complement.cljs$core$IFn$_invoke$arity$1 = split_complement__1;
  split_complement.cljs$core$IFn$_invoke$arity$2 = split_complement__2;
  return split_complement;
}();
garden.color.tetrad = function() {
  var tetrad = null;
  var tetrad__1 = function(color) {
    return tetrad.call(null, color, 90);
  };
  var tetrad__2 = function(color, angle) {
    var a = garden.util.clip.call(null, 1, 90, Math.abs.call(null, (new cljs.core.Keyword(null, "magnitude", "magnitude", 3292087682)).cljs$core$IFn$_invoke$arity$2(angle, angle)));
    var color_2 = garden.color.rotate_hue.call(null, color, a);
    return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [garden.color.rotate_hue.call(null, color, 0), garden.color.complement.call(null, color), color_2, garden.color.complement.call(null, color_2)], null);
  };
  tetrad = function(color, angle) {
    switch(arguments.length) {
      case 1:
        return tetrad__1.call(this, color);
      case 2:
        return tetrad__2.call(this, color, angle);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  tetrad.cljs$core$IFn$_invoke$arity$1 = tetrad__1;
  tetrad.cljs$core$IFn$_invoke$arity$2 = tetrad__2;
  return tetrad;
}();
garden.color.shades = function() {
  var shades = null;
  var shades__1 = function(color) {
    return shades.call(null, color, 10);
  };
  var shades__2 = function(color, step) {
    var c = garden.color.as_hsl.call(null, color);
    var iter__9005__auto__ = function iter__13171(s__13172) {
      return new cljs.core.LazySeq(null, function() {
        var s__13172__$1 = s__13172;
        while (true) {
          var temp__4092__auto__ = cljs.core.seq.call(null, s__13172__$1);
          if (temp__4092__auto__) {
            var s__13172__$2 = temp__4092__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__13172__$2)) {
              var c__9003__auto__ = cljs.core.chunk_first.call(null, s__13172__$2);
              var size__9004__auto__ = cljs.core.count.call(null, c__9003__auto__);
              var b__13174 = cljs.core.chunk_buffer.call(null, size__9004__auto__);
              if (function() {
                var i__13173 = 0;
                while (true) {
                  if (i__13173 < size__9004__auto__) {
                    var i = cljs.core._nth.call(null, c__9003__auto__, i__13173);
                    cljs.core.chunk_append.call(null, b__13174, cljs.core.assoc.call(null, c, new cljs.core.Keyword(null, "lightness", "lightness", 1700345823), i * step));
                    var G__13175 = i__13173 + 1;
                    i__13173 = G__13175;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13174), iter__13171.call(null, cljs.core.chunk_rest.call(null, s__13172__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13174), null);
              }
            } else {
              var i = cljs.core.first.call(null, s__13172__$2);
              return cljs.core.cons.call(null, cljs.core.assoc.call(null, c, new cljs.core.Keyword(null, "lightness", "lightness", 1700345823), i * step), iter__13171.call(null, cljs.core.rest.call(null, s__13172__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__9005__auto__.call(null, cljs.core.range.call(null, 1, Math.floor.call(null, 100 / step)));
  };
  shades = function(color, step) {
    switch(arguments.length) {
      case 1:
        return shades__1.call(this, color);
      case 2:
        return shades__2.call(this, color, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  shades.cljs$core$IFn$_invoke$arity$1 = shades__1;
  shades.cljs$core$IFn$_invoke$arity$2 = shades__2;
  return shades;
}();
goog.provide("garden.compiler");
goog.require("cljs.core");
goog.require("garden.util");
goog.require("garden.units");
goog.require("garden.types");
goog.require("garden.util");
goog.require("clojure.string");
goog.require("garden.color");
goog.require("clojure.string");
goog.require("garden.types");
goog.require("garden.color");
goog.require("garden.units");
goog.require("garden.util");
garden.compiler._STAR_flags_STAR_ = new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "pretty-print?", "pretty-print?", 3437152219), true, new cljs.core.Keyword(null, "output-to", "output-to", 3189532217), null, new cljs.core.Keyword(null, "vendors", "vendors", 1361377181), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "media-expressions", "media-expressions", 4652695524), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "nesting-behavior", 
"nesting-behavior", 4235335079), new cljs.core.Keyword(null, "default", "default", 2558708147)], null)], null);
garden.compiler.media_expression_behavior = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "merge", "merge", 1117689770), function(expr, context) {
  return cljs.core.merge.call(null, context, expr);
}, new cljs.core.Keyword(null, "default", "default", 2558708147), function(expr, _) {
  return expr;
}], null);
garden.compiler._STAR_selector_context_STAR_ = null;
garden.compiler._STAR_media_query_context_STAR_ = null;
garden.compiler.vendors = function vendors() {
  return cljs.core.seq.call(null, (new cljs.core.Keyword(null, "vendors", "vendors", 1361377181)).cljs$core$IFn$_invoke$arity$1(garden.compiler._STAR_flags_STAR_));
};
garden.compiler.top_level_expression_QMARK_ = function top_level_expression_QMARK_(x) {
  var or__8294__auto__ = garden.util.rule_QMARK_.call(null, x);
  if (cljs.core.truth_(or__8294__auto__)) {
    return or__8294__auto__;
  } else {
    return garden.util.at_import_QMARK_.call(null, x) || (garden.util.at_media_QMARK_.call(null, x) || garden.util.at_keyframes_QMARK_.call(null, x));
  }
};
garden.compiler.divide_vec = function divide_vec(pred, coll) {
  return cljs.core.juxt.call(null, cljs.core.filter, cljs.core.remove).call(null, pred, coll);
};
garden.compiler.token_fn = function token_fn(p__13030) {
  var vec__13032 = p__13030;
  var tag = cljs.core.nth.call(null, vec__13032, 0, null);
  var re = cljs.core.nth.call(null, vec__13032, 1, null);
  return function(s) {
    var temp__4092__auto__ = cljs.core.re_find.call(null, re, s);
    if (cljs.core.truth_(temp__4092__auto__)) {
      var chunk = temp__4092__auto__;
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "tag", "tag", 1014018828), tag, new cljs.core.Keyword(null, "chunk", "chunk", 1108547039), chunk, new cljs.core.Keyword(null, "size", "size", 1017434995), cljs.core.count.call(null, chunk)], null);
    } else {
      return null;
    }
  };
};
garden.compiler.tokenizer = function() {
  var tokenizer__delegate = function(tags_PLUS_regexes) {
    var fs = cljs.core.map.call(null, garden.compiler.token_fn, tags_PLUS_regexes);
    return function(s) {
      return cljs.core.some.call(null, function(p1__13033_SHARP_) {
        return p1__13033_SHARP_.call(null, s);
      }, fs);
    };
  };
  var tokenizer = function(var_args) {
    var tags_PLUS_regexes = null;
    if (arguments.length > 0) {
      tags_PLUS_regexes = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return tokenizer__delegate.call(this, tags_PLUS_regexes);
  };
  tokenizer.cljs$lang$maxFixedArity = 0;
  tokenizer.cljs$lang$applyTo = function(arglist__13034) {
    var tags_PLUS_regexes = cljs.core.seq(arglist__13034);
    return tokenizer__delegate(tags_PLUS_regexes);
  };
  tokenizer.cljs$core$IFn$_invoke$arity$variadic = tokenizer__delegate;
  return tokenizer;
}();
garden.compiler.stylesheet_tokenizer = garden.compiler.tokenizer.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "string", "string", 4416885635), /^\"(?:\\.|[^\"])*\"/], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "r-brace", "r-brace", 4787385482), /^\s*\{\s*/], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, 
"l-brace", "l-brace", 3757330692), /^;?\s*}/], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "r-paren", "r-paren", 4799824737), /^\s*\(\s*/], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "l-paren", "l-paren", 3769769947), /^\s*\)/], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "comma", 
"comma", 1108747847), /^,\s*/], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "colon", "colon", 1108746961), /^:\s*/], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "semicolon", "semicolon", 4594780195), /^;/], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "space+", "space+", 4412678999), 
/^ +/], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "white-space+", "white-space+", 3237048699), /^\s+/], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "any", "any", 1014000990), /^./], null));
garden.compiler.compress_stylesheet = function compress_stylesheet(stylesheet) {
  var s1 = stylesheet;
  var s2 = "";
  while (true) {
    var temp__4090__auto__ = garden.compiler.stylesheet_tokenizer.call(null, s1);
    if (cljs.core.truth_(temp__4090__auto__)) {
      var map__13037 = temp__4090__auto__;
      var map__13037__$1 = cljs.core.seq_QMARK_.call(null, map__13037) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13037) : map__13037;
      var size = cljs.core.get.call(null, map__13037__$1, new cljs.core.Keyword(null, "size", "size", 1017434995));
      var chunk = cljs.core.get.call(null, map__13037__$1, new cljs.core.Keyword(null, "chunk", "chunk", 1108547039));
      var tag = cljs.core.get.call(null, map__13037__$1, new cljs.core.Keyword(null, "tag", "tag", 1014018828));
      var G__13039 = cljs.core.subs.call(null, s1, size);
      var G__13040 = [cljs.core.str(s2), cljs.core.str(function() {
        var G__13038 = tag;
        if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "r-brace", "r-brace", 4787385482), G__13038)) {
          return "{";
        } else {
          if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "string", "string", 4416885635), G__13038)) {
            return chunk;
          } else {
            if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "l-brace", "l-brace", 3757330692), G__13038)) {
              return "}";
            } else {
              if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "colon", "colon", 1108746961), G__13038)) {
                return ":";
              } else {
                if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "semi-comma", "semi-comma", 3089907496), G__13038)) {
                  return ";";
                } else {
                  if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "white-space+", "white-space+", 3237048699), G__13038)) {
                    return "";
                  } else {
                    if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "space+", "space+", 4412678999), G__13038)) {
                      return " ";
                    } else {
                      if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "l-paren", "l-paren", 3769769947), G__13038)) {
                        return ")";
                      } else {
                        if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "r-paren", "r-paren", 4799824737), G__13038)) {
                          return "(";
                        } else {
                          if (cljs.core._EQ_.call(null, new cljs.core.Keyword(null, "comma", "comma", 1108747847), G__13038)) {
                            return ",";
                          } else {
                            if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
                              return chunk;
                            } else {
                              return null;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }())].join("");
      s1 = G__13039;
      s2 = G__13040;
      continue;
    } else {
      return s2;
    }
    break;
  }
};
garden.compiler.IExpandable = function() {
  var obj13042 = {};
  return obj13042;
}();
garden.compiler.expand = function expand(this$) {
  if (function() {
    var and__8282__auto__ = this$;
    if (and__8282__auto__) {
      return this$.garden$compiler$IExpandable$expand$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return this$.garden$compiler$IExpandable$expand$arity$1(this$);
  } else {
    var x__8915__auto__ = this$ == null ? null : this$;
    return function() {
      var or__8294__auto__ = garden.compiler.expand[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = garden.compiler.expand["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IExpandable.expand", this$);
        }
      }
    }().call(null, this$);
  }
};
garden.compiler.expand_seqs = function expand_seqs(coll) {
  return cljs.core.mapcat.call(null, function(x) {
    if (cljs.core.seq_QMARK_.call(null, x)) {
      return expand_seqs.call(null, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  }, coll);
};
garden.compiler.expand_declaration_1 = function expand_declaration_1(d) {
  var prefix = function(p1__13043_SHARP_, p2__13044_SHARP_) {
    return garden.util.as_str.call(null, p1__13043_SHARP_, "-", p2__13044_SHARP_);
  };
  return cljs.core.reduce.call(null, function(m, p__13049) {
    var vec__13050 = p__13049;
    var k = cljs.core.nth.call(null, vec__13050, 0, null);
    var v = cljs.core.nth.call(null, vec__13050, 1, null);
    if (garden.util.hash_map_QMARK_.call(null, v)) {
      return cljs.core.reduce.call(null, function(m1, p__13051) {
        var vec__13052 = p__13051;
        var k1 = cljs.core.nth.call(null, vec__13052, 0, null);
        var v1 = cljs.core.nth.call(null, vec__13052, 1, null);
        return cljs.core.assoc.call(null, m1, prefix.call(null, k, k1), v1);
      }, m, expand_declaration_1.call(null, v));
    } else {
      return cljs.core.assoc.call(null, m, garden.util.to_str.call(null, k), v);
    }
  }, cljs.core.PersistentArrayMap.EMPTY, d);
};
garden.compiler.expand_declaration = function expand_declaration(d) {
  if (cljs.core.seq.call(null, d)) {
    return cljs.core.with_meta.call(null, garden.compiler.expand_declaration_1.call(null, d), cljs.core.meta.call(null, d));
  } else {
    return null;
  }
};
garden.compiler.parent_selector_re = /^&(?:\S+)?$/;
garden.compiler.extract_reference = function extract_reference(selector) {
  var temp__4092__auto__ = cljs.core.re_find.call(null, garden.compiler.parent_selector_re, garden.util.to_str.call(null, cljs.core.last.call(null, selector)));
  if (cljs.core.truth_(temp__4092__auto__)) {
    var reference = temp__4092__auto__;
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.rest.call(null, reference));
  } else {
    return null;
  }
};
garden.compiler.expand_selector_reference = function expand_selector_reference(selector) {
  var temp__4090__auto__ = garden.compiler.extract_reference.call(null, selector);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var reference = temp__4090__auto__;
    var parent = cljs.core.butlast.call(null, selector);
    return cljs.core.concat.call(null, cljs.core.butlast.call(null, parent), cljs.core._conj.call(null, cljs.core.List.EMPTY, garden.util.as_str.call(null, cljs.core.last.call(null, parent), reference)));
  } else {
    return selector;
  }
};
garden.compiler.expand_selector = function expand_selector(selector, parent) {
  var selector__$1 = cljs.core.seq.call(null, parent) ? cljs.core.map.call(null, cljs.core.flatten, garden.util.cartesian_product.call(null, parent, selector)) : cljs.core.map.call(null, cljs.core.list, selector);
  return cljs.core.map.call(null, garden.compiler.expand_selector_reference, selector__$1);
};
garden.compiler.expand_rule = function expand_rule(rule) {
  var vec__13056 = cljs.core.split_with.call(null, cljs.core.complement.call(null, cljs.core.coll_QMARK_), rule);
  var selector = cljs.core.nth.call(null, vec__13056, 0, null);
  var children = cljs.core.nth.call(null, vec__13056, 1, null);
  var selector__$1 = garden.compiler.expand_selector.call(null, selector, garden.compiler._STAR_selector_context_STAR_);
  var children__$1 = garden.compiler.expand.call(null, children);
  var vec__13057 = garden.compiler.divide_vec.call(null, garden.util.declaration_QMARK_, children__$1);
  var declarations = cljs.core.nth.call(null, vec__13057, 0, null);
  var xs = cljs.core.nth.call(null, vec__13057, 1, null);
  var ys = function() {
    var _STAR_selector_context_STAR_13058 = garden.compiler._STAR_selector_context_STAR_;
    try {
      garden.compiler._STAR_selector_context_STAR_ = cljs.core.seq.call(null, selector__$1) ? selector__$1 : garden.compiler._STAR_selector_context_STAR_;
      return cljs.core.doall.call(null, cljs.core.mapcat.call(null, garden.compiler.expand, xs));
    } finally {
      garden.compiler._STAR_selector_context_STAR_ = _STAR_selector_context_STAR_13058;
    }
  }();
  return cljs.core.conj.call(null, ys, cljs.core.conj.call(null, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [selector__$1], null), cljs.core.mapcat.call(null, garden.compiler.expand, declarations)));
};
garden.compiler.expand_at_rule = function() {
  var method_table__9146__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__9147__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__9148__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__9149__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__9150__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", 3129050535), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn("expand-at-rule", new cljs.core.Keyword(null, "identifier", "identifier", 3690438683), new cljs.core.Keyword(null, "default", "default", 2558708147), hierarchy__9150__auto__, method_table__9146__auto__, prefer_table__9147__auto__, method_cache__9148__auto__, cached_hierarchy__9149__auto__);
}();
cljs.core._add_method.call(null, garden.compiler.expand_at_rule, new cljs.core.Keyword(null, "default", "default", 2558708147), function(at_rule) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, at_rule);
});
cljs.core._add_method.call(null, garden.compiler.expand_at_rule, new cljs.core.Keyword(null, "keyframes", "keyframes", 3862205239), function(p__13059) {
  var map__13060 = p__13059;
  var map__13060__$1 = cljs.core.seq_QMARK_.call(null, map__13060) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13060) : map__13060;
  var value = cljs.core.get.call(null, map__13060__$1, new cljs.core.Keyword(null, "value", "value", 1125876963));
  var map__13061 = value;
  var map__13061__$1 = cljs.core.seq_QMARK_.call(null, map__13061) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13061) : map__13061;
  var frames = cljs.core.get.call(null, map__13061__$1, new cljs.core.Keyword(null, "frames", "frames", 4042356760));
  var identifier = cljs.core.get.call(null, map__13061__$1, new cljs.core.Keyword(null, "identifier", "identifier", 3690438683));
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, new garden.types.CSSAtRule(new cljs.core.Keyword(null, "keyframes", "keyframes", 3862205239), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "identifier", "identifier", 3690438683), garden.util.to_str.call(null, identifier), new cljs.core.Keyword(null, "frames", "frames", 4042356760), cljs.core.mapcat.call(null, garden.compiler.expand, frames)], null)));
});
garden.compiler.expand_media_query_expression = function expand_media_query_expression(expression) {
  var temp__4090__auto__ = garden.compiler.media_expression_behavior.call(null, cljs.core.get_in.call(null, garden.compiler._STAR_flags_STAR_, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "media-expressions", "media-expressions", 4652695524), new cljs.core.Keyword(null, "nesting-behavior", "nesting-behavior", 4235335079)], null)));
  if (cljs.core.truth_(temp__4090__auto__)) {
    var f = temp__4090__auto__;
    return f.call(null, expression, garden.compiler._STAR_media_query_context_STAR_);
  } else {
    return expression;
  }
};
cljs.core._add_method.call(null, garden.compiler.expand_at_rule, new cljs.core.Keyword(null, "media", "media", 1117676374), function(p__13062) {
  var map__13063 = p__13062;
  var map__13063__$1 = cljs.core.seq_QMARK_.call(null, map__13063) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13063) : map__13063;
  var value = cljs.core.get.call(null, map__13063__$1, new cljs.core.Keyword(null, "value", "value", 1125876963));
  var map__13064 = value;
  var map__13064__$1 = cljs.core.seq_QMARK_.call(null, map__13064) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13064) : map__13064;
  var rules = cljs.core.get.call(null, map__13064__$1, new cljs.core.Keyword(null, "rules", "rules", 1122778217));
  var media_queries = cljs.core.get.call(null, map__13064__$1, new cljs.core.Keyword(null, "media-queries", "media-queries", 3327326703));
  var media_queries__$1 = garden.compiler.expand_media_query_expression.call(null, media_queries);
  var xs = function() {
    var _STAR_media_query_context_STAR_13066 = garden.compiler._STAR_media_query_context_STAR_;
    try {
      garden.compiler._STAR_media_query_context_STAR_ = media_queries__$1;
      return cljs.core.doall.call(null, cljs.core.mapcat.call(null, garden.compiler.expand, garden.compiler.expand.call(null, rules)));
    } finally {
      garden.compiler._STAR_media_query_context_STAR_ = _STAR_media_query_context_STAR_13066;
    }
  }();
  var vec__13065 = garden.compiler.divide_vec.call(null, garden.util.at_media_QMARK_, xs);
  var subqueries = cljs.core.nth.call(null, vec__13065, 0, null);
  var rules__$1 = cljs.core.nth.call(null, vec__13065, 1, null);
  return cljs.core.cons.call(null, new garden.types.CSSAtRule(new cljs.core.Keyword(null, "media", "media", 1117676374), new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "media-queries", "media-queries", 3327326703), media_queries__$1, new cljs.core.Keyword(null, "rules", "rules", 1122778217), rules__$1], null)), subqueries);
});
garden.compiler.expand_stylesheet = function expand_stylesheet(xs) {
  return cljs.core.apply.call(null, cljs.core.concat, cljs.core.map.call(null, garden.compiler.expand, garden.compiler.expand.call(null, xs)));
};
garden.compiler.IExpandable["null"] = true;
garden.compiler.expand["null"] = function(this$) {
  return null;
};
cljs.core.IndexedSeq.prototype.garden$compiler$IExpandable$ = true;
cljs.core.IndexedSeq.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_seqs.call(null, this$__$1);
};
cljs.core.Subvec.prototype.garden$compiler$IExpandable$ = true;
cljs.core.Subvec.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_rule.call(null, this$__$1);
};
garden.types.CSSAtRule.prototype.garden$compiler$IExpandable$ = true;
garden.types.CSSAtRule.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_at_rule.call(null, this$__$1);
};
cljs.core.ChunkedCons.prototype.garden$compiler$IExpandable$ = true;
cljs.core.ChunkedCons.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_seqs.call(null, this$__$1);
};
cljs.core.PersistentTreeMap.prototype.garden$compiler$IExpandable$ = true;
cljs.core.PersistentTreeMap.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, garden.compiler.expand_declaration.call(null, this$__$1));
};
cljs.core.PersistentArrayMap.prototype.garden$compiler$IExpandable$ = true;
cljs.core.PersistentArrayMap.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, garden.compiler.expand_declaration.call(null, this$__$1));
};
cljs.core.LazySeq.prototype.garden$compiler$IExpandable$ = true;
cljs.core.LazySeq.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_seqs.call(null, this$__$1);
};
garden.compiler.IExpandable["_"] = true;
garden.compiler.expand["_"] = function(this$) {
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, this$);
};
cljs.core.RSeq.prototype.garden$compiler$IExpandable$ = true;
cljs.core.RSeq.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_seqs.call(null, this$__$1);
};
garden.color.CSSColor.prototype.garden$compiler$IExpandable$ = true;
garden.color.CSSColor.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, this$__$1);
};
cljs.core.NodeSeq.prototype.garden$compiler$IExpandable$ = true;
cljs.core.NodeSeq.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_seqs.call(null, this$__$1);
};
cljs.core.RedNode.prototype.garden$compiler$IExpandable$ = true;
cljs.core.RedNode.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_rule.call(null, this$__$1);
};
cljs.core.ChunkedSeq.prototype.garden$compiler$IExpandable$ = true;
cljs.core.ChunkedSeq.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_seqs.call(null, this$__$1);
};
cljs.core.PersistentHashMap.prototype.garden$compiler$IExpandable$ = true;
cljs.core.PersistentHashMap.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, garden.compiler.expand_declaration.call(null, this$__$1));
};
cljs.core.PersistentVector.prototype.garden$compiler$IExpandable$ = true;
cljs.core.PersistentVector.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_rule.call(null, this$__$1);
};
cljs.core.List.prototype.garden$compiler$IExpandable$ = true;
cljs.core.List.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_seqs.call(null, this$__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.garden$compiler$IExpandable$ = true;
cljs.core.PersistentArrayMapSeq.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_seqs.call(null, this$__$1);
};
garden.types.CSSFunction.prototype.garden$compiler$IExpandable$ = true;
garden.types.CSSFunction.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core._conj.call(null, cljs.core.List.EMPTY, this$__$1);
};
cljs.core.BlackNode.prototype.garden$compiler$IExpandable$ = true;
cljs.core.BlackNode.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_rule.call(null, this$__$1);
};
cljs.core.Cons.prototype.garden$compiler$IExpandable$ = true;
cljs.core.Cons.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_seqs.call(null, this$__$1);
};
cljs.core.ArrayNodeSeq.prototype.garden$compiler$IExpandable$ = true;
cljs.core.ArrayNodeSeq.prototype.garden$compiler$IExpandable$expand$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.expand_seqs.call(null, this$__$1);
};
garden.compiler.CSSRenderer = function() {
  var obj13068 = {};
  return obj13068;
}();
garden.compiler.render_css = function render_css(this$) {
  if (function() {
    var and__8282__auto__ = this$;
    if (and__8282__auto__) {
      return this$.garden$compiler$CSSRenderer$render_css$arity$1;
    } else {
      return and__8282__auto__;
    }
  }()) {
    return this$.garden$compiler$CSSRenderer$render_css$arity$1(this$);
  } else {
    var x__8915__auto__ = this$ == null ? null : this$;
    return function() {
      var or__8294__auto__ = garden.compiler.render_css[goog.typeOf(x__8915__auto__)];
      if (or__8294__auto__) {
        return or__8294__auto__;
      } else {
        var or__8294__auto____$1 = garden.compiler.render_css["_"];
        if (or__8294__auto____$1) {
          return or__8294__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "CSSRenderer.render-css", this$);
        }
      }
    }().call(null, this$);
  }
};
garden.compiler.comma = ", ";
garden.compiler.colon = ": ";
garden.compiler.semicolon = ";";
garden.compiler.l_brace = " {\n";
garden.compiler.r_brace = "\n}";
garden.compiler.l_brace_1 = " {\n\n";
garden.compiler.r_brace_1 = "\n\n}";
garden.compiler.rule_sep = "\n\n";
garden.compiler.indent = "  ";
garden.compiler.space_separated_list = function() {
  var space_separated_list = null;
  var space_separated_list__1 = function(xs) {
    return space_separated_list.call(null, garden.compiler.render_css, xs);
  };
  var space_separated_list__2 = function(f, xs) {
    return clojure.string.join.call(null, " ", cljs.core.map.call(null, f, xs));
  };
  space_separated_list = function(f, xs) {
    switch(arguments.length) {
      case 1:
        return space_separated_list__1.call(this, f);
      case 2:
        return space_separated_list__2.call(this, f, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  space_separated_list.cljs$core$IFn$_invoke$arity$1 = space_separated_list__1;
  space_separated_list.cljs$core$IFn$_invoke$arity$2 = space_separated_list__2;
  return space_separated_list;
}();
garden.compiler.comma_separated_list = function() {
  var comma_separated_list = null;
  var comma_separated_list__1 = function(xs) {
    return comma_separated_list.call(null, garden.compiler.render_css, xs);
  };
  var comma_separated_list__2 = function(f, xs) {
    var ys = function() {
      var iter__9005__auto__ = function iter__13073(s__13074) {
        return new cljs.core.LazySeq(null, function() {
          var s__13074__$1 = s__13074;
          while (true) {
            var temp__4092__auto__ = cljs.core.seq.call(null, s__13074__$1);
            if (temp__4092__auto__) {
              var s__13074__$2 = temp__4092__auto__;
              if (cljs.core.chunked_seq_QMARK_.call(null, s__13074__$2)) {
                var c__9003__auto__ = cljs.core.chunk_first.call(null, s__13074__$2);
                var size__9004__auto__ = cljs.core.count.call(null, c__9003__auto__);
                var b__13076 = cljs.core.chunk_buffer.call(null, size__9004__auto__);
                if (function() {
                  var i__13075 = 0;
                  while (true) {
                    if (i__13075 < size__9004__auto__) {
                      var x = cljs.core._nth.call(null, c__9003__auto__, i__13075);
                      cljs.core.chunk_append.call(null, b__13076, cljs.core.sequential_QMARK_.call(null, x) ? garden.compiler.space_separated_list.call(null, f, x) : f.call(null, x));
                      var G__13077 = i__13075 + 1;
                      i__13075 = G__13077;
                      continue;
                    } else {
                      return true;
                    }
                    break;
                  }
                }()) {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13076), iter__13073.call(null, cljs.core.chunk_rest.call(null, s__13074__$2)));
                } else {
                  return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__13076), null);
                }
              } else {
                var x = cljs.core.first.call(null, s__13074__$2);
                return cljs.core.cons.call(null, cljs.core.sequential_QMARK_.call(null, x) ? garden.compiler.space_separated_list.call(null, f, x) : f.call(null, x), iter__13073.call(null, cljs.core.rest.call(null, s__13074__$2)));
              }
            } else {
              return null;
            }
            break;
          }
        }, null, null);
      };
      return iter__9005__auto__.call(null, xs);
    }();
    return clojure.string.join.call(null, garden.compiler.comma, ys);
  };
  comma_separated_list = function(f, xs) {
    switch(arguments.length) {
      case 1:
        return comma_separated_list__1.call(this, f);
      case 2:
        return comma_separated_list__2.call(this, f, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comma_separated_list.cljs$core$IFn$_invoke$arity$1 = comma_separated_list__1;
  comma_separated_list.cljs$core$IFn$_invoke$arity$2 = comma_separated_list__2;
  return comma_separated_list;
}();
garden.compiler.rule_join = function rule_join(xs) {
  return clojure.string.join.call(null, garden.compiler.rule_sep, xs);
};
garden.compiler.indent_loc_re = new RegExp("(?\x3d[ A-Za-z#.}-]+)^", "gm");
garden.compiler.indent_str = function indent_str(s) {
  return s.replace(garden.compiler.indent_loc_re, garden.compiler.indent);
};
garden.compiler.render_value = function render_value(x) {
  if (garden.util.at_keyframes_QMARK_.call(null, x)) {
    return garden.util.to_str.call(null, cljs.core.get_in.call(null, x, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "value", "value", 1125876963), new cljs.core.Keyword(null, "identifier", "identifier", 3690438683)], null)));
  } else {
    return garden.compiler.render_css.call(null, x);
  }
};
garden.compiler.render_property_and_value = function render_property_and_value(p__13078) {
  var vec__13080 = p__13078;
  var prop = cljs.core.nth.call(null, vec__13080, 0, null);
  var val = cljs.core.nth.call(null, vec__13080, 1, null);
  if (cljs.core.set_QMARK_.call(null, val)) {
    return clojure.string.join.call(null, "\n", cljs.core.map.call(null, render_property_and_value, cljs.core.partition.call(null, 2, cljs.core.interleave.call(null, cljs.core.repeat.call(null, prop), val))));
  } else {
    var val__$1 = cljs.core.sequential_QMARK_.call(null, val) ? garden.compiler.comma_separated_list.call(null, garden.compiler.render_value, val) : garden.compiler.render_value.call(null, val);
    return garden.util.as_str.call(null, prop, garden.compiler.colon, val__$1, garden.compiler.semicolon);
  }
};
garden.compiler.prefix_declaration = function prefix_declaration(declaration) {
  if (cljs.core.not.call(null, (new cljs.core.Keyword(null, "prefix", "prefix", 4328760836)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, declaration)))) {
    return declaration;
  } else {
    var ps = cljs.core.keys.call(null, declaration);
    var vs = cljs.core.vals.call(null, declaration);
    var vendors = function() {
      var or__8294__auto__ = (new cljs.core.Keyword(null, "vendors", "vendors", 1361377181)).cljs$core$IFn$_invoke$arity$1(cljs.core.meta.call(null, declaration));
      if (cljs.core.truth_(or__8294__auto__)) {
        return or__8294__auto__;
      } else {
        return garden.compiler.vendors.call(null);
      }
    }();
    return cljs.core.mapcat.call(null, function(p, v) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p, v], null), cljs.core.map.call(null, function(vendor, p1, v1) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [garden.util.vendor_prefix.call(null, vendor, cljs.core.name.call(null, p1)), v1], null);
      }, vendors, cljs.core.repeat.call(null, p), cljs.core.repeat.call(null, v)));
    }, ps, vs);
  }
};
garden.compiler.render_declaration = function render_declaration(declaration) {
  return clojure.string.join.call(null, "\n", cljs.core.map.call(null, garden.compiler.render_property_and_value, garden.compiler.prefix_declaration.call(null, declaration)));
};
garden.compiler.render_selector = function render_selector(selector) {
  return garden.compiler.comma_separated_list.call(null, selector);
};
garden.compiler.render_rule = function render_rule(p__13081) {
  var vec__13083 = p__13081;
  var selector = cljs.core.nth.call(null, vec__13083, 0, null);
  var declarations = cljs.core.nth.call(null, vec__13083, 1, null);
  var rule = vec__13083;
  if (cljs.core.seq.call(null, rule) && cljs.core.every_QMARK_.call(null, cljs.core.seq, rule)) {
    return[cljs.core.str(garden.compiler.render_selector.call(null, selector)), cljs.core.str(garden.compiler.l_brace), cljs.core.str(garden.compiler.indent_str.call(null, clojure.string.join.call(null, "\n", cljs.core.map.call(null, garden.compiler.render_css, declarations)))), cljs.core.str(garden.compiler.r_brace)].join("");
  } else {
    return null;
  }
};
garden.compiler.render_media_expr_part = function render_media_expr_part(p__13084) {
  var vec__13087 = p__13084;
  var k = cljs.core.nth.call(null, vec__13087, 0, null);
  var v = cljs.core.nth.call(null, vec__13087, 1, null);
  var vec__13088 = cljs.core.map.call(null, garden.compiler.render_value, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, v], null));
  var sk = cljs.core.nth.call(null, vec__13088, 0, null);
  var sv = cljs.core.nth.call(null, vec__13088, 1, null);
  if (v === true) {
    return sk;
  } else {
    if (v === false) {
      return[cljs.core.str("not "), cljs.core.str(sk)].join("");
    } else {
      if (cljs.core._EQ_.call(null, "only", sv)) {
        return[cljs.core.str("only "), cljs.core.str(sk)].join("");
      } else {
        if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
          if (cljs.core.truth_(function() {
            var and__8282__auto__ = v;
            if (cljs.core.truth_(and__8282__auto__)) {
              return cljs.core.seq.call(null, sv);
            } else {
              return and__8282__auto__;
            }
          }())) {
            return[cljs.core.str("("), cljs.core.str(sk), cljs.core.str(garden.compiler.colon), cljs.core.str(sv), cljs.core.str(")")].join("");
          } else {
            return[cljs.core.str("("), cljs.core.str(sk), cljs.core.str(")")].join("");
          }
        } else {
          return null;
        }
      }
    }
  }
};
garden.compiler.render_media_expr = function render_media_expr(expr) {
  if (cljs.core.sequential_QMARK_.call(null, expr)) {
    return garden.compiler.comma_separated_list.call(null, cljs.core.map.call(null, render_media_expr, expr));
  } else {
    return clojure.string.join.call(null, " and ", cljs.core.map.call(null, garden.compiler.render_media_expr_part, expr));
  }
};
garden.compiler.render_unit = function render_unit(css_unit) {
  var map__13090 = css_unit;
  var map__13090__$1 = cljs.core.seq_QMARK_.call(null, map__13090) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13090) : map__13090;
  var unit = cljs.core.get.call(null, map__13090__$1, new cljs.core.Keyword(null, "unit", "unit", 1017498870));
  var magnitude = cljs.core.get.call(null, map__13090__$1, new cljs.core.Keyword(null, "magnitude", "magnitude", 3292087682));
  var magnitude__$1 = magnitude;
  return[cljs.core.str(magnitude__$1), cljs.core.str(cljs.core.name.call(null, unit))].join("");
};
garden.compiler.render_function = function render_function(css_function) {
  var map__13092 = css_function;
  var map__13092__$1 = cljs.core.seq_QMARK_.call(null, map__13092) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13092) : map__13092;
  var args = cljs.core.get.call(null, map__13092__$1, new cljs.core.Keyword(null, "args", "args", 1016906831));
  var function$ = cljs.core.get.call(null, map__13092__$1, new cljs.core.Keyword(null, "function", "function", 2394842954));
  var args__$1 = cljs.core.sequential_QMARK_.call(null, args) ? garden.compiler.comma_separated_list.call(null, args) : garden.util.to_str.call(null, args);
  return garden.util.format.call(null, "%s(%s)", garden.util.to_str.call(null, function$), args__$1);
};
garden.compiler.render_color = function render_color(c) {
  var temp__4090__auto__ = (new cljs.core.Keyword(null, "alpha", "alpha", 1106814160)).cljs$core$IFn$_invoke$arity$1(c);
  if (cljs.core.truth_(temp__4090__auto__)) {
    var a = temp__4090__auto__;
    var map__13095 = garden.color.as_hsl.call(null, c);
    var map__13095__$1 = cljs.core.seq_QMARK_.call(null, map__13095) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13095) : map__13095;
    var lightness = cljs.core.get.call(null, map__13095__$1, new cljs.core.Keyword(null, "lightness", "lightness", 1700345823));
    var saturation = cljs.core.get.call(null, map__13095__$1, new cljs.core.Keyword(null, "saturation", "saturation", 783413060));
    var hue = cljs.core.get.call(null, map__13095__$1, new cljs.core.Keyword(null, "hue", "hue", 1014007914));
    var vec__13096 = cljs.core.map.call(null, garden.units.percent, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [saturation, lightness], null));
    var s = cljs.core.nth.call(null, vec__13096, 0, null);
    var l = cljs.core.nth.call(null, vec__13096, 1, null);
    return garden.util.format.call(null, "hsla(%s)", garden.compiler.comma_separated_list.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [hue, s, l, a], null)));
  } else {
    return garden.color.as_hex.call(null, c);
  }
};
garden.compiler.render_at_rule = function() {
  var method_table__9146__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var prefer_table__9147__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var method_cache__9148__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var cached_hierarchy__9149__auto__ = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var hierarchy__9150__auto__ = cljs.core.get.call(null, cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "hierarchy", "hierarchy", 3129050535), cljs.core.get_global_hierarchy.call(null));
  return new cljs.core.MultiFn("render-at-rule", new cljs.core.Keyword(null, "identifier", "identifier", 3690438683), new cljs.core.Keyword(null, "default", "default", 2558708147), hierarchy__9150__auto__, method_table__9146__auto__, prefer_table__9147__auto__, method_cache__9148__auto__, cached_hierarchy__9149__auto__);
}();
cljs.core._add_method.call(null, garden.compiler.render_at_rule, new cljs.core.Keyword(null, "default", "default", 2558708147), function(_) {
  return null;
});
cljs.core._add_method.call(null, garden.compiler.render_at_rule, new cljs.core.Keyword(null, "import", "import", 4124075799), function(p__13097) {
  var map__13098 = p__13097;
  var map__13098__$1 = cljs.core.seq_QMARK_.call(null, map__13098) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13098) : map__13098;
  var value = cljs.core.get.call(null, map__13098__$1, new cljs.core.Keyword(null, "value", "value", 1125876963));
  var map__13099 = value;
  var map__13099__$1 = cljs.core.seq_QMARK_.call(null, map__13099) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13099) : map__13099;
  var media_queries = cljs.core.get.call(null, map__13099__$1, new cljs.core.Keyword(null, "media-queries", "media-queries", 3327326703));
  var url = cljs.core.get.call(null, map__13099__$1, new cljs.core.Keyword(null, "url", "url", 1014020321));
  var url__$1 = typeof url === "string" ? garden.util.wrap_quotes.call(null, url) : garden.compiler.render_css.call(null, url);
  var queries = cljs.core.truth_(media_queries) ? garden.compiler.render_media_expr.call(null, media_queries) : null;
  return[cljs.core.str("@import "), cljs.core.str(cljs.core.truth_(queries) ? [cljs.core.str(url__$1), cljs.core.str(" "), cljs.core.str(queries)].join("") : url__$1), cljs.core.str(garden.compiler.semicolon)].join("");
});
cljs.core._add_method.call(null, garden.compiler.render_at_rule, new cljs.core.Keyword(null, "keyframes", "keyframes", 3862205239), function(p__13101) {
  var map__13102 = p__13101;
  var map__13102__$1 = cljs.core.seq_QMARK_.call(null, map__13102) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13102) : map__13102;
  var value = cljs.core.get.call(null, map__13102__$1, new cljs.core.Keyword(null, "value", "value", 1125876963));
  var map__13103 = value;
  var map__13103__$1 = cljs.core.seq_QMARK_.call(null, map__13103) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13103) : map__13103;
  var frames = cljs.core.get.call(null, map__13103__$1, new cljs.core.Keyword(null, "frames", "frames", 4042356760));
  var identifier = cljs.core.get.call(null, map__13103__$1, new cljs.core.Keyword(null, "identifier", "identifier", 3690438683));
  if (cljs.core.seq.call(null, frames)) {
    var body = [cljs.core.str(garden.util.to_str.call(null, identifier)), cljs.core.str(garden.compiler.l_brace_1), cljs.core.str(garden.compiler.indent_str.call(null, garden.compiler.rule_join.call(null, cljs.core.map.call(null, garden.compiler.render_css, frames)))), cljs.core.str(garden.compiler.r_brace_1)].join("");
    var prefix = function(body) {
      return function(vendor) {
        return[cljs.core.str("@"), cljs.core.str(garden.util.vendor_prefix.call(null, vendor, "keyframes "))].join("");
      };
    }(body);
    return garden.compiler.rule_join.call(null, cljs.core.map.call(null, function(p1__13100_SHARP_) {
      return[cljs.core.str(p1__13100_SHARP_), cljs.core.str(body)].join("");
    }, cljs.core.cons.call(null, "@keyframes ", cljs.core.map.call(null, prefix, garden.compiler.vendors.call(null)))));
  } else {
    return null;
  }
});
cljs.core._add_method.call(null, garden.compiler.render_at_rule, new cljs.core.Keyword(null, "media", "media", 1117676374), function(p__13104) {
  var map__13105 = p__13104;
  var map__13105__$1 = cljs.core.seq_QMARK_.call(null, map__13105) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13105) : map__13105;
  var value = cljs.core.get.call(null, map__13105__$1, new cljs.core.Keyword(null, "value", "value", 1125876963));
  var map__13106 = value;
  var map__13106__$1 = cljs.core.seq_QMARK_.call(null, map__13106) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13106) : map__13106;
  var rules = cljs.core.get.call(null, map__13106__$1, new cljs.core.Keyword(null, "rules", "rules", 1122778217));
  var media_queries = cljs.core.get.call(null, map__13106__$1, new cljs.core.Keyword(null, "media-queries", "media-queries", 3327326703));
  if (cljs.core.seq.call(null, rules)) {
    return[cljs.core.str("@media "), cljs.core.str(garden.compiler.render_media_expr.call(null, media_queries)), cljs.core.str(garden.compiler.l_brace_1), cljs.core.str(garden.compiler.indent_str.call(null, garden.compiler.rule_join.call(null, cljs.core.map.call(null, garden.compiler.render_css, rules)))), cljs.core.str(garden.compiler.r_brace_1)].join("");
  } else {
    return null;
  }
});
garden.compiler.CSSRenderer["null"] = true;
garden.compiler.render_css["null"] = function(this$) {
  return "";
};
cljs.core.Keyword.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.Keyword.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.name.call(null, this$__$1);
};
garden.compiler.CSSRenderer["number"] = true;
garden.compiler.render_css["number"] = function(this$) {
  return[cljs.core.str(this$)].join("");
};
cljs.core.IndexedSeq.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.IndexedSeq.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.map.call(null, garden.compiler.render_css, this$__$1);
};
cljs.core.Subvec.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.Subvec.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.render_rule.call(null, this$__$1);
};
garden.types.CSSAtRule.prototype.garden$compiler$CSSRenderer$ = true;
garden.types.CSSAtRule.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.render_at_rule.call(null, this$__$1);
};
cljs.core.ChunkedCons.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.ChunkedCons.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.map.call(null, garden.compiler.render_css, this$__$1);
};
cljs.core.PersistentTreeMap.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.PersistentTreeMap.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.render_declaration.call(null, this$__$1);
};
cljs.core.PersistentArrayMap.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.PersistentArrayMap.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.render_declaration.call(null, this$__$1);
};
cljs.core.LazySeq.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.LazySeq.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.map.call(null, garden.compiler.render_css, this$__$1);
};
garden.compiler.CSSRenderer["_"] = true;
garden.compiler.render_css["_"] = function(this$) {
  return[cljs.core.str(this$)].join("");
};
garden.types.CSSUnit.prototype.garden$compiler$CSSRenderer$ = true;
garden.types.CSSUnit.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.render_unit.call(null, this$__$1);
};
cljs.core.RSeq.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.RSeq.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.map.call(null, garden.compiler.render_css, this$__$1);
};
garden.color.CSSColor.prototype.garden$compiler$CSSRenderer$ = true;
garden.color.CSSColor.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.render_color.call(null, this$__$1);
};
cljs.core.NodeSeq.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.NodeSeq.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.map.call(null, garden.compiler.render_css, this$__$1);
};
cljs.core.RedNode.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.RedNode.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.render_rule.call(null, this$__$1);
};
cljs.core.ChunkedSeq.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.ChunkedSeq.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.map.call(null, garden.compiler.render_css, this$__$1);
};
cljs.core.PersistentHashMap.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.PersistentHashMap.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.render_declaration.call(null, this$__$1);
};
cljs.core.PersistentVector.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.PersistentVector.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.render_rule.call(null, this$__$1);
};
cljs.core.List.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.List.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.map.call(null, garden.compiler.render_css, this$__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.PersistentArrayMapSeq.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.map.call(null, garden.compiler.render_css, this$__$1);
};
garden.types.CSSFunction.prototype.garden$compiler$CSSRenderer$ = true;
garden.types.CSSFunction.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.render_function.call(null, this$__$1);
};
cljs.core.BlackNode.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.BlackNode.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return garden.compiler.render_rule.call(null, this$__$1);
};
cljs.core.Cons.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.Cons.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.map.call(null, garden.compiler.render_css, this$__$1);
};
cljs.core.ArrayNodeSeq.prototype.garden$compiler$CSSRenderer$ = true;
cljs.core.ArrayNodeSeq.prototype.garden$compiler$CSSRenderer$render_css$arity$1 = function(this$) {
  var this$__$1 = this;
  return cljs.core.map.call(null, garden.compiler.render_css, this$__$1);
};
garden.compiler.compile_stylesheet = function compile_stylesheet(flags, rules) {
  var _STAR_flags_STAR_13108 = garden.compiler._STAR_flags_STAR_;
  try {
    garden.compiler._STAR_flags_STAR_ = flags;
    return garden.compiler.rule_join.call(null, cljs.core.remove.call(null, cljs.core.nil_QMARK_, cljs.core.map.call(null, garden.compiler.render_css, cljs.core.filter.call(null, garden.compiler.top_level_expression_QMARK_, garden.compiler.expand_stylesheet.call(null, rules)))));
  } finally {
    garden.compiler._STAR_flags_STAR_ = _STAR_flags_STAR_13108;
  }
};
garden.compiler.compile_style = function compile_style(ms) {
  return cljs.core.first.call(null, garden.compiler.render_css.call(null, garden.compiler.expand.call(null, cljs.core.reduce.call(null, cljs.core.merge, cljs.core.filter.call(null, garden.util.declaration_QMARK_, ms)))));
};
garden.compiler.compile_css = function() {
  var compile_css__delegate = function(flags, rules) {
    var vec__13110 = cljs.core.truth_(function() {
      var and__8282__auto__ = garden.util.hash_map_QMARK_.call(null, flags);
      if (and__8282__auto__) {
        return cljs.core.some.call(null, cljs.core.set.call(null, cljs.core.keys.call(null, flags)), cljs.core.keys.call(null, garden.compiler._STAR_flags_STAR_));
      } else {
        return and__8282__auto__;
      }
    }()) ? new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.merge.call(null, garden.compiler._STAR_flags_STAR_, flags), rules], null) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [garden.compiler._STAR_flags_STAR_, cljs.core.cons.call(null, flags, rules)], null);
    var flags__$1 = cljs.core.nth.call(null, vec__13110, 0, null);
    var rules__$1 = cljs.core.nth.call(null, vec__13110, 1, null);
    var output_to = (new cljs.core.Keyword(null, "output-to", "output-to", 3189532217)).cljs$core$IFn$_invoke$arity$1(flags__$1);
    var stylesheet = function() {
      var stylesheet = garden.compiler.compile_stylesheet.call(null, flags__$1, rules__$1);
      if (cljs.core.truth_((new cljs.core.Keyword(null, "pretty-print?", "pretty-print?", 3437152219)).cljs$core$IFn$_invoke$arity$1(flags__$1))) {
        return stylesheet;
      } else {
        return garden.compiler.compress_stylesheet.call(null, stylesheet);
      }
    }();
    return stylesheet;
  };
  var compile_css = function(flags, var_args) {
    var rules = null;
    if (arguments.length > 1) {
      rules = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return compile_css__delegate.call(this, flags, rules);
  };
  compile_css.cljs$lang$maxFixedArity = 1;
  compile_css.cljs$lang$applyTo = function(arglist__13111) {
    var flags = cljs.core.first(arglist__13111);
    var rules = cljs.core.rest(arglist__13111);
    return compile_css__delegate(flags, rules);
  };
  compile_css.cljs$core$IFn$_invoke$arity$variadic = compile_css__delegate;
  return compile_css;
}();
goog.provide("garden.core");
goog.require("cljs.core");
goog.require("garden.compiler");
goog.require("garden.compiler");
garden.core.css = function() {
  var css__delegate = function(rules) {
    return cljs.core.apply.call(null, garden.compiler.compile_css, rules);
  };
  var css = function(var_args) {
    var rules = null;
    if (arguments.length > 0) {
      rules = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return css__delegate.call(this, rules);
  };
  css.cljs$lang$maxFixedArity = 0;
  css.cljs$lang$applyTo = function(arglist__13028) {
    var rules = cljs.core.seq(arglist__13028);
    return css__delegate(rules);
  };
  css.cljs$core$IFn$_invoke$arity$variadic = css__delegate;
  return css;
}();
garden.core.style = function() {
  var style__delegate = function(maps) {
    return garden.compiler.compile_style.call(null, maps);
  };
  var style = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return style__delegate.call(this, maps);
  };
  style.cljs$lang$maxFixedArity = 0;
  style.cljs$lang$applyTo = function(arglist__13029) {
    var maps = cljs.core.seq(arglist__13029);
    return style__delegate(maps);
  };
  style.cljs$core$IFn$_invoke$arity$variadic = style__delegate;
  return style;
}();
goog.provide("tailrecursion.hoplon.app_pages.G__19657");
goog.require("cljs.core");
goog.require("garden.core");
goog.require("tailrecursion.javelin");
goog.require("tailrecursion.hoplon");
goog.require("tailrecursion.javelin");
goog.require("bootstrap.tabs");
goog.require("bootstrap.tabs");
goog.require("bootstrap.grid");
goog.require("clojure.string");
goog.require("bootstrap.grid");
goog.require("bootstrap.navbar");
goog.require("bootstrap.navbar");
goog.require("bootstrap.page");
goog.require("bootstrap.page");
goog.require("clojure.string");
goog.require("tailrecursion.hoplon");
goog.require("tailrecursion.hoplon.util");
goog.require("tailrecursion.hoplon.util");
goog.require("bootstrap.list");
goog.require("bootstrap.list");
goog.require("bootstrap.panel");
goog.require("bootstrap.panel");
goog.require("garden.core");
goog.require("bootstrap.meta");
goog.require("bootstrap.core");
goog.require("bootstrap.meta");
goog.require("bootstrap.core");
tailrecursion.hoplon.app_pages.G__19657.hoploninit = function hoploninit() {
  tailrecursion.hoplon.app_pages.G__19657.route = tailrecursion.hoplon.util.route_cell.call(null, 10, "#/home/");
  tailrecursion.hoplon.app_pages.G__19657.hyphenate_BANG_ = function hyphenate_BANG_() {
    jQuery("p").addClass("hyphenate").css("text-align", "justify");
    return Hyphenator.run();
  };
  tailrecursion.hoplon.app_pages.G__19657.vec__21425 = bootstrap.page.navbar_fixed_top.call(null, tailrecursion.hoplon.app_pages.G__19657.route, "Grounded Solutions", "Grounded Solutions", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.a.call(null, new cljs.core.Keyword(null, "href", "href", 1017115293), "#/home/", "Home"), tailrecursion.hoplon.div.call(null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
  [tailrecursion.hoplon.a.call(null, new cljs.core.Keyword(null, "href", "href", 1017115293), "#/page2/", "Page Two"), bootstrap.core.container.call(null)], null));
  tailrecursion.hoplon.app_pages.G__19657.page_setup = cljs.core.nth.call(null, tailrecursion.hoplon.app_pages.G__19657.vec__21425, 0, null);
  tailrecursion.hoplon.app_pages.G__19657.nav_bar = cljs.core.nth.call(null, tailrecursion.hoplon.app_pages.G__19657.vec__21425, 1, null);
  tailrecursion.hoplon.app_pages.G__19657.content_home = cljs.core.nth.call(null, tailrecursion.hoplon.app_pages.G__19657.vec__21425, 2, null);
  tailrecursion.hoplon.app_pages.G__19657.content_page2 = cljs.core.nth.call(null, tailrecursion.hoplon.app_pages.G__19657.vec__21425, 3, null);
  tailrecursion.hoplon.app_pages.G__19657.indexed = cljs.core.partial.call(null, cljs.core.map_indexed, cljs.core.list);
  tailrecursion.hoplon.app_pages.G__19657.gs_tasks = tailrecursion.javelin.cell.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "cur", "cur", 1014003122), null, new cljs.core.Keyword(null, "toc", "toc", 1014019258), cljs.core.PersistentVector.EMPTY], null));
  tailrecursion.hoplon.app_pages.G__19657.example = tailrecursion.javelin.cell.call(null, 1);
  tailrecursion.hoplon.app_pages.G__19657.jump_to_toc = function() {
    var jump_to_toc__delegate = function(args__2385__auto__) {
      var vec__21432 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
      var map__21433 = cljs.core.nth.call(null, vec__21432, 0, null);
      var map__21433__$1 = cljs.core.seq_QMARK_.call(null, map__21433) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21433) : map__21433;
      var tocs = cljs.core.get.call(null, map__21433__$1, new cljs.core.Keyword(null, "tocs", "tocs", 1017469853));
      var _ = cljs.core.nth.call(null, vec__21432, 1, null);
      return tailrecursion.hoplon.a.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "topfix", new cljs.core.Keyword(null, "do-scroll-to", "do-scroll-to", 3603706411), tailrecursion.javelin.lift.call(null, function(G__21434, G__21437, G__21435, G__21436) {
        return G__21434.call(null, G__21435, G__21436.call(null, new cljs.core.Keyword(null, "cur", "cur", 1014003122), G__21437));
      }).call(null, cljs.core.some, tocs, cljs.core.zero_QMARK_, cljs.core.map));
    };
    var jump_to_toc = function(var_args) {
      var args__2385__auto__ = null;
      if (arguments.length > 0) {
        args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return jump_to_toc__delegate.call(this, args__2385__auto__);
    };
    jump_to_toc.cljs$lang$maxFixedArity = 0;
    jump_to_toc.cljs$lang$applyTo = function(arglist__21479) {
      var args__2385__auto__ = cljs.core.seq(arglist__21479);
      return jump_to_toc__delegate(args__2385__auto__);
    };
    jump_to_toc.cljs$core$IFn$_invoke$arity$variadic = jump_to_toc__delegate;
    return jump_to_toc;
  }();
  tailrecursion.hoplon.app_pages.G__19657.table_of_contents = function() {
    var table_of_contents__delegate = function(args__2385__auto__) {
      var vec__21447 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
      var map__21448 = cljs.core.nth.call(null, vec__21447, 0, null);
      var map__21448__$1 = cljs.core.seq_QMARK_.call(null, map__21448) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21448) : map__21448;
      var toc = cljs.core.get.call(null, map__21448__$1, new cljs.core.Keyword(null, "toc", "toc", 1014019258));
      var size = cljs.core.get.call(null, map__21448__$1, new cljs.core.Keyword(null, "size", "size", 1017434995));
      var _ = cljs.core.nth.call(null, vec__21447, 1, null);
      var toc_STAR_ = tailrecursion.javelin.lift.call(null, function(G__21450, G__21449) {
        return G__21449.call(null, (new cljs.core.Keyword(null, "toc", "toc", 1014019258)).cljs$core$IFn$_invoke$arity$1(G__21450));
      }).call(null, toc, tailrecursion.hoplon.app_pages.G__19657.indexed);
      return tailrecursion.hoplon.ul.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "list-unstyled", tailrecursion.hoplon.loop_tpl_STAR_.call(null, toc_STAR_, null, function(item__2392__auto__) {
        var vec__21451 = tailrecursion.javelin.cell_map.call(null, cljs.core.identity, tailrecursion.javelin.lift.call(null, function(G__21453) {
          var vec__21452 = G__21453;
          var i = cljs.core.nth.call(null, vec__21452, 0, null);
          var title = cljs.core.nth.call(null, vec__21452, 1, null);
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [i, title], null);
        }).call(null, item__2392__auto__));
        var i = cljs.core.nth.call(null, vec__21451, 0, null);
        var title = cljs.core.nth.call(null, vec__21451, 1, null);
        return tailrecursion.hoplon.li.call(null, tailrecursion.hoplon.a.call(null, new cljs.core.Keyword(null, "style", "style", 1123684643), "cursor:pointer;", new cljs.core.Keyword(null, "on-click", "on-click", 1416542092), function() {
          cljs.core.swap_BANG_.call(null, toc, cljs.core.assoc, new cljs.core.Keyword(null, "cur", "cur", 1014003122), null);
          return cljs.core.swap_BANG_.call(null, toc, cljs.core.assoc, new cljs.core.Keyword(null, "cur", "cur", 1014003122), cljs.core.deref.call(null, i) + 1);
        }, function() {
          var t__2406__auto__ = document.createTextNode("");
          tailrecursion.javelin.lift.call(null, function(G__21454, G__21455) {
            return G__21454.nodeValue = [cljs.core.str(G__21455)].join("");
          }).call(null, t__2406__auto__, title);
          return t__2406__auto__;
        }()));
      }));
    };
    var table_of_contents = function(var_args) {
      var args__2385__auto__ = null;
      if (arguments.length > 0) {
        args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return table_of_contents__delegate.call(this, args__2385__auto__);
    };
    table_of_contents.cljs$lang$maxFixedArity = 0;
    table_of_contents.cljs$lang$applyTo = function(arglist__21480) {
      var args__2385__auto__ = cljs.core.seq(arglist__21480);
      return table_of_contents__delegate(args__2385__auto__);
    };
    table_of_contents.cljs$core$IFn$_invoke$arity$variadic = table_of_contents__delegate;
    return table_of_contents;
  }();
  tailrecursion.hoplon.app_pages.G__19657.gs_block = function() {
    var gs_block__delegate = function(args__2385__auto__) {
      var vec__21461 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
      var map__21462 = cljs.core.nth.call(null, vec__21461, 0, null);
      var map__21462__$1 = cljs.core.seq_QMARK_.call(null, map__21462) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21462) : map__21462;
      var title = cljs.core.get.call(null, map__21462__$1, new cljs.core.Keyword(null, "title", "title", 1124275658));
      var type = cljs.core.get.call(null, map__21462__$1, new cljs.core.Keyword(null, "type", "type", 1017479852));
      var toc = cljs.core.get.call(null, map__21462__$1, new cljs.core.Keyword(null, "toc", "toc", 1014019258));
      var kids = cljs.core.nth.call(null, vec__21461, 1, null);
      if (cljs.core.truth_(toc)) {
        cljs.core.swap_BANG_.call(null, toc, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "toc", "toc", 1014019258)], null), cljs.core.conj, title);
      } else {
      }
      return bootstrap.panel.default$.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), [cljs.core.str("panel-"), cljs.core.str(cljs.core.name.call(null, type))].join(""), cljs.core.truth_(toc) ? tailrecursion.hoplon.a.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "topfix", new cljs.core.Keyword(null, "do-scroll-to", "do-scroll-to", 3603706411), tailrecursion.javelin.lift.call(null, function(G__21464, G__21465, G__21463) {
        return G__21463.call(null, G__21464, (new cljs.core.Keyword(null, "cur", "cur", 1014003122)).cljs$core$IFn$_invoke$arity$1(G__21465));
      }).call(null, cljs.core.count.call(null, (new cljs.core.Keyword(null, "toc", "toc", 1014019258)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, toc))), toc, cljs.core._EQ_)) : null, bootstrap.panel.heading.call(null, bootstrap.panel.title.call(null, title)), bootstrap.panel.body.call(null, kids, cljs.core.truth_(toc) ? tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "style", "style", 1123684643), "text-align:center", tailrecursion.hoplon.a.call(null, new cljs.core.Keyword(null, 
      "on-click", "on-click", 1416542092), function() {
        cljs.core.swap_BANG_.call(null, toc, cljs.core.assoc, new cljs.core.Keyword(null, "cur", "cur", 1014003122), null);
        return cljs.core.swap_BANG_.call(null, toc, cljs.core.assoc, new cljs.core.Keyword(null, "cur", "cur", 1014003122), 0);
      }, "back to top")) : null));
    };
    var gs_block = function(var_args) {
      var args__2385__auto__ = null;
      if (arguments.length > 0) {
        args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return gs_block__delegate.call(this, args__2385__auto__);
    };
    gs_block.cljs$lang$maxFixedArity = 0;
    gs_block.cljs$lang$applyTo = function(arglist__21481) {
      var args__2385__auto__ = cljs.core.seq(arglist__21481);
      return gs_block__delegate(args__2385__auto__);
    };
    gs_block.cljs$core$IFn$_invoke$arity$variadic = gs_block__delegate;
    return gs_block;
  }();
  tailrecursion.hoplon.app_pages.G__19657.gs_info = cljs.core.partial.call(null, tailrecursion.hoplon.app_pages.G__19657.gs_block, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "info", "info", 1017141280));
  tailrecursion.hoplon.app_pages.G__19657.gs_task = cljs.core.partial.call(null, tailrecursion.hoplon.app_pages.G__19657.gs_block, new cljs.core.Keyword(null, "toc", "toc", 1014019258), tailrecursion.hoplon.app_pages.G__19657.gs_tasks, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "primary", "primary", 699138420));
  tailrecursion.hoplon.app_pages.G__19657.copyright_footer = function copyright_footer() {
    return tailrecursion.hoplon.footer.call(null, tailrecursion.hoplon.div.call(null, "Copyright \u00a9"));
  };
  tailrecursion.hoplon.html.call(null, new cljs.core.Keyword(null, "lang", "lang", 1017218400), "en", tailrecursion.hoplon.head.call(null, cljs.core.meta.call(null, new cljs.core.Keyword(null, "charset", "charset", 1752978622), "utf-8"), cljs.core.meta.call(null, new cljs.core.Keyword(null, "name", "name", 1017277949), "viewport", new cljs.core.Keyword(null, "content", "content", 1965434859), "width\x3ddevice-width, initial-scale\x3d1.0"), cljs.core.meta.call(null, new cljs.core.Keyword(null, "name", 
  "name", 1017277949), "keywords", new cljs.core.Keyword(null, "content", "content", 1965434859), ""), cljs.core.meta.call(null, new cljs.core.Keyword(null, "name", "name", 1017277949), "description", new cljs.core.Keyword(null, "content", "content", 1965434859), "description"), tailrecursion.hoplon.link.call(null, new cljs.core.Keyword(null, "href", "href", 1017115293), "css/bootstrap.min.css", new cljs.core.Keyword(null, "rel", "rel", 1014017035), "stylesheet", new cljs.core.Keyword(null, "media", 
  "media", 1117676374), "screen"), tailrecursion.hoplon.link.call(null, new cljs.core.Keyword(null, "href", "href", 1017115293), "css/starter-template.css", new cljs.core.Keyword(null, "rel", "rel", 1014017035), "stylesheet", new cljs.core.Keyword(null, "media", "media", 1117676374), "screen"), tailrecursion.hoplon.link.call(null, new cljs.core.Keyword(null, "rel", "rel", 1014017035), "stylesheet", new cljs.core.Keyword(null, "type", "type", 1017479852), "text/css", new cljs.core.Keyword(null, "href", 
  "href", 1017115293), "screen.css"), tailrecursion.hoplon.title.call(null, "Title")), tailrecursion.hoplon.body.call(null, tailrecursion.hoplon.style.call(null, new cljs.core.Keyword(null, "type", "type", 1017479852), "text/css", garden.core.css.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, ".box", ".box", 1015372367), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "color", "color", 1108746965), "red"], 
  null)], null))), tailrecursion.hoplon.a.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "topfix", new cljs.core.Keyword(null, "do-scroll-to", "do-scroll-to", 3603706411), tailrecursion.javelin.lift.call(null, function(G__21466) {
    return G__21466;
  }).call(null, tailrecursion.hoplon.app_pages.G__19657.route)), tailrecursion.hoplon.noscript.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "nojs-error", "This page uses JavaScript but it looks like you have it turned off.")), tailrecursion.hoplon.app_pages.G__19657.content_home.call(null, bootstrap.core.jumbotron.call(null, bootstrap.core.container.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 
  1108647146), "logo-bar", tailrecursion.hoplon.img.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "logo", new cljs.core.Keyword(null, "src", "src", 1014018390), "img/grounded-trans-bar_02.png")))), bootstrap.core.container.call(null, bootstrap.grid.row.call(null, bootstrap.grid.col6.call(null, tailrecursion.hoplon.h2.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "description", "Natural Planet Health Care")), bootstrap.grid.col6.call(null, tailrecursion.hoplon.div.call(null, 
  new cljs.core.Keyword(null, "class", "class", 1108647146), "contact", tailrecursion.hoplon.h4.call(null, "Contact"), tailrecursion.hoplon.span.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "name", "Amanda Martin"), tailrecursion.hoplon.span.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "telephone", tailrecursion.hoplon.small.call(null, "tel:"), " 352.219.5381"), tailrecursion.hoplon.a.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), 
  "web", new cljs.core.Keyword(null, "href", "href", 1017115293), "http://groundedsol.com", "GroundedSol.com"), tailrecursion.hoplon.a.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "email", new cljs.core.Keyword(null, "href", "href", 1017115293), "mailto:groundedsolution@gmail.com", "GroundedSolution@gmail.com")))), bootstrap.grid.row.call(null, bootstrap.grid.col.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "product-availibility", 
  tailrecursion.hoplon.span.call(null, "Larger sizes available upon request"), tailrecursion.hoplon.span.call(null, "All products available in Quart, Gallon, 2.5 Gallon and 5 Gallon"))), bootstrap.list.divgroup.call(null, bootstrap.list.divitem.call(null, new cljs.core.Keyword(null, "on-click", "on-click", 1416542092), function() {
    return cljs.core.reset_BANG_.call(null, tailrecursion.hoplon.app_pages.G__19657.example, 1);
  }, tailrecursion.hoplon.a.call(null, new cljs.core.Keyword(null, "do-toggle", "do-toggle", 1250159176), tailrecursion.javelin.lift.call(null, function(G__21467, G__21468) {
    return G__21467.call(null, G__21468, 1);
  }).call(null, cljs.core.not_EQ_, tailrecursion.hoplon.app_pages.G__19657.example), tailrecursion.hoplon.h3.call(null, "Liquid Products"), tailrecursion.hoplon.span.call(null, "Drench or foliar application")), tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "do-toggle", "do-toggle", 1250159176), tailrecursion.javelin.lift.call(null, function(G__21469, G__21470) {
    return G__21469.call(null, G__21470, 1);
  }).call(null, cljs.core._EQ_, tailrecursion.hoplon.app_pages.G__19657.example), tailrecursion.hoplon.h3.call(null, "Liquid Products"), tailrecursion.hoplon.span.call(null, "Drench or foliar application"), tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "product-list", tailrecursion.hoplon.div.call(null, tailrecursion.hoplon.h4.call(null, "Vermaplex \u00ae"), tailrecursion.hoplon.p.call(null, "OMRI Listed, Certified Organic VermaPlex is a concentrated all natural microbial soil amendment as well as a plant probiotic liquid, designed to enhance plant growth, flowering and fruit production. VermaPlex is derived from pure Black Castings\u2122 and contains liquid humate, soluble sea kelp, yucca, amino acids, beneficial microbes and other natural ingredients."), 
  tailrecursion.hoplon.div.call(null, tailrecursion.hoplon.ul.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "qualities", tailrecursion.hoplon.li.call(null, "Contains auxins (root growth), cytokinins (shoot growth)"), tailrecursion.hoplon.li.call(null, "Contains endo and ecto mycorrhizzae"), tailrecursion.hoplon.li.call(null, "Other useful microbes, such as heterotrophic bacteria, fungi, actinomycetes, nitrogen fixers, and phosphate stabilizers."), tailrecursion.hoplon.li.call(null, 
  "Builds root zone health protecting from soil borne pathogens."), tailrecursion.hoplon.li.call(null, "Enhances water retention capabilities of the soil."), tailrecursion.hoplon.li.call(null, "Increases the efficiency of commercial fertilizer usage."), tailrecursion.hoplon.li.call(null, "Mitigates nitrate leaching into water table or nearby water bodies."), tailrecursion.hoplon.li.call(null, "A natural liquid extract (not a compost tea)")), tailrecursion.hoplon.h5.call(null, "VermaPlex Rate"), tailrecursion.hoplon.p.call(null, 
  "For foliar application use 4 oz to 1 gallon of water. For drenching or watering all plants use 2 oz to 1 gallon of water. For root dip or applying to compost use 8 oz to 1 gallon of water."))), tailrecursion.hoplon.div.call(null, tailrecursion.hoplon.h4.call(null, "VermaMax-LE \u00ae"), tailrecursion.hoplon.p.call(null, "A liquid extract from Omri Certi\ufb01ed Pure Black Castings\u2122 and VermaMax\u00ae. VermaMax-LE is a microbial soil inoculant and liquid fertilizer. This probiotic liquid concentrate also contains liquid humate, yucca, and soluble sea kelp.")), 
  tailrecursion.hoplon.div.call(null, tailrecursion.hoplon.h4.call(null, "Black Sea Kelp"), tailrecursion.hoplon.p.call(null, "A balanced source of macronutrients and micronutrients, providing over 60 trace elements plants need in very small quantities. Kelp also contains growth-promoting hormones and enzymes. Used a growth enhancer, kelp helps roots absorb nutrients more effectively from the soil. 100% organic and has been used by farmers for centuries. Not known to clog emitters.")), tailrecursion.hoplon.div.call(null, 
  tailrecursion.hoplon.h4.call(null, "Hydrolyzed Fish + Kelp"), tailrecursion.hoplon.p.call(null, "Hydrolyzed Fish can be mixed with most liquid fertilizers during seeding, pre-planting, side dress, and irrigation. This fertilizer uses every piece of the \ufb01sh through a cold pasteurizing technique, retaining the most nutrients and amino acids naturally found in \ufb01sh. Kelp extract is included, increasing nutrition in the form of Humic acid, Fulvic acid, and Colloidal minerals. This mixture also contains natural rooting hormones that improve root length and root mass. (span In conjunction with bene\ufb01cial) microbe activity, hydrolyzed \ufb01sh + kelp allows the absorption of nutrients more ef\ufb01ciently. NPK \x3d 2 - 5 - 0 * Strong odor, may clog emitters, do not tank mix with herbicides."))))), 
  bootstrap.list.divitem.call(null, new cljs.core.Keyword(null, "on-click", "on-click", 1416542092), function() {
    return cljs.core.reset_BANG_.call(null, tailrecursion.hoplon.app_pages.G__19657.example, 2);
  }, tailrecursion.hoplon.a.call(null, new cljs.core.Keyword(null, "do-toggle", "do-toggle", 1250159176), tailrecursion.javelin.lift.call(null, function(G__21471, G__21472) {
    return G__21471.call(null, G__21472, 2);
  }).call(null, cljs.core.not_EQ_, tailrecursion.hoplon.app_pages.G__19657.example), tailrecursion.hoplon.h3.call(null, "Granular and Powder products"), tailrecursion.hoplon.span.call(null, "To be tilled into soil or used as top-dress above roots")), tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "do-toggle", "do-toggle", 1250159176), tailrecursion.javelin.lift.call(null, function(G__21473, G__21474) {
    return G__21473.call(null, G__21474, 2);
  }).call(null, cljs.core._EQ_, tailrecursion.hoplon.app_pages.G__19657.example), tailrecursion.hoplon.h3.call(null, "Granular and Powder products"), tailrecursion.hoplon.span.call(null, "To be tilled into soil or used as top-dress above roots"), tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "product-list", tailrecursion.hoplon.div.call(null, tailrecursion.hoplon.h4.call(null, "Black Castings"), tailrecursion.hoplon.p.call(null, ":OMRI Listed, Certi\ufb01ed Organic 99.9% Pure Earthworm Castings produced from a blend of pure organic materials. This proprietary process of cultivation results in a consistent, slow release, bio-diverse organic fertilizer produced by earthworms. Castings are rich in minerals and natural microorganisms enhancing the natural soil food web. NPK \x3d 1.0 - 0.5 - 0.2", 
  tailrecursion.hoplon.p.call(null, "OMRI Listed, Certified Organic 99.9% Pure Earthworm Castings produced from a blend of pure organic materials. This proprietary process results in a consistent, slow release, bio-diverse organic fertilizer produced by earthworms. Castings are rich in minerals and natural microorganisms enhancing the natural soil food web. No human, animal, food or yard wastes are used in this process. It is safe to use in all places"), tailrecursion.hoplon.ul.call(null, new cljs.core.Keyword(null, 
  "class", "class", 1108647146), "qualities", tailrecursion.hoplon.li.call(null, "NPK \x3d 1.0 - 0.5 - 0.2"), tailrecursion.hoplon.li.call(null, "Spring and fall applications assist in Green-up and Winter Conditioning."), tailrecursion.hoplon.li.call(null, "Increases drought resistance in plants and trees. "), tailrecursion.hoplon.li.call(null, "Adds organic materials into the soil."), tailrecursion.hoplon.li.call(null, "Increases Cation Exchange Capacity, increasing fertilization efficiency."), 
  tailrecursion.hoplon.li.call(null, "Will not burn plants."), tailrecursion.hoplon.li.call(null, "Stabilizes soil pH around root zone."), tailrecursion.hoplon.li.call(null, "Increases biological activity in the soil."), tailrecursion.hoplon.li.call(null, "Builds a natural competitive exclusion to pests and diseases."), tailrecursion.hoplon.li.call(null, "Enhances root growth, flowering and fruit production."), tailrecursion.hoplon.li.call(null, "Zero ground water contamination \x26 no nitrogen run-off."), 
  tailrecursion.hoplon.li.call(null, "Not contaminated by any soil or compost blends.")), tailrecursion.hoplon.h5.call(null, "VermaPlex Rate"), tailrecursion.hoplon.p.call(null, "For foliar application use 4 oz to 1 gallon of water. For drenching or watering all plants use 2 oz to 1 gallon of water. For root dip or applying to compost use 8 oz to 1 gallon of water.")), tailrecursion.hoplon.div.call(null, tailrecursion.hoplon.h4.call(null, "VermaMax \u00ae"), tailrecursion.hoplon.p.call(null, "OMRI Listed Certi\ufb01ed Organic plant food made from Pure Black Castings\u2122 and organic poultry compost (chicken litter) treated with VermaPlex\u00ae for extra nitrogen needs. Enhances plant growth, \ufb02owering and fruit production. This all purpose, indoor/outdoor all natural organic plant food provides extra nitrogen and 6.72% Calcium. NPK \x3d 3.0 - 2.8 - 1.8")), 
  tailrecursion.hoplon.div.call(null, tailrecursion.hoplon.h4.call(null, "Granular Kelp Meal"), tailrecursion.hoplon.p.call(null, ":A granular seaweed product derived from Ascophyllum nodosum, the species of kelp best suited for agricultural and horticultural applications. Kelp meal is an excellent source of potash, for root development, and will aid in plant resistance to nematodes, disease and small pests.")), tailrecursion.hoplon.div.call(null, tailrecursion.hoplon.h4.call(null, "Nutri-cast"), 
  tailrecursion.hoplon.p.call(null, "a blend of Pure Black Castings\u2122 and NutriSmart\u2122 Bio-Fertilizer. Loaded with bene\ufb01cial enzymes, microorganisms, and humic acids, Nutri-Cast provides an organic energy source for biological activity in the soil. This micronutrient blend stimulates germination, root system development, increases plant stress tolerance and pest/disease resistance. Nutri-Cast in\ufb02uences metabolic activity such as photosynthesis, respiration, nucleic acid synthesis and iron uptake. Also used as a soil conditioner to neutralize excessive salts built up in the soil through repeated applications of chemicals and high salt fertilizers.")), 
  tailrecursion.hoplon.div.call(null, tailrecursion.hoplon.h4.call(null, "Palm Perfection"), tailrecursion.hoplon.p.call(null, "Another high quality blended product made from Omri Certi\ufb01ed Pure Black Castings\u2122, Black Sea Kelp and Liquid Yucca Extract. Florida sandy soils are often de\ufb01cient in a multitude of trace elements; this blend of micronutrients restores nutrients to the soil while stabilizing them from the threat of leaching."))))), bootstrap.list.divitem.call(null, new cljs.core.Keyword(null, 
  "on-click", "on-click", 1416542092), function() {
    return cljs.core.reset_BANG_.call(null, tailrecursion.hoplon.app_pages.G__19657.example, 3);
  }, tailrecursion.hoplon.a.call(null, new cljs.core.Keyword(null, "do-toggle", "do-toggle", 1250159176), tailrecursion.javelin.lift.call(null, function(G__21475, G__21476) {
    return G__21475.call(null, G__21476, 3);
  }).call(null, cljs.core.not_EQ_, tailrecursion.hoplon.app_pages.G__19657.example), tailrecursion.hoplon.h3.call(null, "Amend products directly into soil"), tailrecursion.hoplon.span.call(null, "For speci\ufb01c plant needs or condition soil for general health")), tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "do-toggle", "do-toggle", 1250159176), tailrecursion.javelin.lift.call(null, function(G__21477, G__21478) {
    return G__21477.call(null, G__21478, 3);
  }).call(null, cljs.core._EQ_, tailrecursion.hoplon.app_pages.G__19657.example), tailrecursion.hoplon.h3.call(null, "Amend products directly into soil"), tailrecursion.hoplon.span.call(null, "For speci\ufb01c plant needs or condition soil for general health"), tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "product-list", tailrecursion.hoplon.div.call(null, tailrecursion.hoplon.h4.call(null, "Coral Calcium 34%"), tailrecursion.hoplon.p.call(null, "Sustainably farmed, Coral calcium is composed primarily of calcium carbonate (CaCO3), with small amounts of magnesium and other trace minerals. Used to increase the pH of the soil (make more alkaline) while increasing water penetration and nutrient uptake of NPK when growing in acidic soils.")), 
  tailrecursion.hoplon.div.call(null, tailrecursion.hoplon.h4.call(null, "Leonardite"), tailrecursion.hoplon.p.call(null, "A granular source of humic acid (up to 90%) is used as a soil conditioner to improve the soil\u2019s physical qualities. Humic acid will bind cations (positively charged elements), such as Mg++, Ca++, Fe++, and other trace elements of value to plants. In this way, it grabs minerals locked up in the soil and holds onto newly applied fertilizer, preventing leaching. Leonardite facilitates the uptake of the ions (nutrients) by holding them until plants can and need to access them.")), 
  tailrecursion.hoplon.div.call(null, tailrecursion.hoplon.h4.call(null, "Liquid Humate Plus"), tailrecursion.hoplon.p.call(null, "A liquid source for increasing the Cation Exchange Capacity (CEC). Liquid humate plus will bind and hold elements in a localized area for root system uptake. Used in conjunction with VermaPlex \u00ae probiotic microbes, macronutrients (NPK) and micronutrients (trace elements) will be in an available form, increasing the ef\ufb01ciency of each application of fertilizer, reducing the need for frequent applications.")), 
  tailrecursion.hoplon.div.call(null, tailrecursion.hoplon.h4.call(null, "Fulvic Acid 5%:"), tailrecursion.hoplon.p.call(null, "Due to the relatively small size of Fulvic acid molecules they can readily enter plant roots, stems, and leaves. As they enter these plant parts they carry trace minerals from plant surfaces into plant tissues. Fulvic acids are key ingredients of high quality foliar fertilizers due to oxygen content twice that of humic acids, and increased chemical reactivity of multiple carboxyl (COOH) and hydroxyl (COH) groups.")), 
  tailrecursion.hoplon.div.call(null, tailrecursion.hoplon.h4.call(null, "Yucca Liquid Extract"), tailrecursion.hoplon.p.call(null, "100% natural wetting agent derived from Yucca schidegera. Yucca increases soil permeability, allowing water and nutrients to reach plants faster while improving the soil\u2019s water holding capacity. Use as a surfactant when applying biological pest control or liquid fertilizers for increased surface area coverage and longer staying capacity on each leaf for residues to be most effective."))))))))))));
  return tailrecursion.hoplon.init.call(null, cljs.core.PersistentVector.EMPTY);
};
goog.exportSymbol("tailrecursion.hoplon.app_pages.G__19657.hoploninit", tailrecursion.hoplon.app_pages.G__19657.hoploninit);
goog.provide("bootstrap.glyph");
goog.require("cljs.core");
goog.require("tailrecursion.javelin");
goog.require("tailrecursion.hoplon");
goog.require("tailrecursion.hoplon");
goog.require("tailrecursion.javelin");
bootstrap.glyph.mkglyph = function mkglyph(img) {
  return tailrecursion.hoplon.span.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), [cljs.core.str("glyphicon glyphicon-"), cljs.core.str(img)].join(""));
};
bootstrap.glyph.star = function() {
  var star__delegate = function(args__2385__auto__) {
    var vec__20593 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20593, 0, null);
    var kids = cljs.core.nth.call(null, vec__20593, 1, null);
    return bootstrap.glyph.mkglyph.call(null, "star");
  };
  var star = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return star__delegate.call(this, args__2385__auto__);
  };
  star.cljs$lang$maxFixedArity = 0;
  star.cljs$lang$applyTo = function(arglist__20594) {
    var args__2385__auto__ = cljs.core.seq(arglist__20594);
    return star__delegate(args__2385__auto__);
  };
  star.cljs$core$IFn$_invoke$arity$variadic = star__delegate;
  return star;
}();
bootstrap.glyph.cloud_download = function() {
  var cloud_download__delegate = function(args__2385__auto__) {
    var vec__20596 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20596, 0, null);
    var kids = cljs.core.nth.call(null, vec__20596, 1, null);
    return bootstrap.glyph.mkglyph.call(null, "cloud-download");
  };
  var cloud_download = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cloud_download__delegate.call(this, args__2385__auto__);
  };
  cloud_download.cljs$lang$maxFixedArity = 0;
  cloud_download.cljs$lang$applyTo = function(arglist__20597) {
    var args__2385__auto__ = cljs.core.seq(arglist__20597);
    return cloud_download__delegate(args__2385__auto__);
  };
  cloud_download.cljs$core$IFn$_invoke$arity$variadic = cloud_download__delegate;
  return cloud_download;
}();
bootstrap.glyph.cloud_upload = function() {
  var cloud_upload__delegate = function(args__2385__auto__) {
    var vec__20599 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20599, 0, null);
    var kids = cljs.core.nth.call(null, vec__20599, 1, null);
    return bootstrap.glyph.mkglyph.call(null, "cloud-upload");
  };
  var cloud_upload = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cloud_upload__delegate.call(this, args__2385__auto__);
  };
  cloud_upload.cljs$lang$maxFixedArity = 0;
  cloud_upload.cljs$lang$applyTo = function(arglist__20600) {
    var args__2385__auto__ = cljs.core.seq(arglist__20600);
    return cloud_upload__delegate(args__2385__auto__);
  };
  cloud_upload.cljs$core$IFn$_invoke$arity$variadic = cloud_upload__delegate;
  return cloud_upload;
}();
bootstrap.glyph.pushpin = function() {
  var pushpin__delegate = function(args__2385__auto__) {
    var vec__20602 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20602, 0, null);
    var kids = cljs.core.nth.call(null, vec__20602, 1, null);
    return bootstrap.glyph.mkglyph.call(null, "pushpin");
  };
  var pushpin = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pushpin__delegate.call(this, args__2385__auto__);
  };
  pushpin.cljs$lang$maxFixedArity = 0;
  pushpin.cljs$lang$applyTo = function(arglist__20603) {
    var args__2385__auto__ = cljs.core.seq(arglist__20603);
    return pushpin__delegate(args__2385__auto__);
  };
  pushpin.cljs$core$IFn$_invoke$arity$variadic = pushpin__delegate;
  return pushpin;
}();
bootstrap.glyph.resize_horiz = function() {
  var resize_horiz__delegate = function(args__2385__auto__) {
    var vec__20605 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20605, 0, null);
    var kids = cljs.core.nth.call(null, vec__20605, 1, null);
    return bootstrap.glyph.mkglyph.call(null, "resize-horizontal");
  };
  var resize_horiz = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return resize_horiz__delegate.call(this, args__2385__auto__);
  };
  resize_horiz.cljs$lang$maxFixedArity = 0;
  resize_horiz.cljs$lang$applyTo = function(arglist__20606) {
    var args__2385__auto__ = cljs.core.seq(arglist__20606);
    return resize_horiz__delegate(args__2385__auto__);
  };
  resize_horiz.cljs$core$IFn$_invoke$arity$variadic = resize_horiz__delegate;
  return resize_horiz;
}();
bootstrap.glyph.ok_sign = function() {
  var ok_sign__delegate = function(args__2385__auto__) {
    var vec__20608 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20608, 0, null);
    var kids = cljs.core.nth.call(null, vec__20608, 1, null);
    return bootstrap.glyph.mkglyph.call(null, "ok-sign");
  };
  var ok_sign = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return ok_sign__delegate.call(this, args__2385__auto__);
  };
  ok_sign.cljs$lang$maxFixedArity = 0;
  ok_sign.cljs$lang$applyTo = function(arglist__20609) {
    var args__2385__auto__ = cljs.core.seq(arglist__20609);
    return ok_sign__delegate(args__2385__auto__);
  };
  ok_sign.cljs$core$IFn$_invoke$arity$variadic = ok_sign__delegate;
  return ok_sign;
}();
bootstrap.glyph.remove_sign = function() {
  var remove_sign__delegate = function(args__2385__auto__) {
    var vec__20611 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20611, 0, null);
    var kids = cljs.core.nth.call(null, vec__20611, 1, null);
    return bootstrap.glyph.mkglyph.call(null, "remove-sign");
  };
  var remove_sign = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return remove_sign__delegate.call(this, args__2385__auto__);
  };
  remove_sign.cljs$lang$maxFixedArity = 0;
  remove_sign.cljs$lang$applyTo = function(arglist__20612) {
    var args__2385__auto__ = cljs.core.seq(arglist__20612);
    return remove_sign__delegate(args__2385__auto__);
  };
  remove_sign.cljs$core$IFn$_invoke$arity$variadic = remove_sign__delegate;
  return remove_sign;
}();
goog.provide("bootstrap.button");
goog.require("cljs.core");
goog.require("tailrecursion.javelin");
goog.require("tailrecursion.hoplon");
goog.require("tailrecursion.hoplon");
goog.require("tailrecursion.javelin");
bootstrap.button.group = function() {
  var group__delegate = function(args__2385__auto__) {
    var vec__20569 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20569, 0, null);
    var kids = cljs.core.nth.call(null, vec__20569, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "btn-group"), attr, kids);
  };
  var group = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return group__delegate.call(this, args__2385__auto__);
  };
  group.cljs$lang$maxFixedArity = 0;
  group.cljs$lang$applyTo = function(arglist__20570) {
    var args__2385__auto__ = cljs.core.seq(arglist__20570);
    return group__delegate(args__2385__auto__);
  };
  group.cljs$core$IFn$_invoke$arity$variadic = group__delegate;
  return group;
}();
bootstrap.button.default$ = function() {
  var default$__delegate = function(args__2385__auto__) {
    var vec__20572 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20572, 0, null);
    var kids = cljs.core.nth.call(null, vec__20572, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.button.call(null, new cljs.core.Keyword(null, "type", "type", 1017479852), "button", new cljs.core.Keyword(null, "class", "class", 1108647146), "btn btn-default"), attr, kids);
  };
  var default$ = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return default$__delegate.call(this, args__2385__auto__);
  };
  default$.cljs$lang$maxFixedArity = 0;
  default$.cljs$lang$applyTo = function(arglist__20573) {
    var args__2385__auto__ = cljs.core.seq(arglist__20573);
    return default$__delegate(args__2385__auto__);
  };
  default$.cljs$core$IFn$_invoke$arity$variadic = default$__delegate;
  return default$;
}();
bootstrap.button.small = function() {
  var small__delegate = function(args__2385__auto__) {
    var vec__20575 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20575, 0, null);
    var kids = cljs.core.nth.call(null, vec__20575, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.button.call(null, new cljs.core.Keyword(null, "type", "type", 1017479852), "button", new cljs.core.Keyword(null, "class", "class", 1108647146), "btn btn-default btn-sm"), attr, kids);
  };
  var small = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return small__delegate.call(this, args__2385__auto__);
  };
  small.cljs$lang$maxFixedArity = 0;
  small.cljs$lang$applyTo = function(arglist__20576) {
    var args__2385__auto__ = cljs.core.seq(arglist__20576);
    return small__delegate(args__2385__auto__);
  };
  small.cljs$core$IFn$_invoke$arity$variadic = small__delegate;
  return small;
}();
bootstrap.button.xsmall = function() {
  var xsmall__delegate = function(args__2385__auto__) {
    var vec__20578 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20578, 0, null);
    var kids = cljs.core.nth.call(null, vec__20578, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.button.call(null, new cljs.core.Keyword(null, "type", "type", 1017479852), "button", new cljs.core.Keyword(null, "class", "class", 1108647146), "btn btn-default btn-xs"), attr, kids);
  };
  var xsmall = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return xsmall__delegate.call(this, args__2385__auto__);
  };
  xsmall.cljs$lang$maxFixedArity = 0;
  xsmall.cljs$lang$applyTo = function(arglist__20579) {
    var args__2385__auto__ = cljs.core.seq(arglist__20579);
    return xsmall__delegate(args__2385__auto__);
  };
  xsmall.cljs$core$IFn$_invoke$arity$variadic = xsmall__delegate;
  return xsmall;
}();
bootstrap.button.start = function() {
  var start__delegate = function(args__2385__auto__) {
    var vec__20581 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20581, 0, null);
    var kids = cljs.core.nth.call(null, vec__20581, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.a.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "btn btn-large btn-primary"), attr, kids);
  };
  var start = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return start__delegate.call(this, args__2385__auto__);
  };
  start.cljs$lang$maxFixedArity = 0;
  start.cljs$lang$applyTo = function(arglist__20582) {
    var args__2385__auto__ = cljs.core.seq(arglist__20582);
    return start__delegate(args__2385__auto__);
  };
  start.cljs$core$IFn$_invoke$arity$variadic = start__delegate;
  return start;
}();
bootstrap.button.more = function() {
  var more__delegate = function(args__2385__auto__) {
    var vec__20584 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
    var attr = cljs.core.nth.call(null, vec__20584, 0, null);
    var kids = cljs.core.nth.call(null, vec__20584, 1, null);
    return cljs.core.apply.call(null, tailrecursion.hoplon.a.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "btn btn-primary"), attr, kids);
  };
  var more = function(var_args) {
    var args__2385__auto__ = null;
    if (arguments.length > 0) {
      args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return more__delegate.call(this, args__2385__auto__);
  };
  more.cljs$lang$maxFixedArity = 0;
  more.cljs$lang$applyTo = function(arglist__20585) {
    var args__2385__auto__ = cljs.core.seq(arglist__20585);
    return more__delegate(args__2385__auto__);
  };
  more.cljs$core$IFn$_invoke$arity$variadic = more__delegate;
  return more;
}();
goog.provide("tailrecursion.hoplon.app_pages.G__19487");
goog.require("cljs.core");
goog.require("garden.core");
goog.require("tailrecursion.javelin");
goog.require("tailrecursion.hoplon");
goog.require("tailrecursion.javelin");
goog.require("bootstrap.tabs");
goog.require("bootstrap.tabs");
goog.require("bootstrap.glyph");
goog.require("bootstrap.glyph");
goog.require("bootstrap.grid");
goog.require("clojure.string");
goog.require("bootstrap.grid");
goog.require("bootstrap.navbar");
goog.require("bootstrap.navbar");
goog.require("bootstrap.page");
goog.require("bootstrap.page");
goog.require("clojure.string");
goog.require("tailrecursion.hoplon");
goog.require("tailrecursion.hoplon.util");
goog.require("bootstrap.button");
goog.require("bootstrap.button");
goog.require("tailrecursion.hoplon.util");
goog.require("bootstrap.list");
goog.require("bootstrap.list");
goog.require("bootstrap.panel");
goog.require("bootstrap.panel");
goog.require("garden.core");
goog.require("bootstrap.meta");
goog.require("bootstrap.core");
goog.require("bootstrap.meta");
goog.require("bootstrap.core");
tailrecursion.hoplon.app_pages.G__19487.hoploninit = function hoploninit() {
  tailrecursion.hoplon.app_pages.G__19487.route = tailrecursion.hoplon.util.route_cell.call(null, 10, "#/home/");
  tailrecursion.hoplon.app_pages.G__19487.cqrs_url = "http://martinfowler.com/bliki/CQRS.html";
  tailrecursion.hoplon.app_pages.G__19487.hoplon_url = "https://github.com/tailrecursion/hoplon";
  tailrecursion.hoplon.app_pages.G__19487.boot_url = "https://github.com/tailrecursion/boot";
  tailrecursion.hoplon.app_pages.G__19487.hoplon_clojars_url = "https://clojars.org/tailrecursion/hoplon";
  tailrecursion.hoplon.app_pages.G__19487.hoplon_demos_url = "https://github.com/tailrecursion/hoplon-demos";
  tailrecursion.hoplon.app_pages.G__19487.bootstrap_url = "http://getbootstrap.com/code-demos/";
  tailrecursion.hoplon.app_pages.G__19487.hoplon_group_url = "https://groups.google.com/forum/#!forum/hoplon";
  tailrecursion.hoplon.app_pages.G__19487.hoplon_issues_url = "https://github.com/tailrecursion/hoplon/issues";
  tailrecursion.hoplon.app_pages.G__19487.hoplon_discourse_url = "http://hoplon.discoursehosting.net";
  tailrecursion.hoplon.app_pages.G__19487.hyphenate_BANG_ = function hyphenate_BANG_() {
    jQuery("p").addClass("hyphenate").css("text-align", "justify");
    return Hyphenator.run();
  };
  tailrecursion.hoplon.app_pages.G__19487.vec__21181 = bootstrap.page.navbar_fixed_top.call(null, tailrecursion.hoplon.app_pages.G__19487.route, "PageTitle", "PageTitle", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.a.call(null, new cljs.core.Keyword(null, "href", "href", 1017115293), "#/home/", "Home"), tailrecursion.hoplon.div.call(null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.a.call(null, 
  new cljs.core.Keyword(null, "href", "href", 1017115293), "#/code-demos/", "Page Two"), bootstrap.core.container.call(null)], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tailrecursion.hoplon.a.call(null, new cljs.core.Keyword(null, "href", "href", 1017115293), "#/page3/", "Page Three"), bootstrap.core.container.call(null)], null));
  tailrecursion.hoplon.app_pages.G__19487.page_setup = cljs.core.nth.call(null, tailrecursion.hoplon.app_pages.G__19487.vec__21181, 0, null);
  tailrecursion.hoplon.app_pages.G__19487.nav_bar = cljs.core.nth.call(null, tailrecursion.hoplon.app_pages.G__19487.vec__21181, 1, null);
  tailrecursion.hoplon.app_pages.G__19487.content_home = cljs.core.nth.call(null, tailrecursion.hoplon.app_pages.G__19487.vec__21181, 2, null);
  tailrecursion.hoplon.app_pages.G__19487.content_code_demos = cljs.core.nth.call(null, tailrecursion.hoplon.app_pages.G__19487.vec__21181, 3, null);
  tailrecursion.hoplon.app_pages.G__19487.content_page3 = cljs.core.nth.call(null, tailrecursion.hoplon.app_pages.G__19487.vec__21181, 4, null);
  tailrecursion.hoplon.app_pages.G__19487.indexed = cljs.core.partial.call(null, cljs.core.map_indexed, cljs.core.list);
  tailrecursion.hoplon.app_pages.G__19487.gs_tasks = tailrecursion.javelin.cell.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "cur", "cur", 1014003122), null, new cljs.core.Keyword(null, "toc", "toc", 1014019258), cljs.core.PersistentVector.EMPTY], null));
  tailrecursion.hoplon.app_pages.G__19487.gs_tips = tailrecursion.javelin.cell.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "cur", "cur", 1014003122), null, new cljs.core.Keyword(null, "toc", "toc", 1014019258), cljs.core.PersistentVector.EMPTY], null));
  tailrecursion.hoplon.app_pages.G__19487.jump_to_toc = function() {
    var jump_to_toc__delegate = function(args__2385__auto__) {
      var vec__21188 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
      var map__21189 = cljs.core.nth.call(null, vec__21188, 0, null);
      var map__21189__$1 = cljs.core.seq_QMARK_.call(null, map__21189) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21189) : map__21189;
      var tocs = cljs.core.get.call(null, map__21189__$1, new cljs.core.Keyword(null, "tocs", "tocs", 1017469853));
      var _ = cljs.core.nth.call(null, vec__21188, 1, null);
      return tailrecursion.hoplon.a.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "topfix", new cljs.core.Keyword(null, "do-scroll-to", "do-scroll-to", 3603706411), tailrecursion.javelin.lift.call(null, function(G__21190, G__21193, G__21191, G__21192) {
        return G__21190.call(null, G__21191, G__21192.call(null, new cljs.core.Keyword(null, "cur", "cur", 1014003122), G__21193));
      }).call(null, cljs.core.some, tocs, cljs.core.zero_QMARK_, cljs.core.map));
    };
    var jump_to_toc = function(var_args) {
      var args__2385__auto__ = null;
      if (arguments.length > 0) {
        args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return jump_to_toc__delegate.call(this, args__2385__auto__);
    };
    jump_to_toc.cljs$lang$maxFixedArity = 0;
    jump_to_toc.cljs$lang$applyTo = function(arglist__21367) {
      var args__2385__auto__ = cljs.core.seq(arglist__21367);
      return jump_to_toc__delegate(args__2385__auto__);
    };
    jump_to_toc.cljs$core$IFn$_invoke$arity$variadic = jump_to_toc__delegate;
    return jump_to_toc;
  }();
  tailrecursion.hoplon.app_pages.G__19487.table_of_contents = function() {
    var table_of_contents__delegate = function(args__2385__auto__) {
      var vec__21203 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
      var map__21204 = cljs.core.nth.call(null, vec__21203, 0, null);
      var map__21204__$1 = cljs.core.seq_QMARK_.call(null, map__21204) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21204) : map__21204;
      var toc = cljs.core.get.call(null, map__21204__$1, new cljs.core.Keyword(null, "toc", "toc", 1014019258));
      var size = cljs.core.get.call(null, map__21204__$1, new cljs.core.Keyword(null, "size", "size", 1017434995));
      var _ = cljs.core.nth.call(null, vec__21203, 1, null);
      var toc_STAR_ = tailrecursion.javelin.lift.call(null, function(G__21206, G__21205) {
        return G__21205.call(null, (new cljs.core.Keyword(null, "toc", "toc", 1014019258)).cljs$core$IFn$_invoke$arity$1(G__21206));
      }).call(null, toc, tailrecursion.hoplon.app_pages.G__19487.indexed);
      return tailrecursion.hoplon.ul.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "list-unstyled", tailrecursion.hoplon.loop_tpl_STAR_.call(null, toc_STAR_, null, function(item__2392__auto__) {
        var vec__21207 = tailrecursion.javelin.cell_map.call(null, cljs.core.identity, tailrecursion.javelin.lift.call(null, function(G__21209) {
          var vec__21208 = G__21209;
          var i = cljs.core.nth.call(null, vec__21208, 0, null);
          var title = cljs.core.nth.call(null, vec__21208, 1, null);
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [i, title], null);
        }).call(null, item__2392__auto__));
        var i = cljs.core.nth.call(null, vec__21207, 0, null);
        var title = cljs.core.nth.call(null, vec__21207, 1, null);
        return tailrecursion.hoplon.li.call(null, tailrecursion.hoplon.a.call(null, new cljs.core.Keyword(null, "style", "style", 1123684643), "cursor:pointer;", new cljs.core.Keyword(null, "on-click", "on-click", 1416542092), function() {
          cljs.core.swap_BANG_.call(null, toc, cljs.core.assoc, new cljs.core.Keyword(null, "cur", "cur", 1014003122), null);
          return cljs.core.swap_BANG_.call(null, toc, cljs.core.assoc, new cljs.core.Keyword(null, "cur", "cur", 1014003122), cljs.core.deref.call(null, i) + 1);
        }, function() {
          var t__2406__auto__ = document.createTextNode("");
          tailrecursion.javelin.lift.call(null, function(G__21210, G__21211) {
            return G__21210.nodeValue = [cljs.core.str(G__21211)].join("");
          }).call(null, t__2406__auto__, title);
          return t__2406__auto__;
        }()));
      }));
    };
    var table_of_contents = function(var_args) {
      var args__2385__auto__ = null;
      if (arguments.length > 0) {
        args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return table_of_contents__delegate.call(this, args__2385__auto__);
    };
    table_of_contents.cljs$lang$maxFixedArity = 0;
    table_of_contents.cljs$lang$applyTo = function(arglist__21368) {
      var args__2385__auto__ = cljs.core.seq(arglist__21368);
      return table_of_contents__delegate(args__2385__auto__);
    };
    table_of_contents.cljs$core$IFn$_invoke$arity$variadic = table_of_contents__delegate;
    return table_of_contents;
  }();
  tailrecursion.hoplon.app_pages.G__19487.gs_block = function() {
    var gs_block__delegate = function(args__2385__auto__) {
      var vec__21217 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
      var map__21218 = cljs.core.nth.call(null, vec__21217, 0, null);
      var map__21218__$1 = cljs.core.seq_QMARK_.call(null, map__21218) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21218) : map__21218;
      var title = cljs.core.get.call(null, map__21218__$1, new cljs.core.Keyword(null, "title", "title", 1124275658));
      var type = cljs.core.get.call(null, map__21218__$1, new cljs.core.Keyword(null, "type", "type", 1017479852));
      var toc = cljs.core.get.call(null, map__21218__$1, new cljs.core.Keyword(null, "toc", "toc", 1014019258));
      var kids = cljs.core.nth.call(null, vec__21217, 1, null);
      if (cljs.core.truth_(toc)) {
        cljs.core.swap_BANG_.call(null, toc, cljs.core.update_in, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "toc", "toc", 1014019258)], null), cljs.core.conj, title);
      } else {
      }
      return bootstrap.panel.default$.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), [cljs.core.str("panel-"), cljs.core.str(cljs.core.name.call(null, type))].join(""), cljs.core.truth_(toc) ? tailrecursion.hoplon.a.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "topfix", new cljs.core.Keyword(null, "do-scroll-to", "do-scroll-to", 3603706411), tailrecursion.javelin.lift.call(null, function(G__21220, G__21221, G__21219) {
        return G__21219.call(null, G__21220, (new cljs.core.Keyword(null, "cur", "cur", 1014003122)).cljs$core$IFn$_invoke$arity$1(G__21221));
      }).call(null, cljs.core.count.call(null, (new cljs.core.Keyword(null, "toc", "toc", 1014019258)).cljs$core$IFn$_invoke$arity$1(cljs.core.deref.call(null, toc))), toc, cljs.core._EQ_)) : null, bootstrap.panel.heading.call(null, bootstrap.panel.title.call(null, title)), bootstrap.panel.body.call(null, kids, cljs.core.truth_(toc) ? tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "style", "style", 1123684643), "text-align:center", tailrecursion.hoplon.a.call(null, new cljs.core.Keyword(null, 
      "on-click", "on-click", 1416542092), function() {
        cljs.core.swap_BANG_.call(null, toc, cljs.core.assoc, new cljs.core.Keyword(null, "cur", "cur", 1014003122), null);
        return cljs.core.swap_BANG_.call(null, toc, cljs.core.assoc, new cljs.core.Keyword(null, "cur", "cur", 1014003122), 0);
      }, "back to top")) : null));
    };
    var gs_block = function(var_args) {
      var args__2385__auto__ = null;
      if (arguments.length > 0) {
        args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return gs_block__delegate.call(this, args__2385__auto__);
    };
    gs_block.cljs$lang$maxFixedArity = 0;
    gs_block.cljs$lang$applyTo = function(arglist__21369) {
      var args__2385__auto__ = cljs.core.seq(arglist__21369);
      return gs_block__delegate(args__2385__auto__);
    };
    gs_block.cljs$core$IFn$_invoke$arity$variadic = gs_block__delegate;
    return gs_block;
  }();
  tailrecursion.hoplon.app_pages.G__19487.gs_info = cljs.core.partial.call(null, tailrecursion.hoplon.app_pages.G__19487.gs_block, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "info", "info", 1017141280));
  tailrecursion.hoplon.app_pages.G__19487.gs_task = cljs.core.partial.call(null, tailrecursion.hoplon.app_pages.G__19487.gs_block, new cljs.core.Keyword(null, "toc", "toc", 1014019258), tailrecursion.hoplon.app_pages.G__19487.gs_tasks, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "primary", "primary", 699138420));
  tailrecursion.hoplon.app_pages.G__19487.gs_tip = cljs.core.partial.call(null, tailrecursion.hoplon.app_pages.G__19487.gs_block, new cljs.core.Keyword(null, "toc", "toc", 1014019258), tailrecursion.hoplon.app_pages.G__19487.gs_tips, new cljs.core.Keyword(null, "type", "type", 1017479852), new cljs.core.Keyword(null, "warning", "warning", 2138350350));
  tailrecursion.hoplon.app_pages.G__19487.example = tailrecursion.javelin.cell.call(null, 1);
  tailrecursion.hoplon.app_pages.G__19487.bmi_height = tailrecursion.javelin.cell.call(null, 180);
  tailrecursion.hoplon.app_pages.G__19487.bmi_weight = tailrecursion.javelin.cell.call(null, 800);
  tailrecursion.hoplon.app_pages.G__19487.task2syntax = tailrecursion.javelin.cell.call(null, 0);
  tailrecursion.hoplon.app_pages.G__19487.my_list = function() {
    var my_list__delegate = function(args__2385__auto__) {
      var vec__21225 = tailrecursion.hoplon.parse_args.call(null, args__2385__auto__);
      var attrs = cljs.core.nth.call(null, vec__21225, 0, null);
      var children = cljs.core.nth.call(null, vec__21225, 1, null);
      var heading = tailrecursion.hoplon.b.call(null);
      var body = tailrecursion.hoplon.ul.call(null);
      var widget = tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "my-list", heading.call(null), body.call(null));
      tailrecursion.hoplon.on_append_BANG_.call(null, widget, function(p__21226, children__$1) {
        var map__21227 = p__21226;
        var map__21227__$1 = cljs.core.seq_QMARK_.call(null, map__21227) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21227) : map__21227;
        var attrs__$1 = map__21227__$1;
        var title = cljs.core.get.call(null, map__21227__$1, new cljs.core.Keyword(null, "title", "title", 1124275658));
        if (cljs.core.truth_(title)) {
          tailrecursion.hoplon.do_BANG_.call(null, heading, new cljs.core.Keyword(null, "text", "text", 1017460895), title);
        } else {
        }
        tailrecursion.hoplon.add_attributes_BANG_.call(null, widget, cljs.core.dissoc.call(null, attrs__$1, new cljs.core.Keyword(null, "title", "title", 1124275658)));
        return cljs.core.apply.call(null, body, cljs.core.map.call(null, tailrecursion.hoplon.li, children__$1));
      });
      return cljs.core.apply.call(null, widget, attrs, children);
    };
    var my_list = function(var_args) {
      var args__2385__auto__ = null;
      if (arguments.length > 0) {
        args__2385__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return my_list__delegate.call(this, args__2385__auto__);
    };
    my_list.cljs$lang$maxFixedArity = 0;
    my_list.cljs$lang$applyTo = function(arglist__21370) {
      var args__2385__auto__ = cljs.core.seq(arglist__21370);
      return my_list__delegate(args__2385__auto__);
    };
    my_list.cljs$core$IFn$_invoke$arity$variadic = my_list__delegate;
    return my_list;
  }();
  tailrecursion.hoplon.app_pages.G__19487.bmi = tailrecursion.javelin.lift.call(null, function(G__21229, G__21228) {
    var h = G__21228 / 100;
    var w = G__21229 / 10;
    return w / (h * h);
  }).call(null, tailrecursion.hoplon.app_pages.G__19487.bmi_weight, tailrecursion.hoplon.app_pages.G__19487.bmi_height);
  tailrecursion.hoplon.app_pages.G__19487.bmi_msg = tailrecursion.javelin.lift.call(null, function(G__21230) {
    if (cljs.core.truth_(G__21230 < 18.5)) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["underweight", "orange"], null);
    } else {
      if (cljs.core.truth_(G__21230 < 25)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["normal", "inherit"], null);
      } else {
        if (cljs.core.truth_(G__21230 < 30)) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["overweight", "orange"], null);
        } else {
          if (new cljs.core.Keyword(null, "else", "else", 1017020587)) {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["obese", "red"], null);
          } else {
            return null;
          }
        }
      }
    }
  }).call(null, tailrecursion.hoplon.app_pages.G__19487.bmi);
  tailrecursion.hoplon.app_pages.G__19487.int$ = parseInt;
  tailrecursion.hoplon.app_pages.G__19487.calc_op = new cljs.core.PersistentArrayMap(null, 4, ["+", cljs.core._PLUS_, "-", cljs.core._, "*", cljs.core._STAR_, "/", cljs.core._SLASH_], null);
  tailrecursion.hoplon.app_pages.G__19487.calc_x = tailrecursion.javelin.cell.call(null, 0);
  tailrecursion.hoplon.app_pages.G__19487.calc_y = tailrecursion.javelin.cell.call(null, 0);
  tailrecursion.hoplon.app_pages.G__19487.calc_z = tailrecursion.javelin.cell.call(null, cljs.core._PLUS_);
  tailrecursion.hoplon.app_pages.G__19487.counter_code = function counter_code() {
    return tailrecursion.hoplon.pre.call(null, tailrecursion.hoplon.code.call(null, '(page "index.html")\n\n(defc clicks 0)\n\n(html\n  (head)\n  (body\n    (text "Clicks so far: ~{clicks} ")\n    (button :on-click #(swap! clicks inc) "click me!")))'));
  };
  tailrecursion.hoplon.app_pages.G__19487.counter_ex = function counter_ex() {
    var clicks = tailrecursion.javelin.cell.call(null, 0);
    return bootstrap.panel.default$.call(null, bootstrap.panel.body.call(null, function() {
      var t__2406__auto__ = document.createTextNode("");
      tailrecursion.javelin.lift.call(null, function(G__21233, G__21234) {
        return G__21233.nodeValue = [cljs.core.str("Clicks so far: "), cljs.core.str(G__21234), cljs.core.str(" ")].join("");
      }).call(null, t__2406__auto__, clicks);
      return t__2406__auto__;
    }(), tailrecursion.hoplon.button.call(null, new cljs.core.Keyword(null, "on-click", "on-click", 1416542092), function() {
      return cljs.core.swap_BANG_.call(null, clicks, cljs.core.inc);
    }, "click me!")));
  };
  tailrecursion.hoplon.app_pages.G__19487.loop_code1 = function loop_code1() {
    return tailrecursion.hoplon.pre.call(null, tailrecursion.hoplon.code.call(null, '(page "index.html")\n\n(defc things ["one" "two" "three"])\n\n(html\n  (head)\n  (body\n    (ul\n      (loop-tpl :bindings [x things]\n        (li @x)))))'));
  };
  tailrecursion.hoplon.app_pages.G__19487.loop_ex1 = function loop_ex1() {
    var xs = tailrecursion.javelin.cell.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["one", "two", "three"], null));
    return bootstrap.panel.default$.call(null, bootstrap.panel.body.call(null, tailrecursion.hoplon.ul.call(null, tailrecursion.hoplon.loop_tpl_STAR_.call(null, xs, null, function(item__2392__auto__) {
      var vec__21237 = tailrecursion.javelin.cell_map.call(null, cljs.core.identity, tailrecursion.javelin.lift.call(null, function(G__21238) {
        var x = G__21238;
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null);
      }).call(null, item__2392__auto__));
      var x = cljs.core.nth.call(null, vec__21237, 0, null);
      return tailrecursion.hoplon.li.call(null, cljs.core.deref.call(null, x));
    }))));
  };
  tailrecursion.hoplon.app_pages.G__19487.loop_code2 = function loop_code2() {
    return tailrecursion.hoplon.pre.call(null, tailrecursion.hoplon.code.call(null, '(page "index.html"\n  (:require\n   [clojure.string :refer [upper-case lower-case]]))\n\n;; State machine private\n(defc  uc?    false)\n(defc  things [{:text "one"} {:text "two"} {:text "three"}])\n(defc\x3d case   (if uc? upper-case lower-case))\n\n;; State machine public API\n(defc\x3d state  (mapv #(update-in % [:text] case) things))\n(defn toggle-case! [_] (swap! uc? not))\n\n;; Presentation (uses public API)\n(html\n  (head)\n  (body\n    (ul\n      (loop-tpl :bindings [{x :text} state]\n        (li (text "~{x}"))))\n    (button :on-click toggle-case! "toggle case")))'));
  };
  tailrecursion.hoplon.app_pages.G__19487.loop_ex2 = function loop_ex2() {
    var u_QMARK_ = tailrecursion.javelin.cell.call(null, false);
    var uc = tailrecursion.javelin.lift.call(null, function(u_QMARK_) {
      return function(G__21252, G__21253, G__21251) {
        if (cljs.core.truth_(G__21251)) {
          return G__21252;
        } else {
          return G__21253;
        }
      };
    }(u_QMARK_)).call(null, clojure.string.upper_case, clojure.string.lower_case, u_QMARK_);
    var xs = tailrecursion.javelin.cell.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "text", "text", 1017460895), "one"], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "text", "text", 1017460895), "two"], null), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "text", "text", 1017460895), "three"], null)], null));
    var st = tailrecursion.javelin.lift.call(null, function(u_QMARK_, uc, xs) {
      return function(G__21254, G__21255, G__21257, G__21256) {
        return G__21254.call(null, function(u_QMARK_, uc, xs) {
          return function(p1__20994_SHARP_) {
            return G__21255.call(null, p1__20994_SHARP_, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "text", "text", 1017460895)], null), G__21256);
          };
        }(u_QMARK_, uc, xs), G__21257);
      };
    }(u_QMARK_, uc, xs)).call(null, cljs.core.mapv, cljs.core.update_in, xs, uc);
    return bootstrap.panel.default$.call(null, bootstrap.panel.body.call(null, tailrecursion.hoplon.ul.call(null, tailrecursion.hoplon.loop_tpl_STAR_.call(null, st, null, function(item__2392__auto__) {
      var vec__21258 = tailrecursion.javelin.cell_map.call(null, cljs.core.identity, tailrecursion.javelin.lift.call(null, function(G__21260) {
        var map__21259 = G__21260;
        var map__21259__$1 = cljs.core.seq_QMARK_.call(null, map__21259) ? cljs.core.apply.call(null, cljs.core.hash_map, map__21259) : map__21259;
        var x = cljs.core.get.call(null, map__21259__$1, new cljs.core.Keyword(null, "text", "text", 1017460895));
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null);
      }).call(null, item__2392__auto__));
      var x = cljs.core.nth.call(null, vec__21258, 0, null);
      return tailrecursion.hoplon.li.call(null, function() {
        var t__2406__auto__ = document.createTextNode("");
        tailrecursion.javelin.lift.call(null, function(G__21261, G__21262) {
          return G__21261.nodeValue = [cljs.core.str(G__21262)].join("");
        }).call(null, t__2406__auto__, x);
        return t__2406__auto__;
      }());
    })), tailrecursion.hoplon.button.call(null, new cljs.core.Keyword(null, "on-click", "on-click", 1416542092), function() {
      return cljs.core.swap_BANG_.call(null, u_QMARK_, cljs.core.not);
    }, "toggle case")));
  };
  tailrecursion.hoplon.app_pages.G__19487.video_dims = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "width", "width", 1127031096), 523, new cljs.core.Keyword(null, "height", "height", 4087841945), 392], null);
  tailrecursion.hoplon.app_pages.G__19487.video_url = "//www.youtube-nocookie.com/embed/XQu8TTBmGhA";
  tailrecursion.hoplon.app_pages.G__19487.video_thumb_url = "http://img.youtube.com/vi/XQu8TTBmGhA/0.jpg";
  tailrecursion.hoplon.app_pages.G__19487.copyright_footer = function copyright_footer() {
    return tailrecursion.hoplon.footer.call(null, tailrecursion.hoplon.div.call(null, "Copyright \u00a9"));
  };
  tailrecursion.hoplon.add_initfn_BANG_.call(null, function() {
    mixpanel.track(window.location.href);
    return tailrecursion.hoplon.app_pages.G__19487.hyphenate_BANG_.call(null);
  });
  return tailrecursion.hoplon.init.call(null, new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [function() {
    var G__21264 = garden.core.css.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "h1", "h1", 1013907515), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "color", "color", 1108746965), "red"], null)], null));
    var G__21263 = tailrecursion.hoplon.style.call(null, new cljs.core.Keyword(null, "type", "type", 1017479852), "text/css", G__21264);
    return G__21263;
  }(), function() {
    var G__21265 = tailrecursion.hoplon.app_pages.G__19487.nav_bar.call(null);
    return G__21265;
  }(), function() {
    var G__21266 = tailrecursion.hoplon.a.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "topfix", new cljs.core.Keyword(null, "do-scroll-to", "do-scroll-to", 3603706411), tailrecursion.javelin.lift.call(null, function(G__21267) {
      return G__21267;
    }).call(null, tailrecursion.hoplon.app_pages.G__19487.route));
    return G__21266;
  }(), function() {
    var G__21269 = tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "nojs-error", "This page uses JavaScript but it looks like you have it turned off.");
    var G__21268 = tailrecursion.hoplon.noscript.call(null, G__21269);
    return G__21268;
  }(), function() {
    var G__21274 = tailrecursion.hoplon.h1.call(null, "Title");
    var G__21273 = bootstrap.core.container.call(null, G__21274);
    var G__21272 = bootstrap.core.container.call(null, G__21273);
    var G__21271 = bootstrap.core.jumbotron.call(null, G__21272);
    var G__21278 = tailrecursion.hoplon.h2.call(null, "Col 1");
    var G__21277 = bootstrap.grid.col4.call(null, G__21278);
    var G__21280 = tailrecursion.hoplon.h2.call(null, "Col 2");
    var G__21279 = bootstrap.grid.col4.call(null, G__21280);
    var G__21282 = tailrecursion.hoplon.h2.call(null, "Col 3");
    var G__21281 = bootstrap.grid.col4.call(null, G__21282);
    var G__21276 = bootstrap.grid.row.call(null, G__21277, G__21279, G__21281);
    var G__21285 = tailrecursion.hoplon.h2.call(null, "Col 1");
    var G__21284 = bootstrap.grid.col6.call(null, G__21285);
    var G__21287 = tailrecursion.hoplon.h2.call(null, "Col 2");
    var G__21289 = tailrecursion.hoplon.small.call(null, "list/divgroup");
    var G__21288 = tailrecursion.hoplon.h2.call(null, G__21289);
    var G__21293 = bootstrap.panel.title.call(null, "Panel 1");
    var G__21292 = tailrecursion.hoplon.a.call(null, new cljs.core.Keyword(null, "do-toggle", "do-toggle", 1250159176), tailrecursion.javelin.lift.call(null, function(G__21274, G__21273, G__21272, G__21271, G__21278, G__21277, G__21280, G__21279, G__21282, G__21281, G__21276, G__21285, G__21284, G__21287, G__21289, G__21288, G__21293) {
      return function(G__21313, G__21314) {
        return G__21313.call(null, G__21314, 1);
      };
    }(G__21274, G__21273, G__21272, G__21271, G__21278, G__21277, G__21280, G__21279, G__21282, G__21281, G__21276, G__21285, G__21284, G__21287, G__21289, G__21288, G__21293)).call(null, cljs.core.not_EQ_, tailrecursion.hoplon.app_pages.G__19487.example), G__21293);
    var G__21295 = bootstrap.panel.title.call(null, "Panel 1");
    var G__21294 = tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "do-toggle", "do-toggle", 1250159176), tailrecursion.javelin.lift.call(null, function(G__21274, G__21273, G__21272, G__21271, G__21278, G__21277, G__21280, G__21279, G__21282, G__21281, G__21276, G__21285, G__21284, G__21287, G__21289, G__21288, G__21293, G__21292, G__21295) {
      return function(G__21315, G__21316) {
        return G__21315.call(null, G__21316, 1);
      };
    }(G__21274, G__21273, G__21272, G__21271, G__21278, G__21277, G__21280, G__21279, G__21282, G__21281, G__21276, G__21285, G__21284, G__21287, G__21289, G__21288, G__21293, G__21292, G__21295)).call(null, cljs.core._EQ_, tailrecursion.hoplon.app_pages.G__19487.example), G__21295, tailrecursion.hoplon.pre.call(null, tailrecursion.hoplon.code.call(null, "Code segment")), tailrecursion.hoplon.pre.call(null, tailrecursion.hoplon.code.call(null, "Code segment")));
    var G__21291 = bootstrap.list.divitem.call(null, new cljs.core.Keyword(null, "on-click", "on-click", 1416542092), function(G__21274, G__21273, G__21272, G__21271, G__21278, G__21277, G__21280, G__21279, G__21282, G__21281, G__21276, G__21285, G__21284, G__21287, G__21289, G__21288, G__21293, G__21292, G__21295, G__21294) {
      return function() {
        return cljs.core.reset_BANG_.call(null, tailrecursion.hoplon.app_pages.G__19487.example, 1);
      };
    }(G__21274, G__21273, G__21272, G__21271, G__21278, G__21277, G__21280, G__21279, G__21282, G__21281, G__21276, G__21285, G__21284, G__21287, G__21289, G__21288, G__21293, G__21292, G__21295, G__21294), G__21292, G__21294);
    var G__21297 = tailrecursion.hoplon.a.call(null, new cljs.core.Keyword(null, "class", "class", 1108647146), "topfix", new cljs.core.Keyword(null, "do-scroll-to", "do-scroll-to", 3603706411), tailrecursion.javelin.lift.call(null, function(G__21274, G__21273, G__21272, G__21271, G__21278, G__21277, G__21280, G__21279, G__21282, G__21281, G__21276, G__21285, G__21284, G__21287, G__21289, G__21288, G__21293, G__21292, G__21295, G__21294, G__21291) {
      return function(G__21317, G__21318) {
        return G__21317.call(null, G__21318, 2);
      };
    }(G__21274, G__21273, G__21272, G__21271, G__21278, G__21277, G__21280, G__21279, G__21282, G__21281, G__21276, G__21285, G__21284, G__21287, G__21289, G__21288, G__21293, G__21292, G__21295, G__21294, G__21291)).call(null, cljs.core._EQ_, tailrecursion.hoplon.app_pages.G__19487.example));
    var G__21299 = bootstrap.panel.title.call(null, "Panel 2");
    var G__21298 = tailrecursion.hoplon.a.call(null, new cljs.core.Keyword(null, "do-toggle", "do-toggle", 1250159176), tailrecursion.javelin.lift.call(null, function(G__21274, G__21273, G__21272, G__21271, G__21278, G__21277, G__21280, G__21279, G__21282, G__21281, G__21276, G__21285, G__21284, G__21287, G__21289, G__21288, G__21293, G__21292, G__21295, G__21294, G__21291, G__21297, G__21299) {
      return function(G__21319, G__21320) {
        return G__21319.call(null, G__21320, 2);
      };
    }(G__21274, G__21273, G__21272, G__21271, G__21278, G__21277, G__21280, G__21279, G__21282, G__21281, G__21276, G__21285, G__21284, G__21287, G__21289, G__21288, G__21293, G__21292, G__21295, G__21294, G__21291, G__21297, G__21299)).call(null, cljs.core.not_EQ_, tailrecursion.hoplon.app_pages.G__19487.example), G__21299);
    var G__21312 = bootstrap.panel.title.call(null, "Panel 2");
    var G__21311 = tailrecursion.hoplon.div.call(null, new cljs.core.Keyword(null, "do-toggle", "do-toggle", 1250159176), tailrecursion.javelin.lift.call(null, function(G__21274, G__21273, G__21272, G__21271, G__21278, G__21277, G__21280, G__21279, G__21282, G__21281, G__21276, G__21285, G__21284, G__21287, G__21289, G__21288, G__21293, G__21292, G__21295, G__21294, G__21291, G__21297, G__21299, G__21298, G__21312) {
      return function(G__21321, G__21322) {
        return G__21321.call(null, G__21322, 2);
      };
    }(G__21274, G__21273, G__21272, G__21271, G__21278, G__21277, G__21280, G__21279, G__21282, G__21281, G__21276, G__21285, G__21284, G__21287, G__21289, G__21288, G__21293, G__21292, G__21295, G__21294, G__21291, G__21297, G__21299, G__21298, G__21312)).call(null, cljs.core._EQ_, tailrecursion.hoplon.app_pages.G__19487.example), G__21312);
    var G__21296 = bootstrap.list.divitem.call(null, new cljs.core.Keyword(null, "on-click", "on-click", 1416542092), function(G__21274, G__21273, G__21272, G__21271, G__21278, G__21277, G__21280, G__21279, G__21282, G__21281, G__21276, G__21285, G__21284, G__21287, G__21289, G__21288, G__21293, G__21292, G__21295, G__21294, G__21291, G__21297, G__21299, G__21298, G__21312, G__21311) {
      return function() {
        return cljs.core.reset_BANG_.call(null, tailrecursion.hoplon.app_pages.G__19487.example, 2);
      };
    }(G__21274, G__21273, G__21272, G__21271, G__21278, G__21277, G__21280, G__21279, G__21282, G__21281, G__21276, G__21285, G__21284, G__21287, G__21289, G__21288, G__21293, G__21292, G__21295, G__21294, G__21291, G__21297, G__21299, G__21298, G__21312, G__21311), G__21297, G__21298, G__21311);
    var G__21290 = bootstrap.list.divgroup.call(null, G__21291, G__21296);
    var G__21304 = bootstrap.panel.title.call(null, "Panel");
    var G__21303 = bootstrap.panel.heading.call(null, G__21304);
    var G__21307 = tailrecursion.hoplon.span.call(null, "1");
    var G__21308 = tailrecursion.hoplon.span.call(null, "panel 1");
    var G__21309 = tailrecursion.hoplon.span.call(null, "2");
    var G__21310 = tailrecursion.hoplon.span.call(null, "panel 2");
    var G__21306 = bootstrap.tabs.tabs.call(null, G__21307, G__21308, G__21309, G__21310);
    var G__21305 = bootstrap.panel.body.call(null, G__21306);
    var G__21302 = bootstrap.panel.default$.call(null, G__21303, G__21305);
    var G__21286 = bootstrap.grid.col6.call(null, G__21287, null, G__21288, G__21290, G__21302);
    var G__21283 = bootstrap.grid.row.call(null, G__21284, G__21286);
    var G__21300 = tailrecursion.hoplon.hr.call(null);
    var G__21301 = tailrecursion.hoplon.app_pages.G__19487.copyright_footer.call(null);
    var G__21275 = bootstrap.core.container.call(null, G__21276, G__21283, G__21300, G__21301);
    var G__21270 = tailrecursion.hoplon.app_pages.G__19487.content_home.call(null, G__21271, G__21275);
    return G__21270;
  }(), function() {
    var G__21326 = tailrecursion.hoplon.h1.call(null, "Page Title");
    var G__21327 = tailrecursion.hoplon.app_pages.G__19487.jump_to_toc.call(null, new cljs.core.Keyword(null, "tocs", "tocs", 1017469853), tailrecursion.javelin.lift.call(null, function(G__21326) {
      return function(G__21363, G__21362) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__21362, G__21363], null);
      };
    }(G__21326)).call(null, tailrecursion.hoplon.app_pages.G__19487.gs_tips, tailrecursion.hoplon.app_pages.G__19487.gs_tasks));
    var G__21330 = bootstrap.panel.title.call(null, "Table of Contents");
    var G__21329 = bootstrap.panel.heading.call(null, G__21330);
    var G__21334 = tailrecursion.hoplon.app_pages.G__19487.table_of_contents.call(null, new cljs.core.Keyword(null, "size", "size", 1017434995), 10, new cljs.core.Keyword(null, "toc", "toc", 1014019258), tailrecursion.hoplon.app_pages.G__19487.gs_tasks);
    var G__21333 = bootstrap.grid.col6.call(null, G__21334);
    var G__21336 = tailrecursion.hoplon.app_pages.G__19487.table_of_contents.call(null, new cljs.core.Keyword(null, "size", "size", 1017434995), 10, new cljs.core.Keyword(null, "toc", "toc", 1014019258), tailrecursion.hoplon.app_pages.G__19487.gs_tips);
    var G__21335 = bootstrap.grid.col6.call(null, G__21336);
    var G__21332 = bootstrap.grid.row.call(null, G__21333, G__21335);
    var G__21331 = bootstrap.panel.body.call(null, G__21332);
    var G__21328 = bootstrap.panel.default$.call(null, G__21329, G__21331);
    var G__21337 = tailrecursion.hoplon.app_pages.G__19487.gs_info.call(null, new cljs.core.Keyword(null, "title", "title", 1124275658), "gl-info");
    var G__21344 = tailrecursion.hoplon.app_pages.G__19487.gs_task.call(null, new cljs.core.Keyword(null, "title", "title", 1124275658), "gs-task 1", tailrecursion.hoplon.pre.call(null, tailrecursion.hoplon.code.call(null, "code example")));
    var G__21345 = tailrecursion.hoplon.app_pages.G__19487.gs_task.call(null, new cljs.core.Keyword(null, "title", "title", 1124275658), "gs-task 2");
    var G__21350 = tailrecursion.hoplon.span.call(null, "Zero");
    var G__21352 = tailrecursion.hoplon.h4.call(null, "Foo");
    var G__21353 = tailrecursion.hoplon.p.call(null, "Content for tab 0.");
    var G__21351 = tailrecursion.hoplon.div.call(null, G__21352, G__21353);
    var G__21354 = tailrecursion.hoplon.span.call(null, "One");
    var G__21356 = tailrecursion.hoplon.h4.call(null, "Bar");
    var G__21357 = tailrecursion.hoplon.p.call(null, "Content for tab 1.");
    var G__21355 = tailrecursion.hoplon.div.call(null, G__21356, G__21357);
    var G__21358 = tailrecursion.hoplon.span.call(null, "Two");
    var G__21360 = tailrecursion.hoplon.h4.call(null, "Baz");
    var G__21361 = tailrecursion.hoplon.p.call(null, "Content for tab 2.");
    var G__21359 = tailrecursion.hoplon.div.call(null, G__21360, G__21361);
    var G__21349 = bootstrap.tabs.tabs.call(null, G__21350, G__21351, G__21354, G__21355, G__21358, G__21359);
    var G__21348 = bootstrap.panel.body.call(null, G__21349);
    var G__21347 = bootstrap.panel.default$.call(null, G__21348);
    var G__21346 = tailrecursion.hoplon.app_pages.G__19487.gs_task.call(null, new cljs.core.Keyword(null, "title", "title", 1124275658), "Tabs task", G__21347);
    var G__21325 = bootstrap.grid.col6.call(null, G__21326, G__21327, G__21328, G__21337, G__21344, G__21345, G__21346);
    var G__21339 = tailrecursion.hoplon.h2.call(null, "asdf");
    var G__21340 = tailrecursion.hoplon.app_pages.G__19487.gs_tip.call(null, new cljs.core.Keyword(null, "title", "title", 1124275658), "Tip 1");
    var G__21341 = tailrecursion.hoplon.app_pages.G__19487.gs_tip.call(null, new cljs.core.Keyword(null, "title", "title", 1124275658), "Tip 2", tailrecursion.hoplon.div.call(null, tailrecursion.hoplon.p.call(null, "Markdown")));
    var G__21338 = bootstrap.grid.col6.call(null, G__21339, G__21340, G__21341);
    var G__21324 = bootstrap.grid.row.call(null, G__21325, G__21338);
    var G__21342 = tailrecursion.hoplon.hr.call(null);
    var G__21343 = tailrecursion.hoplon.app_pages.G__19487.copyright_footer.call(null);
    var G__21323 = tailrecursion.hoplon.app_pages.G__19487.content_code_demos.call(null, G__21324, G__21342, G__21343);
    return G__21323;
  }(), function() {
    var G__21366 = tailrecursion.hoplon.h1.call(null, "Row");
    var G__21365 = bootstrap.grid.row.call(null, G__21366);
    var G__21364 = tailrecursion.hoplon.app_pages.G__19487.content_page3.call(null, G__21365);
    return G__21364;
  }()], null));
};
goog.exportSymbol("tailrecursion.hoplon.app_pages.G__19487.hoploninit", tailrecursion.hoplon.app_pages.G__19487.hoploninit);
